成员函数:无论静态函数还是非静态函数,都是属于类的(这一点与数据成员的静态非静态不同),对象并不拥有函数的拷贝.两者的区别在于:非静态的函数由类对象(加.或指针加-&gt;;)调用,这时将向函数传递this指针.而静态函数由类名(::)(或对象名.)调用,但静态函数不传递this指针,不识别对象个体,所以通常用来对类的静态数据成员操作.
程序最终都将在内存中执行，变量只有在内存中占有一席之地时才能被访问。
类的静态成员(变量和方法)属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问；非静态成员（变量和方法）属于类的对象，所以只有在类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。
在一个类的静态成员中去访问其非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错。
C&#43;&#43;会区分两种类型的成员函数：静态成员函数和非静态成员函数。这两者之间的一个重大区别是，静态成员函数不接受隐含的this自变量。所以，它就无法访问自己类的非静态成员。
静态数据成员
在类中，静态成员可以实现多个对象之间的数据共享，并且使用静态数据成员还不会破坏隐藏的原则，即保证了安全性。因此，静态成员是类的所有对象中共享的成员，而不是某个对象的成员。
使用静态数据成员可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的&#20540;对每个对象都是一样，但它的&#20540;是可以更新的。只要对静态数据成员的&#20540;更新一次，保证所有对象存取更新后的相同的&#20540;，这样可以提高时间效率。
静态数据成员的使用方法和注意事项如下：
1、静态数据成员在定义或说明时前面加关键字static。
2、静态成员初始化与一般数据成员初始化不同。静态数据成员初始化的&#26684;式如下：





&lt;数据类型&gt;&lt;类名&gt;::&lt;静态数据成员名&gt;=&lt;&#20540;&gt;
这表明：

(1)初始化在类体外进行，而前面不加static，以免与一般静态变量或对象相混淆。
(2)初始化时不加该成员的访问权限控制符private，public等。
(3)初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员。
3、静态数据成员是静态存储的，它是静态生存期，必须对它进行初始化。
4、引用静态数据成员时，采用如下&#26684;式：
&lt;类名&gt;::&lt;静态成员名&gt;
静态成员函数
静态成员函数和静态数据成员一样，它们都属于类的静态成员，它们都不是对象成员。因此，对静态成员的引用不需要用对象名。


在静态成员函数的实现中不能直接引用类中说明的非静态成员，可以引用类中说明的静态成员。如果静态成员函数中要引用非静态成员时，可通过对象来引用。下面通过例子来说明这一点。

读者可以自行分析其结果。从中可看出，调用静态成员函数使用如下&#26684;式：
&lt;类名&gt;::&lt;静态成员函数名&gt;(&lt;参数表&gt;);
运行结果：
A=5
B=15
A=10
B=15
成员函数:无论静态函数还是非静态函数,都是属于类的(这一点与数据成员的静态非静态不同),对象并不拥有函数的拷贝.两者的区别在于:非静态的函数由类对象(加.或指针加-&gt;;)调用,这时将向函数传递this指针.而静态函数由类名(::)(或对象名.)调用,但静态函数不传递this指针,不识别对象个体,所以通常用来对类的静态数据成员操作.
程序最终都将在内存中执行，变量只有在内存中占有一席之地时才能被访问。
类的静态成员(变量和方法)属于类本身，在类加载的时候就会分配内存，可以通过类名直接去访问；非静态成员（变量和方法）属于类的对象，所以只有在类的对象产生（创建类的实例）时才会分配内存，然后通过类的对象（实例）去访问。
在一个类的静态成员中去访问其非静态成员之所以会出错是因为在类的非静态成员不存在的时候类的静态成员就已经存在了，访问一个内存中不存在的东西当然会出错。
C&#43;&#43;会区分两种类型的成员函数：静态成员函数和非静态成员函数。这两者之间的一个重大区别是，静态成员函数不接受隐含的this自变量。所以，它就无法访问自己类的非静态成员。
静态数据成员
在类中，静态成员可以实现多个对象之间的数据共享，并且使用静态数据成员还不会破坏隐藏的原则，即保证了安全性。因此，静态成员是类的所有对象中共享的成员，而不是某个对象的成员。
使用静态数据成员可以节省内存，因为它是所有对象所公有的，因此，对多个对象来说，静态数据成员只存储一处，供所有对象共用。静态数据成员的&#20540;对每个对象都是一样，但它的&#20540;是可以更新的。只要对静态数据成员的&#20540;更新一次，保证所有对象存取更新后的相同的&#20540;，这样可以提高时间效率。
静态数据成员的使用方法和注意事项如下：
1、静态数据成员在定义或说明时前面加关键字static。
2、静态成员初始化与一般数据成员初始化不同。静态数据成员初始化的&#26684;式如下：





&lt;数据类型&gt;&lt;类名&gt;::&lt;静态数据成员名&gt;=&lt;&#20540;&gt;
这表明：

(1)初始化在类体外进行，而前面不加static，以免与一般静态变量或对象相混淆。
(2)初始化时不加该成员的访问权限控制符private，public等。
(3)初始化时使用作用域运算符来标明它所属类，因此，静态数据成员是类的成员，而不是对象的成员。
3、静态数据成员是静态存储的，它是静态生存期，必须对它进行初始化。
4、引用静态数据成员时，采用如下&#26684;式：
&lt;类名&gt;::&lt;静态成员名&gt;
静态成员函数
静态成员函数和静态数据成员一样，它们都属于类的静态成员，它们都不是对象成员。因此，对静态成员的引用不需要用对象名。


在静态成员函数的实现中不能直接引用类中说明的非静态成员，可以引用类中说明的静态成员。如果静态成员函数中要引用非静态成员时，可通过对象来引用。下面通过例子来说明这一点。

读者可以自行分析其结果。从中可看出，调用静态成员函数使用如下&#26684;式：
&lt;类名&gt;::&lt;静态成员函数名&gt;(&lt;参数表&gt;);
运行结果：
A=5
B=15
A=10
B=15
