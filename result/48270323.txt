Conkiti的调度内核很简单：使用轻量级的proto-threads进程模型，可以在事件驱动内核上提供一种线性的、类&#20284;于线程的编程风&#26684;。
因此Conkiti的上下文保存不会使用到汇编而完全用C语言完成，proto-threads属于抢占式OS模型，需要进程主动释放CPU，进程的上下文通过当前文件的行号保存。因此上下文切换可以通过C完成。
1.调度内核涉及的文件：
conkiti/core/sys/
arg.c






ctimer.c


etimer.h







pt-sem.h
subprocess.h

arg.h






ctimer.h


lc-addrlabels.h
pt.h




timer.c

autostart.c
dsc.h





lc-switch.h




process.c

rtimer.c
timer.h

autostart.h
energest.c
lc.h











process.h

rtimer.h

cc.h







energest.h
loader.h







procinit.c
stimer.c

clock.h




etimer.c


log.h










procinit.h
stimer.h
conkiti/core/lib/
crc16.c
ifft.c
makefile

me_tabs.h




ringbuf.c

crc16.h
ifft.h
me.c





nouse








ringbuf.h

gcr.c


list.c
me.h





petsciiconv.c
strncasecmp.c

gcr.h


list.h
me_tabs.c
petsciiconv.h

2.移植需要实现的函数：
voidclock_init(void)

初始化时钟
安装clocktick中断到lpc11u14的cortex-m0内核定时器中断内
目前系统设置的是一个tick1ms
clocktick中断为sec计时而设置，每1000个tick对sec做&#43;&#43;处理
clock_time_tclock_time(void)获取当前时钟tick数
直接返回lpc11u14系统tick数Lpc11u_System_GetTick()
unsignedlongclock_seconds(void)获取当期时钟秒计数
返回clocktick中断内sec&#20540;
voidclock_delay(unsignedintt)delay函数
这个函数会在contiki的dev下面用，目前移植调度内核，因此该函数暂时为空

3.调度内核配置
/*CCconfiguration*/

#defineCC_CONF_REGISTER_ARGS1



































//允许寄存器变量

#defineCC_CONF_FUNCTION_POINTER_ARGS1





















//允许函数指针

#defineCC_CONF_FASTCALL


__attribute__((fastcall))










//支持fastcall，fastcall是在传递参数时通过寄存器完成，而不使用压栈

//#defineCC_CONF_CONST_FUNCTION_BUG

//#defineCC_CONF_UNSIGNED_CHAR_BUGS

//#defineCC_CONF_DOUBLE_HASH

#defineCC_CONF_INLINE


__attribute__((inline))


















//支持inline函数

//#defineCC_CONF_ASSIGN_AGGREGATE

//#defineCC_CONF_NO_VA_ARGS0

#defineCC_BYTE_ALIGNED__attribute__((packed,aligned(1)))
//支持结构体字节对齐
/*Processconfiguration*/

#defineAUTOSTART_ENABLE1
















































//开启process自动启动机制

#definePROCESS_CONF_NO_PROCESS_NAMES0






















//保存processname

按照如上配置和实现，已经在dslpc11u14的板子上调度成功，测试代码如下：实现了一个灯周期性的闪烁，其它三个灯根据输入的数字点亮：
以上
Led_Flashprocess接收event，根据event信息决定点亮那些LED
Uart_PRC1process每1s发一次event到Led_Flashprocess,改变LED0的状态
Uart_PRC2process每20ms读一次串口，根据串口接收到的数据改变LED1~3的状态，只对0~7按键做反应。
Conkiti的调度内核很简单：使用轻量级的proto-threads进程模型，可以在事件驱动内核上提供一种线性的、类&#20284;于线程的编程风&#26684;。
因此Conkiti的上下文保存不会使用到汇编而完全用C语言完成，proto-threads属于抢占式OS模型，需要进程主动释放CPU，进程的上下文通过当前文件的行号保存。因此上下文切换可以通过C完成。
1.调度内核涉及的文件：
conkiti/core/sys/
arg.c






ctimer.c


etimer.h







pt-sem.h
subprocess.h

arg.h






ctimer.h


lc-addrlabels.h
pt.h




timer.c

autostart.c
dsc.h





lc-switch.h




process.c

rtimer.c
timer.h

autostart.h
energest.c
lc.h











process.h

rtimer.h

cc.h







energest.h
loader.h







procinit.c
stimer.c

clock.h




etimer.c


log.h










procinit.h
stimer.h
conkiti/core/lib/
crc16.c
ifft.c
makefile

me_tabs.h




ringbuf.c

crc16.h
ifft.h
me.c





nouse








ringbuf.h

gcr.c


list.c
me.h





petsciiconv.c
strncasecmp.c

gcr.h


list.h
me_tabs.c
petsciiconv.h

2.移植需要实现的函数：
voidclock_init(void)

初始化时钟
安装clocktick中断到lpc11u14的cortex-m0内核定时器中断内
目前系统设置的是一个tick1ms
clocktick中断为sec计时而设置，每1000个tick对sec做&#43;&#43;处理
clock_time_tclock_time(void)获取当前时钟tick数
直接返回lpc11u14系统tick数Lpc11u_System_GetTick()
unsignedlongclock_seconds(void)获取当期时钟秒计数
返回clocktick中断内sec&#20540;
voidclock_delay(unsignedintt)delay函数
这个函数会在contiki的dev下面用，目前移植调度内核，因此该函数暂时为空

3.调度内核配置
/*CCconfiguration*/

#defineCC_CONF_REGISTER_ARGS1



































//允许寄存器变量

#defineCC_CONF_FUNCTION_POINTER_ARGS1





















//允许函数指针

#defineCC_CONF_FASTCALL


__attribute__((fastcall))










//支持fastcall，fastcall是在传递参数时通过寄存器完成，而不使用压栈

//#defineCC_CONF_CONST_FUNCTION_BUG

//#defineCC_CONF_UNSIGNED_CHAR_BUGS

//#defineCC_CONF_DOUBLE_HASH

#defineCC_CONF_INLINE


__attribute__((inline))


















//支持inline函数

//#defineCC_CONF_ASSIGN_AGGREGATE

//#defineCC_CONF_NO_VA_ARGS0

#defineCC_BYTE_ALIGNED__attribute__((packed,aligned(1)))
//支持结构体字节对齐
/*Processconfiguration*/

#defineAUTOSTART_ENABLE1
















































//开启process自动启动机制

#definePROCESS_CONF_NO_PROCESS_NAMES0






















//保存processname

按照如上配置和实现，已经在dslpc11u14的板子上调度成功，测试代码如下：实现了一个灯周期性的闪烁，其它三个灯根据输入的数字点亮：
以上
Led_Flashprocess接收event，根据event信息决定点亮那些LED
Uart_PRC1process每1s发一次event到Led_Flashprocess,改变LED0的状态
Uart_PRC2process每20ms读一次串口，根据串口接收到的数据改变LED1~3的状态，只对0~7按键做反应。
Conkiti的调度内核很简单：使用轻量级的proto-threads进程模型，可以在事件驱动内核上提供一种线性的、类&#20284;于线程的编程风&#26684;。
因此Conkiti的上下文保存不会使用到汇编而完全用C语言完成，proto-threads属于抢占式OS模型，需要进程主动释放CPU，进程的上下文通过当前文件的行号保存。因此上下文切换可以通过C完成。
1.调度内核涉及的文件：
conkiti/core/sys/
arg.c






ctimer.c


etimer.h







pt-sem.h
subprocess.h

arg.h






ctimer.h


lc-addrlabels.h
pt.h




timer.c

autostart.c
dsc.h





lc-switch.h




process.c

rtimer.c
timer.h

autostart.h
energest.c
lc.h











process.h

rtimer.h

cc.h







energest.h
loader.h







procinit.c
stimer.c

clock.h




etimer.c


log.h










procinit.h
stimer.h
conkiti/core/lib/
crc16.c
ifft.c
makefile

me_tabs.h




ringbuf.c

crc16.h
ifft.h
me.c





nouse








ringbuf.h

gcr.c


list.c
me.h





petsciiconv.c
strncasecmp.c

gcr.h


list.h
me_tabs.c
petsciiconv.h

2.移植需要实现的函数：
voidclock_init(void)

初始化时钟
安装clocktick中断到lpc11u14的cortex-m0内核定时器中断内
目前系统设置的是一个tick1ms
clocktick中断为sec计时而设置，每1000个tick对sec做&#43;&#43;处理
clock_time_tclock_time(void)获取当前时钟tick数
直接返回lpc11u14系统tick数Lpc11u_System_GetTick()
unsignedlongclock_seconds(void)获取当期时钟秒计数
返回clocktick中断内sec&#20540;
voidclock_delay(unsignedintt)delay函数
这个函数会在contiki的dev下面用，目前移植调度内核，因此该函数暂时为空

3.调度内核配置
/*CCconfiguration*/

#defineCC_CONF_REGISTER_ARGS1



































//允许寄存器变量

#defineCC_CONF_FUNCTION_POINTER_ARGS1





















//允许函数指针

#defineCC_CONF_FASTCALL


__attribute__((fastcall))










//支持fastcall，fastcall是在传递参数时通过寄存器完成，而不使用压栈

//#defineCC_CONF_CONST_FUNCTION_BUG

//#defineCC_CONF_UNSIGNED_CHAR_BUGS

//#defineCC_CONF_DOUBLE_HASH

#defineCC_CONF_INLINE


__attribute__((inline))


















//支持inline函数

//#defineCC_CONF_ASSIGN_AGGREGATE

//#defineCC_CONF_NO_VA_ARGS0

#defineCC_BYTE_ALIGNED__attribute__((packed,aligned(1)))
//支持结构体字节对齐
/*Processconfiguration*/

#defineAUTOSTART_ENABLE1
















































//开启process自动启动机制

#definePROCESS_CONF_NO_PROCESS_NAMES0






















//保存processname

按照如上配置和实现，已经在dslpc11u14的板子上调度成功，测试代码如下：实现了一个灯周期性的闪烁，其它三个灯根据输入的数字点亮：
以上
Led_Flashprocess接收event，根据event信息决定点亮那些LED
Uart_PRC1process每1s发一次event到Led_Flashprocess,改变LED0的状态
Uart_PRC2process每20ms读一次串口，根据串口接收到的数据改变LED1~3的状态，只对0~7按键做反应。
Conkiti的调度内核很简单：使用轻量级的proto-threads进程模型，可以在事件驱动内核上提供一种线性的、类&#20284;于线程的编程风&#26684;。
因此Conkiti的上下文保存不会使用到汇编而完全用C语言完成，proto-threads属于抢占式OS模型，需要进程主动释放CPU，进程的上下文通过当前文件的行号保存。因此上下文切换可以通过C完成。
1.调度内核涉及的文件：
conkiti/core/sys/
arg.c






ctimer.c


etimer.h







pt-sem.h
subprocess.h

arg.h






ctimer.h


lc-addrlabels.h
pt.h




timer.c

autostart.c
dsc.h





lc-switch.h




process.c

rtimer.c
timer.h

autostart.h
energest.c
lc.h











process.h

rtimer.h

cc.h







energest.h
loader.h







procinit.c
stimer.c

clock.h




etimer.c


log.h










procinit.h
stimer.h
conkiti/core/lib/
crc16.c
ifft.c
makefile

me_tabs.h




ringbuf.c

crc16.h
ifft.h
me.c





nouse








ringbuf.h

gcr.c


list.c
me.h





petsciiconv.c
strncasecmp.c

gcr.h


list.h
me_tabs.c
petsciiconv.h

2.移植需要实现的函数：
voidclock_init(void)

初始化时钟
安装clocktick中断到lpc11u14的cortex-m0内核定时器中断内
目前系统设置的是一个tick1ms
clocktick中断为sec计时而设置，每1000个tick对sec做&#43;&#43;处理
clock_time_tclock_time(void)获取当前时钟tick数
直接返回lpc11u14系统tick数Lpc11u_System_GetTick()
unsignedlongclock_seconds(void)获取当期时钟秒计数
返回clocktick中断内sec&#20540;
voidclock_delay(unsignedintt)delay函数
这个函数会在contiki的dev下面用，目前移植调度内核，因此该函数暂时为空

3.调度内核配置
/*CCconfiguration*/

#defineCC_CONF_REGISTER_ARGS1



































//允许寄存器变量

#defineCC_CONF_FUNCTION_POINTER_ARGS1





















//允许函数指针

#defineCC_CONF_FASTCALL


__attribute__((fastcall))










//支持fastcall，fastcall是在传递参数时通过寄存器完成，而不使用压栈

//#defineCC_CONF_CONST_FUNCTION_BUG

//#defineCC_CONF_UNSIGNED_CHAR_BUGS

//#defineCC_CONF_DOUBLE_HASH

#defineCC_CONF_INLINE


__attribute__((inline))


















//支持inline函数

//#defineCC_CONF_ASSIGN_AGGREGATE

//#defineCC_CONF_NO_VA_ARGS0

#defineCC_BYTE_ALIGNED__attribute__((packed,aligned(1)))
//支持结构体字节对齐
/*Processconfiguration*/

#defineAUTOSTART_ENABLE1
















































//开启process自动启动机制

#definePROCESS_CONF_NO_PROCESS_NAMES0






















//保存processname

按照如上配置和实现，已经在dslpc11u14的板子上调度成功，测试代码如下：实现了一个灯周期性的闪烁，其它三个灯根据输入的数字点亮：
以上
Led_Flashprocess接收event，根据event信息决定点亮那些LED
Uart_PRC1process每1s发一次event到Led_Flashprocess,改变LED0的状态
Uart_PRC2process每20ms读一次串口，根据串口接收到的数据改变LED1~3的状态，只对0~7按键做反应。
