摘要
本文简要介绍了contiki的makefile结构和添加新平台的方法。
正文
1．CPU
a.建立需要支持的cpu目录contiki/cpu/cputype/
b.在../cputype/下放置以下文件：
CPU相关的底层代码和驱动
contiki移植与CPU相关的代码,例如clock.crtimer-arch.c
链接文件
makefile
c.makefile文件解释：
文件名:Makefile.cputype

2.平台
a.建立需要支持的平台目录contiki/platform/plattarget/
b.在../plattarget/下放置以下文件：
平台相关驱动及应用
平台相关配置文件contiki-conf.h等
平台启动程序contiki-main.c完成平台基本工作环境的初始化，具体的用户应用程序在用户应用文件夹中用户自己建立文件并以autostartprocess开始应用程序
makefile
c.makefile文件解释：
文件名:Makefile.plattarget

3.用户应用
a.建立用户应用需要的目录contiki/examples/userapp/
b.在../userapp/下放置以下文件：
用户应用程序文件
makefile
c.makefile文件解释

4.Makefile.include
该文件统领contiki的编译规则
a.以下片段得到TARGET可以找到对应的platform

b．以下获取所在platform的相关信息

总结
1.在contiki内添加一个新的平台及应用可分为以下步骤(以nuc140为CPU和m0rime为platform为例)：
step1:在contiki/cpu/下建立nuc140目录，并在目录下建立Makefile.nuc140和CPU相关的代码
step2:在contiki/platform/下建立m0rime目录，并在目录下建立Makefile.m0rime和platform相关的代码
step3:在contiki/examples/下建立应用目录m0rime-app，并在目录下建立Makefile和Makefile.target，和应用相关的代码
2.Makefile的包含和依赖关系
m0rime-app：
Makefile.target指定TARGET
Makefile引用Makefile.include
contiki目录下有Makefile.include
Makefile引用Makefile.target的TARGET,找到Makefile.m0rime并应用Makefile.m0rime
m0rime:
m0rime直接指定引用Makefile.nuc140
nuc140：
Makefile.nuc140内指定编译器，编译链接选项，依靠生成规则

摘要
本文简要介绍了contiki的makefile结构和添加新平台的方法。
正文
1．CPU
a.建立需要支持的cpu目录contiki/cpu/cputype/
b.在../cputype/下放置以下文件：
CPU相关的底层代码和驱动
contiki移植与CPU相关的代码,例如clock.crtimer-arch.c
链接文件
makefile
c.makefile文件解释：
文件名:Makefile.cputype

2.平台
a.建立需要支持的平台目录contiki/platform/plattarget/
b.在../plattarget/下放置以下文件：
平台相关驱动及应用
平台相关配置文件contiki-conf.h等
平台启动程序contiki-main.c完成平台基本工作环境的初始化，具体的用户应用程序在用户应用文件夹中用户自己建立文件并以autostartprocess开始应用程序
makefile
c.makefile文件解释：
文件名:Makefile.plattarget

3.用户应用
a.建立用户应用需要的目录contiki/examples/userapp/
b.在../userapp/下放置以下文件：
用户应用程序文件
makefile
c.makefile文件解释

4.Makefile.include
该文件统领contiki的编译规则
a.以下片段得到TARGET可以找到对应的platform

b．以下获取所在platform的相关信息

总结
1.在contiki内添加一个新的平台及应用可分为以下步骤(以nuc140为CPU和m0rime为platform为例)：
step1:在contiki/cpu/下建立nuc140目录，并在目录下建立Makefile.nuc140和CPU相关的代码
step2:在contiki/platform/下建立m0rime目录，并在目录下建立Makefile.m0rime和platform相关的代码
step3:在contiki/examples/下建立应用目录m0rime-app，并在目录下建立Makefile和Makefile.target，和应用相关的代码
2.Makefile的包含和依赖关系
m0rime-app：
Makefile.target指定TARGET
Makefile引用Makefile.include
contiki目录下有Makefile.include
Makefile引用Makefile.target的TARGET,找到Makefile.m0rime并应用Makefile.m0rime
m0rime:
m0rime直接指定引用Makefile.nuc140
nuc140：
Makefile.nuc140内指定编译器，编译链接选项，依靠生成规则

摘要
本文简要介绍了contiki的makefile结构和添加新平台的方法。
正文
1．CPU
a.建立需要支持的cpu目录contiki/cpu/cputype/
b.在../cputype/下放置以下文件：
CPU相关的底层代码和驱动
contiki移植与CPU相关的代码,例如clock.crtimer-arch.c
链接文件
makefile
c.makefile文件解释：
文件名:Makefile.cputype

2.平台
a.建立需要支持的平台目录contiki/platform/plattarget/
b.在../plattarget/下放置以下文件：
平台相关驱动及应用
平台相关配置文件contiki-conf.h等
平台启动程序contiki-main.c完成平台基本工作环境的初始化，具体的用户应用程序在用户应用文件夹中用户自己建立文件并以autostartprocess开始应用程序
makefile
c.makefile文件解释：
文件名:Makefile.plattarget

3.用户应用
a.建立用户应用需要的目录contiki/examples/userapp/
b.在../userapp/下放置以下文件：
用户应用程序文件
makefile
c.makefile文件解释

4.Makefile.include
该文件统领contiki的编译规则
a.以下片段得到TARGET可以找到对应的platform

b．以下获取所在platform的相关信息

总结
1.在contiki内添加一个新的平台及应用可分为以下步骤(以nuc140为CPU和m0rime为platform为例)：
step1:在contiki/cpu/下建立nuc140目录，并在目录下建立Makefile.nuc140和CPU相关的代码
step2:在contiki/platform/下建立m0rime目录，并在目录下建立Makefile.m0rime和platform相关的代码
step3:在contiki/examples/下建立应用目录m0rime-app，并在目录下建立Makefile和Makefile.target，和应用相关的代码
2.Makefile的包含和依赖关系
m0rime-app：
Makefile.target指定TARGET
Makefile引用Makefile.include
contiki目录下有Makefile.include
Makefile引用Makefile.target的TARGET,找到Makefile.m0rime并应用Makefile.m0rime
m0rime:
m0rime直接指定引用Makefile.nuc140
nuc140：
Makefile.nuc140内指定编译器，编译链接选项，依靠生成规则

摘要
本文简要介绍了contiki的makefile结构和添加新平台的方法。
正文
1．CPU
a.建立需要支持的cpu目录contiki/cpu/cputype/
b.在../cputype/下放置以下文件：
CPU相关的底层代码和驱动
contiki移植与CPU相关的代码,例如clock.crtimer-arch.c
链接文件
makefile
c.makefile文件解释：
文件名:Makefile.cputype

2.平台
a.建立需要支持的平台目录contiki/platform/plattarget/
b.在../plattarget/下放置以下文件：
平台相关驱动及应用
平台相关配置文件contiki-conf.h等
平台启动程序contiki-main.c完成平台基本工作环境的初始化，具体的用户应用程序在用户应用文件夹中用户自己建立文件并以autostartprocess开始应用程序
makefile
c.makefile文件解释：
文件名:Makefile.plattarget

3.用户应用
a.建立用户应用需要的目录contiki/examples/userapp/
b.在../userapp/下放置以下文件：
用户应用程序文件
makefile
c.makefile文件解释

4.Makefile.include
该文件统领contiki的编译规则
a.以下片段得到TARGET可以找到对应的platform

b．以下获取所在platform的相关信息

总结
1.在contiki内添加一个新的平台及应用可分为以下步骤(以nuc140为CPU和m0rime为platform为例)：
step1:在contiki/cpu/下建立nuc140目录，并在目录下建立Makefile.nuc140和CPU相关的代码
step2:在contiki/platform/下建立m0rime目录，并在目录下建立Makefile.m0rime和platform相关的代码
step3:在contiki/examples/下建立应用目录m0rime-app，并在目录下建立Makefile和Makefile.target，和应用相关的代码
2.Makefile的包含和依赖关系
m0rime-app：
Makefile.target指定TARGET
Makefile引用Makefile.include
contiki目录下有Makefile.include
Makefile引用Makefile.target的TARGET,找到Makefile.m0rime并应用Makefile.m0rime
m0rime:
m0rime直接指定引用Makefile.nuc140
nuc140：
Makefile.nuc140内指定编译器，编译链接选项，依靠生成规则

