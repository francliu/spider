awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空&#26684;为默认分隔符将每行切片，切开的部分再进行各种分析处理。
awk有3个不同版本:awk、nawk和gawk，未作特别说明，一般指gawk，gawk是AWK的GNU版本。
awk其名称得自于它的创始人AlfredAho、PeterWeinberger和BrianKernighan姓氏的首个字母。实际上AWK的确拥有自己的语言：AWK程序设计语言，三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。

尽管操作可能会很复杂，但语法总是这样，其中pattern表示AWK在数据中查找的内容，而action是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。pattern就是要表示的正则表达式，用斜杠括起来。
awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来&#26684;式化文本文件中的信息。
通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。

有三种方式调用awk
本章重点介绍命令行方式。

假设last-n5的输出如下
如果只是显示最近登录的5个帐号
awk工作流程是这样的：读入有'\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是&quot;空白键&quot;或&quot;[tab]键&quot;,所以$1表示登录用户，$3表示登录用户ip,以此类推。

如果只是显示/etc/passwd的账户
这种是awk&#43;action的示例，每行都会执行action{print$1}。
-F指定域分隔符为':'。

如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割

如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加&quot;blue,/bin/nosh&quot;。
awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。

搜索/etc/passwd有root关键字的所有行
这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。
搜索支持正则，例如找root开头的:
awk-F:'/^root/'/etc/passwd

搜索/etc/passwd有root关键字的所有行，并显示对应的shell
这里指定了action{print$7}

awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。
此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。

统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:

使用printf替代print,可以让代码更加简洁，易读

awk中同时提供了print和printf两种打印输出的函数。
其中print函数的参数可以是变量、数&#20540;或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空&#26684;而已。
printf函数，其用法和c语言中printf基本相&#20284;,可以&#26684;式化字符串,输出复杂时，printf更加好用，代码更易懂。

变量和赋&#20540;
除了awk的内置变量，awk还可以自定义变量。
下面统计/etc/passwd的账户人数
count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。

这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:

统计某个文件夹下的文件占用的字节数

如果以M为单位显示:
注意，统计不包括文件夹的子目录。

条件语句
awk中的条件语句是从C语言中借鉴来的，见如下声明方式：

统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):

循环语句
awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。

数组
因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。&#20540;和关键字都存储在内部的一张针对key/value应用hash的表&#26684;里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。

显示/etc/passwd的账户
这里使用for循环遍历数组

awk编程的内容极多，这里只罗列简单常用的用法，更多请参考
http://www.gnu.org/software/gawk/manual/gawk.html
awk是一个强大的文本分析工具，相对于grep的查找，sed的编辑，awk在其对数据分析并生成报告时，显得尤为强大。简单来说awk就是把文件逐行的读入，以空&#26684;为默认分隔符将每行切片，切开的部分再进行各种分析处理。
awk有3个不同版本:awk、nawk和gawk，未作特别说明，一般指gawk，gawk是AWK的GNU版本。
awk其名称得自于它的创始人AlfredAho、PeterWeinberger和BrianKernighan姓氏的首个字母。实际上AWK的确拥有自己的语言：AWK程序设计语言，三位创建者已将它正式定义为“样式扫描和处理语言”。它允许您创建简短的程序，这些程序读取输入文件、为数据排序、处理数据、对输入执行计算以及生成报表，还有无数其他的功能。

尽管操作可能会很复杂，但语法总是这样，其中pattern表示AWK在数据中查找的内容，而action是在找到匹配内容时所执行的一系列命令。花括号（{}）不需要在程序中始终出现，但它们用于根据特定的模式对一系列指令进行分组。pattern就是要表示的正则表达式，用斜杠括起来。
awk语言的最基本功能是在文件或者字符串中基于指定规则浏览和抽取信息，awk抽取信息后，才能进行其他文本操作。完整的awk脚本通常用来&#26684;式化文本文件中的信息。
通常，awk是以文件的一行为处理单位的。awk每接收文件的一行，然后执行相应的命令，来处理文本。

有三种方式调用awk
本章重点介绍命令行方式。

假设last-n5的输出如下
如果只是显示最近登录的5个帐号
awk工作流程是这样的：读入有'\n'换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域。默认域分隔符是&quot;空白键&quot;或&quot;[tab]键&quot;,所以$1表示登录用户，$3表示登录用户ip,以此类推。

如果只是显示/etc/passwd的账户
这种是awk&#43;action的示例，每行都会执行action{print$1}。
-F指定域分隔符为':'。

如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以tab键分割

如果只是显示/etc/passwd的账户和账户对应的shell,而账户与shell之间以逗号分割,而且在所有行添加列名name,shell,在最后一行添加&quot;blue,/bin/nosh&quot;。
awk工作流程是这样的：先执行BEGING，然后读取文件，读入有/n换行符分割的一条记录，然后将记录按指定的域分隔符划分域，填充域，$0则表示所有域,$1表示第一个域,$n表示第n个域,随后开始执行模式所对应的动作action。接着开始读入第二条记录······直到所有的记录都读完，最后执行END操作。

搜索/etc/passwd有root关键字的所有行
这种是pattern的使用示例，匹配了pattern(这里是root)的行才会执行action(没有指定action，默认输出每行的内容)。
搜索支持正则，例如找root开头的:
awk-F:'/^root/'/etc/passwd

搜索/etc/passwd有root关键字的所有行，并显示对应的shell
这里指定了action{print$7}

awk有许多内置变量用来设置环境信息，这些变量可以被改变，下面给出了最常用的一些变量。
此外,$0变量是指整条记录。$1表示当前行的第一个域,$2表示当前行的第二个域,......以此类推。

统计/etc/passwd:文件名，每行的行号，每行的列数，对应的完整行内容:

使用printf替代print,可以让代码更加简洁，易读

awk中同时提供了print和printf两种打印输出的函数。
其中print函数的参数可以是变量、数&#20540;或者字符串。字符串必须用双引号引用，参数用逗号分隔。如果没有逗号，参数就串联在一起而无法区分。这里，逗号的作用与输出文件的分隔符的作用是一样的，只是后者是空&#26684;而已。
printf函数，其用法和c语言中printf基本相&#20284;,可以&#26684;式化字符串,输出复杂时，printf更加好用，代码更易懂。

变量和赋&#20540;
除了awk的内置变量，awk还可以自定义变量。
下面统计/etc/passwd的账户人数
count是自定义变量。之前的action{}里都是只有一个print,其实print只是一个语句，而action{}可以有多个语句，以;号隔开。

这里没有初始化count，虽然默认是0，但是妥当的做法还是初始化为0:

统计某个文件夹下的文件占用的字节数

如果以M为单位显示:
注意，统计不包括文件夹的子目录。

条件语句
awk中的条件语句是从C语言中借鉴来的，见如下声明方式：

统计某个文件夹下的文件占用的字节数,过滤4096大小的文件(一般都是文件夹):

循环语句
awk中的循环语句同样借鉴于C语言，支持while、do/while、for、break、continue，这些关键字的语义和C语言中的语义完全相同。

数组
因为awk中数组的下标可以是数字和字母，数组的下标通常被称为关键字(key)。&#20540;和关键字都存储在内部的一张针对key/value应用hash的表&#26684;里。由于hash不是顺序存储，因此在显示数组内容时会发现，它们并不是按照你预料的顺序显示出来的。数组和变量一样，都是在使用时自动创建的，awk也同样会自动判断其存储的是数字还是字符串。一般而言，awk中的数组用来从记录中收集信息，可以用于计算总和、统计单词以及跟踪模板被匹配的次数等等。

显示/etc/passwd的账户
这里使用for循环遍历数组

awk编程的内容极多，这里只罗列简单常用的用法，更多请参考
http://www.gnu.org/software/gawk/manual/gawk.html
