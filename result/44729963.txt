1.ubuntn下mysql.connector模块的安装
sudo-apt-getinstallmysql.connector
2.数据库的连接
config={







'host':'127.0.0.1',#默认127.0.0.1







'user':'root',







'password':'ict',







'port':3306,#默认即为3306







'database':'tianyi',







'charset':'utf8'#默认即为utf8







}




try:





cnn=mysql.connector.connect(**config)





ifcnn:









print'ok'




exceptmysql.connector.Errorase:





print('connectfails!{}'.format(e))
3、插入数据
cursor=cnn.cursor()

try:


'第一种：直接字符串插入方式'


sql_insert1=&quot;insertintostudent(name,age)values('orange',20)&quot;


cursor.execute(sql_insert1)


'第二种：元组连接插入方式'


sql_insert2=&quot;insertintostudent(name,age)values(%s,%s)&quot;


#此处的%s为占位符，而不是&#26684;式化字符串，所以age用%s


data=('shiki',25)


cursor.execute(sql_insert2,data)


'第三种：字典连接插入方式'


sql_insert3=&quot;insertintostudent(name,age)values(%(name)s,%(age)s)&quot;


data={'name':'mumu','age':30}


cursor.execute(sql_insert3,data)


#如果数据库引擎为Innodb，执行完成后需执行cnn.commit()进行事务提交

exceptmysql.connector.Errorase:


print('insertdataserror!{}'.format(e))

finally:


cursor.close()


cnn.close()
同样，MySQLConnector也支持批量插入，同样其使用的也是cursor.executemany，示例如下：
stmt='insertintostudent(name,age)values(%s,%s)'

data=[





('Lucy',21),





('Tom',22),





('Lily',21)]

cursor.executemany(stmt,data)
4、查询操作
cursor=cnn.cursor()

try:


sql_query='selectid,namefromstudentwhere
age&gt;%s'


cursor.execute(sql_query,(21,))


forid,nameincursor:




print('%s&#65340;'sageisolderthan25,andher/hisidis%d'%(name,id))

exceptmysql.connector.Errorase:


print('queryerror!{}'.format(e))

finally:


cursor.close()


cnn.close()
5、删除操作
cursor=cnn.cursor()

try:


sql_delete='deletefromstudentwherename=%(name)sandage&lt;%(age)s'


data={'name':'orange','age':24}


cursor.execute(sql_delete,data)

exceptmysql.connector.Errorase:


print('deleteerror!{}'.format(e))

finally:


cursor.close()


cnn.close()
1.ubuntn下mysql.connector模块的安装
sudo-apt-getinstallmysql.connector
2.数据库的连接
config={







'host':'127.0.0.1',#默认127.0.0.1







'user':'root',







'password':'ict',







'port':3306,#默认即为3306







'database':'tianyi',







'charset':'utf8'#默认即为utf8







}




try:





cnn=mysql.connector.connect(**config)





ifcnn:









print'ok'




exceptmysql.connector.Errorase:





print('connectfails!{}'.format(e))
3、插入数据
cursor=cnn.cursor()

try:


'第一种：直接字符串插入方式'


sql_insert1=&quot;insertintostudent(name,age)values('orange',20)&quot;


cursor.execute(sql_insert1)


'第二种：元组连接插入方式'


sql_insert2=&quot;insertintostudent(name,age)values(%s,%s)&quot;


#此处的%s为占位符，而不是&#26684;式化字符串，所以age用%s


data=('shiki',25)


cursor.execute(sql_insert2,data)


'第三种：字典连接插入方式'


sql_insert3=&quot;insertintostudent(name,age)values(%(name)s,%(age)s)&quot;


data={'name':'mumu','age':30}


cursor.execute(sql_insert3,data)


#如果数据库引擎为Innodb，执行完成后需执行cnn.commit()进行事务提交

exceptmysql.connector.Errorase:


print('insertdataserror!{}'.format(e))

finally:


cursor.close()


cnn.close()
同样，MySQLConnector也支持批量插入，同样其使用的也是cursor.executemany，示例如下：
stmt='insertintostudent(name,age)values(%s,%s)'

data=[





('Lucy',21),





('Tom',22),





('Lily',21)]

cursor.executemany(stmt,data)
4、查询操作
cursor=cnn.cursor()

try:


sql_query='selectid,namefromstudentwhere
age&gt;%s'


cursor.execute(sql_query,(21,))


forid,nameincursor:




print('%s&#65340;'sageisolderthan25,andher/hisidis%d'%(name,id))

exceptmysql.connector.Errorase:


print('queryerror!{}'.format(e))

finally:


cursor.close()


cnn.close()
5、删除操作
cursor=cnn.cursor()

try:


sql_delete='deletefromstudentwherename=%(name)sandage&lt;%(age)s'


data={'name':'orange','age':24}


cursor.execute(sql_delete,data)

exceptmysql.connector.Errorase:


print('deleteerror!{}'.format(e))

finally:


cursor.close()


cnn.close()
