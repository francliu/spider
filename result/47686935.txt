AC自动机简介：
首先简要介绍一下AC自动机：Aho-Corasickautomation，该算法在1975年产生于贝尔实验室，是著名的多模匹配算法之一。一个常见的例子就是给出n个单词，再给出一段包含m个字符的文章，让你找出有多少个单词在文章里出现过。要搞懂AC自动机，先得有字典树Trie和KMP模式匹配算法的基础知识。KMP算法是单模式串的字符匹配算法，AC自动机是多模式串的字符匹配算法。
AC自动机的构造：
1.构造一棵Trie，作为AC自动机的搜索数据结构。
2.构造fail指针，使当前字符失配时跳转到具有最长公共前后缀的字符继续匹配。如同KMP算法一样，AC自动机在匹配时如果当前字符匹配失败，那么利用fail指针进行跳转。由此可知如果跳转，跳转后的串的前缀，必为跳转前的模式串的后缀并且跳转的新位置的深度（匹配字符个数）一定小于跳之前的节点。所以我们可以利用bfs在Trie上面进行fail指针的求解。
3.扫描主串进行匹配。
AC自动机详讲：
我们给出5个单词，say，she，shr，he，her。给定字符串为yasherhs。问多少个单词在字符串中出现过。
一、Trie
首先我们需要建立一棵Trie。但是这棵Trie不是普通的Trie，而是带有一些特殊的性质。
首先会有3个重要的指针，分别为p,p-&gt;fail,temp。
1.指针p，指向当前匹配的字符。若p指向root，表示当前匹配的字符序列为空。（root是Trie入口，没有实际含义）。
2.指针p-&gt;fail，p的失败指针，指向与字符p相同的结点，若没有，则指向root。
3.指针temp，测试指针（自己命名的，容易理解！~），在建立fail指针时有寻找与p字符匹配的结点的作用，在扫描时作用最大，也最不好理解。



三、扫描
构造好Trie和失败指针后，我们就可以对主串进行扫描了。这个过程和KMP算法很类&#20284;，但是也有一定的区别，主要是因为AC自动机处理的是多串模式，需要防止遗漏某个单词，所以引入temp指针。
匹配过程分两种情况：(1)当前字符匹配，表示从当前节点沿着树边有一条路径可以到达目标字符，此时只需沿该路径走向下一个节点继续匹配即可，目标字符串指针移向下个字符继续匹配；(2)当前字符不匹配，则去当前节点失败指针所指向的字符继续匹配，匹配过程随着指针指向root结束。重复这2个过程中的任意一个，直到模式串走到结尾为止。
对照上图，看一下模式匹配这个详细的流程，其中模式串为yasherhs。对于i=0,1。Trie中没有对应的路径，故不做任何操作；i=2,3,4时，指针p走到左下节点e。因为节点e的count信息为1，所以cnt&#43;1，并且讲节点e的count&#20540;设置为-1，表示改单词已经出现过了，防止重复计数，最后temp指向e节点的失败指针所指向的节点继续查找，以此类推，最后temp指向root，退出while循环，这个过程中count增加了2。表示找到了2个单词she和he。当i=5时，程序进入第5行，p指向其失败指针的节点，也就是右边那个e节点，随后在第6行指向r节点，r节点的count&#20540;为1，从而count&#43;1，循环直到temp指向root为止。最后i=6,7时，找不到任何匹配，匹配过程结束。

到此，AC自动机入门知识就讲完了。HDU2222入门题必须果断A掉，反正我是参考别人代码敲的。。。
AC自动机貌&#20284;还有很多需要优化的地方，等把基础搞定之后再学习一下怎么优化吧。。
AC自动机简介：
首先简要介绍一下AC自动机：Aho-Corasickautomation，该算法在1975年产生于贝尔实验室，是著名的多模匹配算法之一。一个常见的例子就是给出n个单词，再给出一段包含m个字符的文章，让你找出有多少个单词在文章里出现过。要搞懂AC自动机，先得有字典树Trie和KMP模式匹配算法的基础知识。KMP算法是单模式串的字符匹配算法，AC自动机是多模式串的字符匹配算法。
AC自动机的构造：
1.构造一棵Trie，作为AC自动机的搜索数据结构。
2.构造fail指针，使当前字符失配时跳转到具有最长公共前后缀的字符继续匹配。如同KMP算法一样，AC自动机在匹配时如果当前字符匹配失败，那么利用fail指针进行跳转。由此可知如果跳转，跳转后的串的前缀，必为跳转前的模式串的后缀并且跳转的新位置的深度（匹配字符个数）一定小于跳之前的节点。所以我们可以利用bfs在Trie上面进行fail指针的求解。
3.扫描主串进行匹配。
AC自动机详讲：
我们给出5个单词，say，she，shr，he，her。给定字符串为yasherhs。问多少个单词在字符串中出现过。
一、Trie
首先我们需要建立一棵Trie。但是这棵Trie不是普通的Trie，而是带有一些特殊的性质。
首先会有3个重要的指针，分别为p,p-&gt;fail,temp。
1.指针p，指向当前匹配的字符。若p指向root，表示当前匹配的字符序列为空。（root是Trie入口，没有实际含义）。
2.指针p-&gt;fail，p的失败指针，指向与字符p相同的结点，若没有，则指向root。
3.指针temp，测试指针（自己命名的，容易理解！~），在建立fail指针时有寻找与p字符匹配的结点的作用，在扫描时作用最大，也最不好理解。



三、扫描
构造好Trie和失败指针后，我们就可以对主串进行扫描了。这个过程和KMP算法很类&#20284;，但是也有一定的区别，主要是因为AC自动机处理的是多串模式，需要防止遗漏某个单词，所以引入temp指针。
匹配过程分两种情况：(1)当前字符匹配，表示从当前节点沿着树边有一条路径可以到达目标字符，此时只需沿该路径走向下一个节点继续匹配即可，目标字符串指针移向下个字符继续匹配；(2)当前字符不匹配，则去当前节点失败指针所指向的字符继续匹配，匹配过程随着指针指向root结束。重复这2个过程中的任意一个，直到模式串走到结尾为止。
对照上图，看一下模式匹配这个详细的流程，其中模式串为yasherhs。对于i=0,1。Trie中没有对应的路径，故不做任何操作；i=2,3,4时，指针p走到左下节点e。因为节点e的count信息为1，所以cnt&#43;1，并且讲节点e的count&#20540;设置为-1，表示改单词已经出现过了，防止重复计数，最后temp指向e节点的失败指针所指向的节点继续查找，以此类推，最后temp指向root，退出while循环，这个过程中count增加了2。表示找到了2个单词she和he。当i=5时，程序进入第5行，p指向其失败指针的节点，也就是右边那个e节点，随后在第6行指向r节点，r节点的count&#20540;为1，从而count&#43;1，循环直到temp指向root为止。最后i=6,7时，找不到任何匹配，匹配过程结束。

到此，AC自动机入门知识就讲完了。HDU2222入门题必须果断A掉，反正我是参考别人代码敲的。。。
AC自动机貌&#20284;还有很多需要优化的地方，等把基础搞定之后再学习一下怎么优化吧。。
AC自动机简介：
首先简要介绍一下AC自动机：Aho-Corasickautomation，该算法在1975年产生于贝尔实验室，是著名的多模匹配算法之一。一个常见的例子就是给出n个单词，再给出一段包含m个字符的文章，让你找出有多少个单词在文章里出现过。要搞懂AC自动机，先得有字典树Trie和KMP模式匹配算法的基础知识。KMP算法是单模式串的字符匹配算法，AC自动机是多模式串的字符匹配算法。
AC自动机的构造：
1.构造一棵Trie，作为AC自动机的搜索数据结构。
2.构造fail指针，使当前字符失配时跳转到具有最长公共前后缀的字符继续匹配。如同KMP算法一样，AC自动机在匹配时如果当前字符匹配失败，那么利用fail指针进行跳转。由此可知如果跳转，跳转后的串的前缀，必为跳转前的模式串的后缀并且跳转的新位置的深度（匹配字符个数）一定小于跳之前的节点。所以我们可以利用bfs在Trie上面进行fail指针的求解。
3.扫描主串进行匹配。
AC自动机详讲：
我们给出5个单词，say，she，shr，he，her。给定字符串为yasherhs。问多少个单词在字符串中出现过。
一、Trie
首先我们需要建立一棵Trie。但是这棵Trie不是普通的Trie，而是带有一些特殊的性质。
首先会有3个重要的指针，分别为p,p-&gt;fail,temp。
1.指针p，指向当前匹配的字符。若p指向root，表示当前匹配的字符序列为空。（root是Trie入口，没有实际含义）。
2.指针p-&gt;fail，p的失败指针，指向与字符p相同的结点，若没有，则指向root。
3.指针temp，测试指针（自己命名的，容易理解！~），在建立fail指针时有寻找与p字符匹配的结点的作用，在扫描时作用最大，也最不好理解。



三、扫描
构造好Trie和失败指针后，我们就可以对主串进行扫描了。这个过程和KMP算法很类&#20284;，但是也有一定的区别，主要是因为AC自动机处理的是多串模式，需要防止遗漏某个单词，所以引入temp指针。
匹配过程分两种情况：(1)当前字符匹配，表示从当前节点沿着树边有一条路径可以到达目标字符，此时只需沿该路径走向下一个节点继续匹配即可，目标字符串指针移向下个字符继续匹配；(2)当前字符不匹配，则去当前节点失败指针所指向的字符继续匹配，匹配过程随着指针指向root结束。重复这2个过程中的任意一个，直到模式串走到结尾为止。
对照上图，看一下模式匹配这个详细的流程，其中模式串为yasherhs。对于i=0,1。Trie中没有对应的路径，故不做任何操作；i=2,3,4时，指针p走到左下节点e。因为节点e的count信息为1，所以cnt&#43;1，并且讲节点e的count&#20540;设置为-1，表示改单词已经出现过了，防止重复计数，最后temp指向e节点的失败指针所指向的节点继续查找，以此类推，最后temp指向root，退出while循环，这个过程中count增加了2。表示找到了2个单词she和he。当i=5时，程序进入第5行，p指向其失败指针的节点，也就是右边那个e节点，随后在第6行指向r节点，r节点的count&#20540;为1，从而count&#43;1，循环直到temp指向root为止。最后i=6,7时，找不到任何匹配，匹配过程结束。

到此，AC自动机入门知识就讲完了。HDU2222入门题必须果断A掉，反正我是参考别人代码敲的。。。
AC自动机貌&#20284;还有很多需要优化的地方，等把基础搞定之后再学习一下怎么优化吧。。
AC自动机简介：
首先简要介绍一下AC自动机：Aho-Corasickautomation，该算法在1975年产生于贝尔实验室，是著名的多模匹配算法之一。一个常见的例子就是给出n个单词，再给出一段包含m个字符的文章，让你找出有多少个单词在文章里出现过。要搞懂AC自动机，先得有字典树Trie和KMP模式匹配算法的基础知识。KMP算法是单模式串的字符匹配算法，AC自动机是多模式串的字符匹配算法。
AC自动机的构造：
1.构造一棵Trie，作为AC自动机的搜索数据结构。
2.构造fail指针，使当前字符失配时跳转到具有最长公共前后缀的字符继续匹配。如同KMP算法一样，AC自动机在匹配时如果当前字符匹配失败，那么利用fail指针进行跳转。由此可知如果跳转，跳转后的串的前缀，必为跳转前的模式串的后缀并且跳转的新位置的深度（匹配字符个数）一定小于跳之前的节点。所以我们可以利用bfs在Trie上面进行fail指针的求解。
3.扫描主串进行匹配。
AC自动机详讲：
我们给出5个单词，say，she，shr，he，her。给定字符串为yasherhs。问多少个单词在字符串中出现过。
一、Trie
首先我们需要建立一棵Trie。但是这棵Trie不是普通的Trie，而是带有一些特殊的性质。
首先会有3个重要的指针，分别为p,p-&gt;fail,temp。
1.指针p，指向当前匹配的字符。若p指向root，表示当前匹配的字符序列为空。（root是Trie入口，没有实际含义）。
2.指针p-&gt;fail，p的失败指针，指向与字符p相同的结点，若没有，则指向root。
3.指针temp，测试指针（自己命名的，容易理解！~），在建立fail指针时有寻找与p字符匹配的结点的作用，在扫描时作用最大，也最不好理解。



三、扫描
构造好Trie和失败指针后，我们就可以对主串进行扫描了。这个过程和KMP算法很类&#20284;，但是也有一定的区别，主要是因为AC自动机处理的是多串模式，需要防止遗漏某个单词，所以引入temp指针。
匹配过程分两种情况：(1)当前字符匹配，表示从当前节点沿着树边有一条路径可以到达目标字符，此时只需沿该路径走向下一个节点继续匹配即可，目标字符串指针移向下个字符继续匹配；(2)当前字符不匹配，则去当前节点失败指针所指向的字符继续匹配，匹配过程随着指针指向root结束。重复这2个过程中的任意一个，直到模式串走到结尾为止。
对照上图，看一下模式匹配这个详细的流程，其中模式串为yasherhs。对于i=0,1。Trie中没有对应的路径，故不做任何操作；i=2,3,4时，指针p走到左下节点e。因为节点e的count信息为1，所以cnt&#43;1，并且讲节点e的count&#20540;设置为-1，表示改单词已经出现过了，防止重复计数，最后temp指向e节点的失败指针所指向的节点继续查找，以此类推，最后temp指向root，退出while循环，这个过程中count增加了2。表示找到了2个单词she和he。当i=5时，程序进入第5行，p指向其失败指针的节点，也就是右边那个e节点，随后在第6行指向r节点，r节点的count&#20540;为1，从而count&#43;1，循环直到temp指向root为止。最后i=6,7时，找不到任何匹配，匹配过程结束。

到此，AC自动机入门知识就讲完了。HDU2222入门题必须果断A掉，反正我是参考别人代码敲的。。。
AC自动机貌&#20284;还有很多需要优化的地方，等把基础搞定之后再学习一下怎么优化吧。。
