TCL提供了C语言的调用接口，可以很容易地嵌入到C程序中；由于TCL提供了与C的接口函数，所以可以在C编写的应用中调用TCL的库函数，执行TCL的命令或脚本。具体的工作有：




①创建TCL的解释器;







②执行TCL的命令或脚本;




③对返回代码进行处理;




④撤消TCL的解释器。
一、test.c代码
#include&lt;tcl.h&gt;

#include&lt;stdio.h&gt;

#include&lt;stdlib.h&gt;

#include&lt;string.h&gt;

#include&lt;math.h&gt;

Tcl_Interp*interp;

int

PowObjCmd(ClientDataclientData,Tcl_Interp*interp,










intobjc,Tcl_Obj*CONSTobjv[])

{







Tcl_Obj
*resultptr;







double


x,y,result;







int





error;








if(objc!=3){










Tcl_WrongNumArgs(interp,2,objv,



























&quot;Usage:powxy&quot;);










returnTCL_ERROR;







}







error=Tcl_GetDoubleFromObj(interp,objv[1],&amp;x);







if(error!=TCL_OK)returnerror;







error=Tcl_GetDoubleFromObj(interp,objv[2],&amp;y);







if(error!=TCL_OK)returnerror;








result=pow(x,y);







resultptr=Tcl_GetObjResult(interp);







Tcl_SetDoubleObj(resultptr,result);







returnTCL_OK;

}

int

Example_Init(){







interp=Tcl_CreateInterp();







if(interp==NULL)







{











return1;







}







Tcl_CreateObjCommand(interp,&quot;pow&quot;,PowObjCmd,














(ClientData)NULL,(Tcl_CmdDeleteProc*)NULL);







returnTCL_OK;

}

intmain()

{




intret;




Example_Init();




ret=Tcl_EvalFile(interp,&quot;test.tcl&quot;);




if(ret==TCL_ERROR)




{








printf(&quot;Tclscripterror:%s&quot;,interp-&gt;result);








//DataLog::insertERROR(logdata);




}




printf(&quot;ok%d\n&quot;,ret);




return0;

}


二、makefile
t=libtest

TCL_LIBS=-L/usr/lib/libtcl8.5.so

all:$t

clean:




rm-f$tcore

libtest:test.c




g&#43;&#43;-I.${TCL_LIBS}-o$@test.c-ltcl-ltk-fPIC
三、test.tcl
pow25
TCL提供了C语言的调用接口，可以很容易地嵌入到C程序中；由于TCL提供了与C的接口函数，所以可以在C编写的应用中调用TCL的库函数，执行TCL的命令或脚本。具体的工作有：




①创建TCL的解释器;







②执行TCL的命令或脚本;




③对返回代码进行处理;




④撤消TCL的解释器。
一、test.c代码
#include&lt;tcl.h&gt;

#include&lt;stdio.h&gt;

#include&lt;stdlib.h&gt;

#include&lt;string.h&gt;

#include&lt;math.h&gt;

Tcl_Interp*interp;

int

PowObjCmd(ClientDataclientData,Tcl_Interp*interp,










intobjc,Tcl_Obj*CONSTobjv[])

{







Tcl_Obj
*resultptr;







double


x,y,result;







int





error;








if(objc!=3){










Tcl_WrongNumArgs(interp,2,objv,



























&quot;Usage:powxy&quot;);










returnTCL_ERROR;







}







error=Tcl_GetDoubleFromObj(interp,objv[1],&amp;x);







if(error!=TCL_OK)returnerror;







error=Tcl_GetDoubleFromObj(interp,objv[2],&amp;y);







if(error!=TCL_OK)returnerror;








result=pow(x,y);







resultptr=Tcl_GetObjResult(interp);







Tcl_SetDoubleObj(resultptr,result);







returnTCL_OK;

}

int

Example_Init(){







interp=Tcl_CreateInterp();







if(interp==NULL)







{











return1;







}







Tcl_CreateObjCommand(interp,&quot;pow&quot;,PowObjCmd,














(ClientData)NULL,(Tcl_CmdDeleteProc*)NULL);







returnTCL_OK;

}

intmain()

{




intret;




Example_Init();




ret=Tcl_EvalFile(interp,&quot;test.tcl&quot;);




if(ret==TCL_ERROR)




{








printf(&quot;Tclscripterror:%s&quot;,interp-&gt;result);








//DataLog::insertERROR(logdata);




}




printf(&quot;ok%d\n&quot;,ret);




return0;

}


二、makefile
t=libtest

TCL_LIBS=-L/usr/lib/libtcl8.5.so

all:$t

clean:




rm-f$tcore

libtest:test.c




g&#43;&#43;-I.${TCL_LIBS}-o$@test.c-ltcl-ltk-fPIC
三、test.tcl
pow25
