分类：LINUX
先说明三个概念

登录shell
正常登录程序启动的shell.既登录成功后紧接着给登录用户启动的shell.

非登录交互式shell
这个shell的工作方式是交互式的，等用户输入，然后执行，再等用户输入。显然登录shell就是一个交互式shell。
如下,我们可获得一个交互式非登录shell:
[root@localhost~]#bash

[root@localhost~]#pwd

/root

非交互式shell
为运行一个shell脚本启动的shell.

以FC5的bash为例，跟shell环境配置相关的文件以下几个，

/etc/profile

/etc/profile.d/*.sh

/etc/bashrc

~/.bash_profile

~/.bashrc

有时你会发现定义一个别名，有时好像在任意一个文件里定义都可以起作用，有时好像又不起作用，那是为什么呢？这些配置文件各自互责了什么工作？相互的关系是怎么样的？跟前面介绍的不同种类的shell的关系是如何的呢？下面对每个文件单独进行说明。

/etc/profile
Linux规定，当启动一个登录shell会执行这个脚本.测试过程如下：
把LIST的定义加到/etc/profile文件的未尾并保存.如下:

aliasLIST='ls-l'
把所有其它shell配置文件或目录改名，这样系统就找不到那些shell脚本了，不会执行，重而避免其它配置文件的干扰。如下：

[root@localhost~]#mkdir/etc/profile.bak

[root@localhost~]#mv/etc/profile.d/*-t/etc/profile.bak/

[root@localhost~]#mv/etc/bashrc/etc/bashrc.bak

[root@localhost~]#mv~/.bash_profile~/.bash_profile.bak

[root@localhost~]#mv~/.bashrc~/.bashrc.bak
交互式shell，并测试过程如下：
[root@localhost~]#bash

bash-3.1#LIST

bash:LIST:commandnotfound

bash-3.1#exit

exit

[root@localhost~]#
显然启动一个普通交互式shell的时候,shell配置文件/etc/profile不起作用
非交互式shell,测试过程如下：
为了验证先写一个测试脚本，如下：
#!/bin/bash

LIST
把这个脚本保存为t.sh并加下可执行权限:

[root@localhost~]#chmodaxt.sh

[root@localhost~]#./t.sh








./t.sh:line2:LIST:commandnotfound

[root@localhost~]#

显然启动一个非交互式shell时，shell配置文件/etc/profile不起作用
登录shell，并测试过程如下：

Lastlogin:WedNov1910:22:232008from192.168.0.97

-bash-3.1#LIST

total160

drwxr-xr-x
2rootroot
4096Aug1412:24Desktop

-rw-r--r--
1rootroot
3211Nov
610:15Session.vim

drwxr-xr-x
2rootroot
4096Nov1010:58a

-rw-r--r--
1rootroot

126Nov1212:42a.txt

-rw-r--r--
1rootroot

261Nov
615:23a.zip

-rw-r--r--
1rootroot

157Nov
615:23aa.zip

-rw-------
1rootroot
1054Aug1411:59anaconda-ks.cfg

-rw-r--r--
1rootroot

691Nov1810:09b.txt

-rw-r--r--
1rootroot31671Aug1411:58install.log

-rw-r--r--
1rootroot
4155Aug1411:50install.log.syslog

-rw-------
1rootroot20310Nov1713:51mbox

drwxr-xr-x
2rootroot
4096Nov1717:22shell

-rwxrwxrwx
1rootroot


65Nov1910:11t.sh

drwxr-xr-x14rootroot
4096Nov
515:34test

-bash-3.1#

显然启动一个登录shell时，shell配置文件/etc/profile会起作用

~/.bash_profile
这个文件跟/etc/profile起作用的时机是一样的，都是只在启动一个登录shell的时候才会被source，跟/etc/profile不同的是，这里的配置只影响单个用户，不对其它用户产生影响。

/etc/bashrc与~/.bashrc

从字面上我们可以理解这两个文件应该跟根bash相关，即只要你启动了一个bash类型的shell这两文件的配置就将发生作用。如果你的shell是sh、csh或是ksh这两个文件将不起作用。按前面的介绍，可能很会猜测/etc/bashrc与~/.bashrc的关系跟/etc/profile与~/.bash_profile的关系一样，一个是全局的，一个是针对单个用户的。从结果上看确实是这样的，但实现过程却是不一样的。启动一个bash时直接source~/.bashrc,而这~/.bashrc里面会source/etc/bashrc。

/etc/profile.d/*.sh
在fc5下这里的脚本会在/etc/profile里或是~/.bashrc里同时source,所以这里的设置都是一些不同分类的全局环境设置。


总结在FC5下一个登录bash的环境初始全过程是：
/etc/profile




|




--/etc/profile.d/*

~/.bash_profile




|





--~/.bashrc













|













--/etc/bashrc

















|

















--/etc/profile.d/*
一个普通交互式bash的初始全过程是:

~/.bashrc




|




--/etc/bashrc







|







--/etc/profile.d/*
对于非交互式bash的初始全过程是:


不重新source任何新的shell脚本，只继承当前shell的设置.
分类：LINUX
先说明三个概念

登录shell
正常登录程序启动的shell.既登录成功后紧接着给登录用户启动的shell.

非登录交互式shell
这个shell的工作方式是交互式的，等用户输入，然后执行，再等用户输入。显然登录shell就是一个交互式shell。
如下,我们可获得一个交互式非登录shell:
[root@localhost~]#bash

[root@localhost~]#pwd

/root

非交互式shell
为运行一个shell脚本启动的shell.

以FC5的bash为例，跟shell环境配置相关的文件以下几个，

/etc/profile

/etc/profile.d/*.sh

/etc/bashrc

~/.bash_profile

~/.bashrc

有时你会发现定义一个别名，有时好像在任意一个文件里定义都可以起作用，有时好像又不起作用，那是为什么呢？这些配置文件各自互责了什么工作？相互的关系是怎么样的？跟前面介绍的不同种类的shell的关系是如何的呢？下面对每个文件单独进行说明。

/etc/profile
Linux规定，当启动一个登录shell会执行这个脚本.测试过程如下：
把LIST的定义加到/etc/profile文件的未尾并保存.如下:

aliasLIST='ls-l'
把所有其它shell配置文件或目录改名，这样系统就找不到那些shell脚本了，不会执行，重而避免其它配置文件的干扰。如下：

[root@localhost~]#mkdir/etc/profile.bak

[root@localhost~]#mv/etc/profile.d/*-t/etc/profile.bak/

[root@localhost~]#mv/etc/bashrc/etc/bashrc.bak

[root@localhost~]#mv~/.bash_profile~/.bash_profile.bak

[root@localhost~]#mv~/.bashrc~/.bashrc.bak
交互式shell，并测试过程如下：
[root@localhost~]#bash

bash-3.1#LIST

bash:LIST:commandnotfound

bash-3.1#exit

exit

[root@localhost~]#
显然启动一个普通交互式shell的时候,shell配置文件/etc/profile不起作用
非交互式shell,测试过程如下：
为了验证先写一个测试脚本，如下：
#!/bin/bash

LIST
把这个脚本保存为t.sh并加下可执行权限:

[root@localhost~]#chmodaxt.sh

[root@localhost~]#./t.sh








./t.sh:line2:LIST:commandnotfound

[root@localhost~]#

显然启动一个非交互式shell时，shell配置文件/etc/profile不起作用
登录shell，并测试过程如下：

Lastlogin:WedNov1910:22:232008from192.168.0.97

-bash-3.1#LIST

total160

drwxr-xr-x
2rootroot
4096Aug1412:24Desktop

-rw-r--r--
1rootroot
3211Nov
610:15Session.vim

drwxr-xr-x
2rootroot
4096Nov1010:58a

-rw-r--r--
1rootroot

126Nov1212:42a.txt

-rw-r--r--
1rootroot

261Nov
615:23a.zip

-rw-r--r--
1rootroot

157Nov
615:23aa.zip

-rw-------
1rootroot
1054Aug1411:59anaconda-ks.cfg

-rw-r--r--
1rootroot

691Nov1810:09b.txt

-rw-r--r--
1rootroot31671Aug1411:58install.log

-rw-r--r--
1rootroot
4155Aug1411:50install.log.syslog

-rw-------
1rootroot20310Nov1713:51mbox

drwxr-xr-x
2rootroot
4096Nov1717:22shell

-rwxrwxrwx
1rootroot


65Nov1910:11t.sh

drwxr-xr-x14rootroot
4096Nov
515:34test

-bash-3.1#

显然启动一个登录shell时，shell配置文件/etc/profile会起作用

~/.bash_profile
这个文件跟/etc/profile起作用的时机是一样的，都是只在启动一个登录shell的时候才会被source，跟/etc/profile不同的是，这里的配置只影响单个用户，不对其它用户产生影响。

/etc/bashrc与~/.bashrc

从字面上我们可以理解这两个文件应该跟根bash相关，即只要你启动了一个bash类型的shell这两文件的配置就将发生作用。如果你的shell是sh、csh或是ksh这两个文件将不起作用。按前面的介绍，可能很会猜测/etc/bashrc与~/.bashrc的关系跟/etc/profile与~/.bash_profile的关系一样，一个是全局的，一个是针对单个用户的。从结果上看确实是这样的，但实现过程却是不一样的。启动一个bash时直接source~/.bashrc,而这~/.bashrc里面会source/etc/bashrc。

/etc/profile.d/*.sh
在fc5下这里的脚本会在/etc/profile里或是~/.bashrc里同时source,所以这里的设置都是一些不同分类的全局环境设置。


总结在FC5下一个登录bash的环境初始全过程是：
/etc/profile




|




--/etc/profile.d/*

~/.bash_profile




|





--~/.bashrc













|













--/etc/bashrc

















|

















--/etc/profile.d/*
一个普通交互式bash的初始全过程是:

~/.bashrc




|




--/etc/bashrc







|







--/etc/profile.d/*
对于非交互式bash的初始全过程是:


不重新source任何新的shell脚本，只继承当前shell的设置.
