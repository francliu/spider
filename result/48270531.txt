Contiki系统为了支持多种硬件平台和软件协议设计了如图1.1所示的层次框架，通过contiki-conf.h的宏定义用户可以灵活地选择协议类型，如：
#defineNETSTACK_CONF_NETWORK


rime_driver
#defineNETSTACK_CONF_MAC


csma_driver
#defineNETSTACK_CONF_RDC


cxmac_driver
#defineNETSTACK_CONF_RADIO


sx1278_radio_driver
#defineNETSTACK_CONF_FRAMER


framer_nullmac
ContikiV2.7支持的各层次协议类别如图1.2所示，其中NETSTACK_MAC是一个概念层次，真正处理MAC逻辑是由NETSTACK_RDC(Radio
DutyCycling)完成的；而NETSTACK_RADIO层支持的射频驱动，用户可以自由扩展。
图2.1显示了接收RadioPacket的调用逻辑与时序，当射频硬件接收到数据包时ISR通知rf_process，rf_process自底向顶调用：RDC-&gt;MAC-&gt;NETWORK协议栈的接收函数，最后将数据包提交给应用程序绑定的进程。

如图2.2所举例，process_i需要发送abc(Anonymousbest-effortlocalareaBroadCast)数据包，进程自顶向底调用：MAC-&gt;RDC-&gt;RADIO协议栈的发送函数，最后通过射频硬件以无线电方式传输。

CSMA协议提供相对可靠的MAC层传输，每次调用RDC层发送数据包后，它根据反馈信息判断是否需要缓存并重传该数据包。
CSMA的关键数据结构如图3.1所示，structneighbor_queue根据不同的接收地址缓存数据包；struct
rdc_buf_list将同一个接收地址的不同PACKETBUF_ATTR_MAC_SEQNO的数据包进行链接；structqueuebuf保存需要重传的数据包头和数据实体；structqbuf_metadata存储回调函数指针等信息。
CSMA根据RDC层发送数据包的反馈信息选择相应逻辑动作：
MAC_TX_OK：发送成功，回收缓存数据结构和善后工作；
MAC_TX_NOACK：启动ctimer，随机延时后重传，直到发送次数超过MAX；
MAC_TX_COLLISION：继续重传，且发送次数不受限。
一个CSMA的典型时序如图3.2所示，当RDC层发送完数据包后，CSMA的回调函数packet_sent()根据发送结果选择动作（见上面逻辑描述），如果需要重传则根据重传次数选择一个随机时间设置ctimer，当ctimer定时器超时后再次发送该缓存的数据包。
作者简介：
蒋俊，男，硕士研究生，现任长沙市锐米通信科技有限公司CEO。
从事通信研究与嵌入式开发10年，主攻微功率无线网络。
精通LoRa无线扩频通信，无线星型/树型/MESH网络设计；
通晓Contiki,Linux,uC/OS-II,OSAL等操作系统；
熟悉ARM,DSP,STM8,PIC,PC104等处理器；
擅长AD，RF等集成IC开发。
Web:
www.rimelink.com
EMail:
jiangjunjie_2005@126.com
QQ群：35212129
Contiki系统为了支持多种硬件平台和软件协议设计了如图1.1所示的层次框架，通过contiki-conf.h的宏定义用户可以灵活地选择协议类型，如：
#defineNETSTACK_CONF_NETWORK


rime_driver
#defineNETSTACK_CONF_MAC


csma_driver
#defineNETSTACK_CONF_RDC


cxmac_driver
#defineNETSTACK_CONF_RADIO


sx1278_radio_driver
#defineNETSTACK_CONF_FRAMER


framer_nullmac
ContikiV2.7支持的各层次协议类别如图1.2所示，其中NETSTACK_MAC是一个概念层次，真正处理MAC逻辑是由NETSTACK_RDC(Radio
DutyCycling)完成的；而NETSTACK_RADIO层支持的射频驱动，用户可以自由扩展。
图2.1显示了接收RadioPacket的调用逻辑与时序，当射频硬件接收到数据包时ISR通知rf_process，rf_process自底向顶调用：RDC-&gt;MAC-&gt;NETWORK协议栈的接收函数，最后将数据包提交给应用程序绑定的进程。

如图2.2所举例，process_i需要发送abc(Anonymousbest-effortlocalareaBroadCast)数据包，进程自顶向底调用：MAC-&gt;RDC-&gt;RADIO协议栈的发送函数，最后通过射频硬件以无线电方式传输。

CSMA协议提供相对可靠的MAC层传输，每次调用RDC层发送数据包后，它根据反馈信息判断是否需要缓存并重传该数据包。
CSMA的关键数据结构如图3.1所示，structneighbor_queue根据不同的接收地址缓存数据包；struct
rdc_buf_list将同一个接收地址的不同PACKETBUF_ATTR_MAC_SEQNO的数据包进行链接；structqueuebuf保存需要重传的数据包头和数据实体；structqbuf_metadata存储回调函数指针等信息。
CSMA根据RDC层发送数据包的反馈信息选择相应逻辑动作：
MAC_TX_OK：发送成功，回收缓存数据结构和善后工作；
MAC_TX_NOACK：启动ctimer，随机延时后重传，直到发送次数超过MAX；
MAC_TX_COLLISION：继续重传，且发送次数不受限。
一个CSMA的典型时序如图3.2所示，当RDC层发送完数据包后，CSMA的回调函数packet_sent()根据发送结果选择动作（见上面逻辑描述），如果需要重传则根据重传次数选择一个随机时间设置ctimer，当ctimer定时器超时后再次发送该缓存的数据包。
作者简介：
蒋俊，男，硕士研究生，现任长沙市锐米通信科技有限公司CEO。
从事通信研究与嵌入式开发10年，主攻微功率无线网络。
精通LoRa无线扩频通信，无线星型/树型/MESH网络设计；
通晓Contiki,Linux,uC/OS-II,OSAL等操作系统；
熟悉ARM,DSP,STM8,PIC,PC104等处理器；
擅长AD，RF等集成IC开发。
Web:
www.rimelink.com
EMail:
jiangjunjie_2005@126.com
QQ群：35212129
Contiki系统为了支持多种硬件平台和软件协议设计了如图1.1所示的层次框架，通过contiki-conf.h的宏定义用户可以灵活地选择协议类型，如：
#defineNETSTACK_CONF_NETWORK


rime_driver
#defineNETSTACK_CONF_MAC


csma_driver
#defineNETSTACK_CONF_RDC


cxmac_driver
#defineNETSTACK_CONF_RADIO


sx1278_radio_driver
#defineNETSTACK_CONF_FRAMER


framer_nullmac
ContikiV2.7支持的各层次协议类别如图1.2所示，其中NETSTACK_MAC是一个概念层次，真正处理MAC逻辑是由NETSTACK_RDC(Radio
DutyCycling)完成的；而NETSTACK_RADIO层支持的射频驱动，用户可以自由扩展。
图2.1显示了接收RadioPacket的调用逻辑与时序，当射频硬件接收到数据包时ISR通知rf_process，rf_process自底向顶调用：RDC-&gt;MAC-&gt;NETWORK协议栈的接收函数，最后将数据包提交给应用程序绑定的进程。

如图2.2所举例，process_i需要发送abc(Anonymousbest-effortlocalareaBroadCast)数据包，进程自顶向底调用：MAC-&gt;RDC-&gt;RADIO协议栈的发送函数，最后通过射频硬件以无线电方式传输。

CSMA协议提供相对可靠的MAC层传输，每次调用RDC层发送数据包后，它根据反馈信息判断是否需要缓存并重传该数据包。
CSMA的关键数据结构如图3.1所示，structneighbor_queue根据不同的接收地址缓存数据包；struct
rdc_buf_list将同一个接收地址的不同PACKETBUF_ATTR_MAC_SEQNO的数据包进行链接；structqueuebuf保存需要重传的数据包头和数据实体；structqbuf_metadata存储回调函数指针等信息。
CSMA根据RDC层发送数据包的反馈信息选择相应逻辑动作：
MAC_TX_OK：发送成功，回收缓存数据结构和善后工作；
MAC_TX_NOACK：启动ctimer，随机延时后重传，直到发送次数超过MAX；
MAC_TX_COLLISION：继续重传，且发送次数不受限。
一个CSMA的典型时序如图3.2所示，当RDC层发送完数据包后，CSMA的回调函数packet_sent()根据发送结果选择动作（见上面逻辑描述），如果需要重传则根据重传次数选择一个随机时间设置ctimer，当ctimer定时器超时后再次发送该缓存的数据包。
作者简介：
蒋俊，男，硕士研究生，现任长沙市锐米通信科技有限公司CEO。
从事通信研究与嵌入式开发10年，主攻微功率无线网络。
精通LoRa无线扩频通信，无线星型/树型/MESH网络设计；
通晓Contiki,Linux,uC/OS-II,OSAL等操作系统；
熟悉ARM,DSP,STM8,PIC,PC104等处理器；
擅长AD，RF等集成IC开发。
Web:
www.rimelink.com
EMail:
jiangjunjie_2005@126.com
QQ群：35212129
Contiki系统为了支持多种硬件平台和软件协议设计了如图1.1所示的层次框架，通过contiki-conf.h的宏定义用户可以灵活地选择协议类型，如：
#defineNETSTACK_CONF_NETWORK


rime_driver
#defineNETSTACK_CONF_MAC


csma_driver
#defineNETSTACK_CONF_RDC


cxmac_driver
#defineNETSTACK_CONF_RADIO


sx1278_radio_driver
#defineNETSTACK_CONF_FRAMER


framer_nullmac
ContikiV2.7支持的各层次协议类别如图1.2所示，其中NETSTACK_MAC是一个概念层次，真正处理MAC逻辑是由NETSTACK_RDC(Radio
DutyCycling)完成的；而NETSTACK_RADIO层支持的射频驱动，用户可以自由扩展。
图2.1显示了接收RadioPacket的调用逻辑与时序，当射频硬件接收到数据包时ISR通知rf_process，rf_process自底向顶调用：RDC-&gt;MAC-&gt;NETWORK协议栈的接收函数，最后将数据包提交给应用程序绑定的进程。

如图2.2所举例，process_i需要发送abc(Anonymousbest-effortlocalareaBroadCast)数据包，进程自顶向底调用：MAC-&gt;RDC-&gt;RADIO协议栈的发送函数，最后通过射频硬件以无线电方式传输。

CSMA协议提供相对可靠的MAC层传输，每次调用RDC层发送数据包后，它根据反馈信息判断是否需要缓存并重传该数据包。
CSMA的关键数据结构如图3.1所示，structneighbor_queue根据不同的接收地址缓存数据包；struct
rdc_buf_list将同一个接收地址的不同PACKETBUF_ATTR_MAC_SEQNO的数据包进行链接；structqueuebuf保存需要重传的数据包头和数据实体；structqbuf_metadata存储回调函数指针等信息。
CSMA根据RDC层发送数据包的反馈信息选择相应逻辑动作：
MAC_TX_OK：发送成功，回收缓存数据结构和善后工作；
MAC_TX_NOACK：启动ctimer，随机延时后重传，直到发送次数超过MAX；
MAC_TX_COLLISION：继续重传，且发送次数不受限。
一个CSMA的典型时序如图3.2所示，当RDC层发送完数据包后，CSMA的回调函数packet_sent()根据发送结果选择动作（见上面逻辑描述），如果需要重传则根据重传次数选择一个随机时间设置ctimer，当ctimer定时器超时后再次发送该缓存的数据包。
作者简介：
蒋俊，男，硕士研究生，现任长沙市锐米通信科技有限公司CEO。
从事通信研究与嵌入式开发10年，主攻微功率无线网络。
精通LoRa无线扩频通信，无线星型/树型/MESH网络设计；
通晓Contiki,Linux,uC/OS-II,OSAL等操作系统；
熟悉ARM,DSP,STM8,PIC,PC104等处理器；
擅长AD，RF等集成IC开发。
Web:
www.rimelink.com
EMail:
jiangjunjie_2005@126.com
QQ群：35212129
