　　字符串匹配是计算机的基本任务之一。
　　举例来说，有一个字符串&quot;BBCABCDABABCDABCDABDE&quot;，我想知道，里面是否包含另一个字符串&quot;ABCDABD&quot;？

　　许多算法可以完成这个任务，Knuth-Morris-Pratt算法（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家DonaldKnuth。

　　这种算法不太容易理解，网上有很多解释，但读起来都很费劲。直到读到Jake
Boxer的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。
　　1.

　　首先，字符串&quot;BBCABCDABABCDABCDABDE&quot;的第一个字符与搜索词&quot;ABCDABD&quot;的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。
　　2.

　　因为B与A不匹配，搜索词再往后移。
　　3.

　　就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。
　　4.

　　接着比较字符串和搜索词的下一个字符，还是相同。
　　5.

　　直到字符串有一个字符，与搜索词对应的字符不相同为止。
　　6.

　　这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把&quot;搜索位置&quot;移到已经比较过的位置，重比一遍。
　　7.

　　一个基本事实是，当空&#26684;与D不匹配时，你其实知道前面六个字符是&quot;ABCDAB&quot;。KMP算法的想法是，设法利用这个已知信息，不要把&quot;搜索位置&quot;移回已经比较过的位置，继续把它向后移，这样就提高了效率。
　　8.

　　怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（PartialMatchTable）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。
　　9.

　　已知空&#26684;与D不匹配时，前面六个字符&quot;ABCDAB&quot;是匹配的。查表可知，最后一个匹配字符B对应的&quot;部分匹配&#20540;&quot;为2，因此按照下面的公式算出向后移动的位数：
　　移动位数=已匹配的字符数-对应的部分匹配&#20540;
　　因为6-2等于4，所以将搜索词向后移动4位。
　　10.

　　因为空&#26684;与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（&quot;AB&quot;），对应的&quot;部分匹配&#20540;&quot;为0。所以，移动位数=2-0，结果为2，于是将搜索词向后移2位。
　　11.

　　因为空&#26684;与A不匹配，继续后移一位。
　　12.

　　逐位比较，直到发现C与D不匹配。于是，移动位数=6-2，继续将搜索词向后移动4位。
　　13.

　　逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数=7-0，再将搜索词向后移动7位，这里就不再重复了。
　　14.

　　下面介绍《部分匹配表》是如何产生的。
　　首先，要了解两个概念：&quot;前缀&quot;和&quot;后缀&quot;。&quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。
　　15.

　　&quot;部分匹配&#20540;&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。以&quot;ABCDABD&quot;为例，
　　－　&quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；
　　－　&quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；
　　－　&quot;ABC&quot;的前缀为[A,AB]，后缀为[BC,C]，共有元素的长度0；
　　－　&quot;ABCD&quot;的前缀为[A,AB,ABC]，后缀为[BCD,CD,D]，共有元素的长度为0；
　　－　&quot;ABCDA&quot;的前缀为[A,AB,ABC,ABCD]，后缀为[BCDA,CDA,DA,A]，共有元素为&quot;A&quot;，长度为1；
　　－　&quot;ABCDAB&quot;的前缀为[A,AB,ABC,ABCD,ABCDA]，后缀为[BCDAB,CDAB,DAB,AB,B]，共有元素为&quot;AB&quot;，长度为2；
　　－　&quot;ABCDABD&quot;的前缀为[A,AB,ABC,ABCD,ABCDA,ABCDAB]，后缀为[BCDABD,CDABD,DABD,ABD,BD,D]，共有元素的长度为0。
　　16.

　　&quot;部分匹配&quot;的实质是，有时候，字符串头部和尾部会有重复。比如，&quot;ABCDAB&quot;之中有两个&quot;AB&quot;，那么它的&quot;部分匹配&#20540;&quot;就是2（&quot;AB&quot;的长度）。搜索词移动的时候，第一个&quot;AB&quot;向后移动4位（字符串长度-部分匹配&#20540;），就可以来到第二个&quot;AB&quot;的位置。
　　字符串匹配是计算机的基本任务之一。
　　举例来说，有一个字符串&quot;BBCABCDABABCDABCDABDE&quot;，我想知道，里面是否包含另一个字符串&quot;ABCDABD&quot;？

　　许多算法可以完成这个任务，Knuth-Morris-Pratt算法（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家DonaldKnuth。

　　这种算法不太容易理解，网上有很多解释，但读起来都很费劲。直到读到Jake
Boxer的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。
　　1.

　　首先，字符串&quot;BBCABCDABABCDABCDABDE&quot;的第一个字符与搜索词&quot;ABCDABD&quot;的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。
　　2.

　　因为B与A不匹配，搜索词再往后移。
　　3.

　　就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。
　　4.

　　接着比较字符串和搜索词的下一个字符，还是相同。
　　5.

　　直到字符串有一个字符，与搜索词对应的字符不相同为止。
　　6.

　　这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把&quot;搜索位置&quot;移到已经比较过的位置，重比一遍。
　　7.

　　一个基本事实是，当空&#26684;与D不匹配时，你其实知道前面六个字符是&quot;ABCDAB&quot;。KMP算法的想法是，设法利用这个已知信息，不要把&quot;搜索位置&quot;移回已经比较过的位置，继续把它向后移，这样就提高了效率。
　　8.

　　怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（PartialMatchTable）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。
　　9.

　　已知空&#26684;与D不匹配时，前面六个字符&quot;ABCDAB&quot;是匹配的。查表可知，最后一个匹配字符B对应的&quot;部分匹配&#20540;&quot;为2，因此按照下面的公式算出向后移动的位数：
　　移动位数=已匹配的字符数-对应的部分匹配&#20540;
　　因为6-2等于4，所以将搜索词向后移动4位。
　　10.

　　因为空&#26684;与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（&quot;AB&quot;），对应的&quot;部分匹配&#20540;&quot;为0。所以，移动位数=2-0，结果为2，于是将搜索词向后移2位。
　　11.

　　因为空&#26684;与A不匹配，继续后移一位。
　　12.

　　逐位比较，直到发现C与D不匹配。于是，移动位数=6-2，继续将搜索词向后移动4位。
　　13.

　　逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数=7-0，再将搜索词向后移动7位，这里就不再重复了。
　　14.

　　下面介绍《部分匹配表》是如何产生的。
　　首先，要了解两个概念：&quot;前缀&quot;和&quot;后缀&quot;。&quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。
　　15.

　　&quot;部分匹配&#20540;&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。以&quot;ABCDABD&quot;为例，
　　－　&quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；
　　－　&quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；
　　－　&quot;ABC&quot;的前缀为[A,AB]，后缀为[BC,C]，共有元素的长度0；
　　－　&quot;ABCD&quot;的前缀为[A,AB,ABC]，后缀为[BCD,CD,D]，共有元素的长度为0；
　　－　&quot;ABCDA&quot;的前缀为[A,AB,ABC,ABCD]，后缀为[BCDA,CDA,DA,A]，共有元素为&quot;A&quot;，长度为1；
　　－　&quot;ABCDAB&quot;的前缀为[A,AB,ABC,ABCD,ABCDA]，后缀为[BCDAB,CDAB,DAB,AB,B]，共有元素为&quot;AB&quot;，长度为2；
　　－　&quot;ABCDABD&quot;的前缀为[A,AB,ABC,ABCD,ABCDA,ABCDAB]，后缀为[BCDABD,CDABD,DABD,ABD,BD,D]，共有元素的长度为0。
　　16.

　　&quot;部分匹配&quot;的实质是，有时候，字符串头部和尾部会有重复。比如，&quot;ABCDAB&quot;之中有两个&quot;AB&quot;，那么它的&quot;部分匹配&#20540;&quot;就是2（&quot;AB&quot;的长度）。搜索词移动的时候，第一个&quot;AB&quot;向后移动4位（字符串长度-部分匹配&#20540;），就可以来到第二个&quot;AB&quot;的位置。
　　字符串匹配是计算机的基本任务之一。
　　举例来说，有一个字符串&quot;BBCABCDABABCDABCDABDE&quot;，我想知道，里面是否包含另一个字符串&quot;ABCDABD&quot;？

　　许多算法可以完成这个任务，Knuth-Morris-Pratt算法（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家DonaldKnuth。

　　这种算法不太容易理解，网上有很多解释，但读起来都很费劲。直到读到Jake
Boxer的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。
　　1.

　　首先，字符串&quot;BBCABCDABABCDABCDABDE&quot;的第一个字符与搜索词&quot;ABCDABD&quot;的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。
　　2.

　　因为B与A不匹配，搜索词再往后移。
　　3.

　　就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。
　　4.

　　接着比较字符串和搜索词的下一个字符，还是相同。
　　5.

　　直到字符串有一个字符，与搜索词对应的字符不相同为止。
　　6.

　　这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把&quot;搜索位置&quot;移到已经比较过的位置，重比一遍。
　　7.

　　一个基本事实是，当空&#26684;与D不匹配时，你其实知道前面六个字符是&quot;ABCDAB&quot;。KMP算法的想法是，设法利用这个已知信息，不要把&quot;搜索位置&quot;移回已经比较过的位置，继续把它向后移，这样就提高了效率。
　　8.

　　怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（PartialMatchTable）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。
　　9.

　　已知空&#26684;与D不匹配时，前面六个字符&quot;ABCDAB&quot;是匹配的。查表可知，最后一个匹配字符B对应的&quot;部分匹配&#20540;&quot;为2，因此按照下面的公式算出向后移动的位数：
　　移动位数=已匹配的字符数-对应的部分匹配&#20540;
　　因为6-2等于4，所以将搜索词向后移动4位。
　　10.

　　因为空&#26684;与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（&quot;AB&quot;），对应的&quot;部分匹配&#20540;&quot;为0。所以，移动位数=2-0，结果为2，于是将搜索词向后移2位。
　　11.

　　因为空&#26684;与A不匹配，继续后移一位。
　　12.

　　逐位比较，直到发现C与D不匹配。于是，移动位数=6-2，继续将搜索词向后移动4位。
　　13.

　　逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数=7-0，再将搜索词向后移动7位，这里就不再重复了。
　　14.

　　下面介绍《部分匹配表》是如何产生的。
　　首先，要了解两个概念：&quot;前缀&quot;和&quot;后缀&quot;。&quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。
　　15.

　　&quot;部分匹配&#20540;&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。以&quot;ABCDABD&quot;为例，
　　－　&quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；
　　－　&quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；
　　－　&quot;ABC&quot;的前缀为[A,AB]，后缀为[BC,C]，共有元素的长度0；
　　－　&quot;ABCD&quot;的前缀为[A,AB,ABC]，后缀为[BCD,CD,D]，共有元素的长度为0；
　　－　&quot;ABCDA&quot;的前缀为[A,AB,ABC,ABCD]，后缀为[BCDA,CDA,DA,A]，共有元素为&quot;A&quot;，长度为1；
　　－　&quot;ABCDAB&quot;的前缀为[A,AB,ABC,ABCD,ABCDA]，后缀为[BCDAB,CDAB,DAB,AB,B]，共有元素为&quot;AB&quot;，长度为2；
　　－　&quot;ABCDABD&quot;的前缀为[A,AB,ABC,ABCD,ABCDA,ABCDAB]，后缀为[BCDABD,CDABD,DABD,ABD,BD,D]，共有元素的长度为0。
　　16.

　　&quot;部分匹配&quot;的实质是，有时候，字符串头部和尾部会有重复。比如，&quot;ABCDAB&quot;之中有两个&quot;AB&quot;，那么它的&quot;部分匹配&#20540;&quot;就是2（&quot;AB&quot;的长度）。搜索词移动的时候，第一个&quot;AB&quot;向后移动4位（字符串长度-部分匹配&#20540;），就可以来到第二个&quot;AB&quot;的位置。
　　字符串匹配是计算机的基本任务之一。
　　举例来说，有一个字符串&quot;BBCABCDABABCDABCDABDE&quot;，我想知道，里面是否包含另一个字符串&quot;ABCDABD&quot;？

　　许多算法可以完成这个任务，Knuth-Morris-Pratt算法（简称KMP）是最常用的之一。它以三个发明者命名，起头的那个K就是著名科学家DonaldKnuth。

　　这种算法不太容易理解，网上有很多解释，但读起来都很费劲。直到读到Jake
Boxer的文章，我才真正理解这种算法。下面，我用自己的语言，试图写一篇比较好懂的KMP算法解释。
　　1.

　　首先，字符串&quot;BBCABCDABABCDABCDABDE&quot;的第一个字符与搜索词&quot;ABCDABD&quot;的第一个字符，进行比较。因为B与A不匹配，所以搜索词后移一位。
　　2.

　　因为B与A不匹配，搜索词再往后移。
　　3.

　　就这样，直到字符串有一个字符，与搜索词的第一个字符相同为止。
　　4.

　　接着比较字符串和搜索词的下一个字符，还是相同。
　　5.

　　直到字符串有一个字符，与搜索词对应的字符不相同为止。
　　6.

　　这时，最自然的反应是，将搜索词整个后移一位，再从头逐个比较。这样做虽然可行，但是效率很差，因为你要把&quot;搜索位置&quot;移到已经比较过的位置，重比一遍。
　　7.

　　一个基本事实是，当空&#26684;与D不匹配时，你其实知道前面六个字符是&quot;ABCDAB&quot;。KMP算法的想法是，设法利用这个已知信息，不要把&quot;搜索位置&quot;移回已经比较过的位置，继续把它向后移，这样就提高了效率。
　　8.

　　怎么做到这一点呢？可以针对搜索词，算出一张《部分匹配表》（PartialMatchTable）。这张表是如何产生的，后面再介绍，这里只要会用就可以了。
　　9.

　　已知空&#26684;与D不匹配时，前面六个字符&quot;ABCDAB&quot;是匹配的。查表可知，最后一个匹配字符B对应的&quot;部分匹配&#20540;&quot;为2，因此按照下面的公式算出向后移动的位数：
　　移动位数=已匹配的字符数-对应的部分匹配&#20540;
　　因为6-2等于4，所以将搜索词向后移动4位。
　　10.

　　因为空&#26684;与Ｃ不匹配，搜索词还要继续往后移。这时，已匹配的字符数为2（&quot;AB&quot;），对应的&quot;部分匹配&#20540;&quot;为0。所以，移动位数=2-0，结果为2，于是将搜索词向后移2位。
　　11.

　　因为空&#26684;与A不匹配，继续后移一位。
　　12.

　　逐位比较，直到发现C与D不匹配。于是，移动位数=6-2，继续将搜索词向后移动4位。
　　13.

　　逐位比较，直到搜索词的最后一位，发现完全匹配，于是搜索完成。如果还要继续搜索（即找出全部匹配），移动位数=7-0，再将搜索词向后移动7位，这里就不再重复了。
　　14.

　　下面介绍《部分匹配表》是如何产生的。
　　首先，要了解两个概念：&quot;前缀&quot;和&quot;后缀&quot;。&quot;前缀&quot;指除了最后一个字符以外，一个字符串的全部头部组合；&quot;后缀&quot;指除了第一个字符以外，一个字符串的全部尾部组合。
　　15.

　　&quot;部分匹配&#20540;&quot;就是&quot;前缀&quot;和&quot;后缀&quot;的最长的共有元素的长度。以&quot;ABCDABD&quot;为例，
　　－　&quot;A&quot;的前缀和后缀都为空集，共有元素的长度为0；
　　－　&quot;AB&quot;的前缀为[A]，后缀为[B]，共有元素的长度为0；
　　－　&quot;ABC&quot;的前缀为[A,AB]，后缀为[BC,C]，共有元素的长度0；
　　－　&quot;ABCD&quot;的前缀为[A,AB,ABC]，后缀为[BCD,CD,D]，共有元素的长度为0；
　　－　&quot;ABCDA&quot;的前缀为[A,AB,ABC,ABCD]，后缀为[BCDA,CDA,DA,A]，共有元素为&quot;A&quot;，长度为1；
　　－　&quot;ABCDAB&quot;的前缀为[A,AB,ABC,ABCD,ABCDA]，后缀为[BCDAB,CDAB,DAB,AB,B]，共有元素为&quot;AB&quot;，长度为2；
　　－　&quot;ABCDABD&quot;的前缀为[A,AB,ABC,ABCD,ABCDA,ABCDAB]，后缀为[BCDABD,CDABD,DABD,ABD,BD,D]，共有元素的长度为0。
　　16.

　　&quot;部分匹配&quot;的实质是，有时候，字符串头部和尾部会有重复。比如，&quot;ABCDAB&quot;之中有两个&quot;AB&quot;，那么它的&quot;部分匹配&#20540;&quot;就是2（&quot;AB&quot;的长度）。搜索词移动的时候，第一个&quot;AB&quot;向后移动4位（字符串长度-部分匹配&#20540;），就可以来到第二个&quot;AB&quot;的位置。
