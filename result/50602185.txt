
【应用场景】

1.进程间通讯-生产者消费者模式

生产者进程和消费者进程通讯常使用共享内存，比如一个网络服务器，接入进程收到数据包后，直接写到共享内存中，并唤醒处理进程，处理进程从共享内存中读数据包，进行处理。当然，这里要解决互斥的问题。

2.父子进程间通讯

由于fork产生的子进程和父进程不共享内存区，所以父子进程间的通讯也可以使用共享内存，以POSIX共享内存为例，父进程启动后使用MAP_SHARED建立内存映射，并返回指针ptr。fork结束后，子进程也会有指针ptr的拷贝，并指向同一个文件映射。这样父、子进程便共享了ptr指向的内存区。

3.进程间共享-只读模式

业务经常碰到一种场景，进程需要加载一份配置文件，可能这个文件有100K大，那如果这台机器上多个进程都要加载这份配置文件时，比如有200个进程，那内存开销合计为20M，但如果文件更多或者进程数更多时，这种对内存的消耗就是一种严重的浪费。比较好的解决办法是，由一个进程负责把配置文件加载到共享内存中，然后所有需要这份配置的进程只要使用这个共享内存即可。

【共享内存分类】

1.POSIX共享内存对象

constcharshmfile[]=&quot;/tmp&quot;;

constintsize=100;

shm_open创建一个名称为tmp，大小为100字节的共享内存区对象后，在/dev/shm/下可以看到对应的文件，cat可以看到内容。
root:/home/#ls-al/dev/shm/tmp

-rw-------1rootroot10010-1513:37/dev/shm/tmp

访问速度：非常快，因为/dev/shm是tmpfs的文件系统，
可以看成是直接对内存操作的，速度当然是非常快的。

持续性：随内核，即进程重启共享内存中数据不会丢失，内核自举或显示调用shm_unlink或rm掉文件删除后丢失。

2.
POSIX内存映射文件
constcharshmfile[]=&quot;./tmp.shm&quot;;

constintsize=100;

open在指定目录下创建指定名称后文件，cat可以看到内容。
root:/home/#ls-al
./tmp.shm
-rw-------
1root


root


10010-1513:42tmp.shm

访问速度：慢于内存区对象，因为内核为同步或异步更新到文件系统中，而内存区对象是直接操作内存的。
持续性：随文件，即进程重启或内核自举不后丢失，除失显示rm掉文件后丢失。

3.SYSTEMV共享内存

共享内存创建后，执行ipcs命令，会打印出相应的信息，比如下面所示，key为申请时分配的，可以执行ipcrm-M0x12345678删除，nattch字段为1表示有一个进程挂载了该内存。

------SharedMemorySegments--------

key






shmid




owner




perms




bytes




nattch



status






0x1234567832769




root




644






10







1

访问速度：非常快，可以理解为全内存操作。
持续性：随内核，即进程重启共享内存中数据不会丢失，内核自举或显示调用shmdt或使用ipcrm删除后丢失。

与POSIXV共享内存区对象不同的是，SYSTEMV的共享内存区对象的大小是在调用shmget创建时固定下来的，而POSIX共享内存区大小可以在任何时刻通过ftruncate修改。


【代码示例】

下面给出三种共享内存使用方法的示例代码，都采用父子进程间通讯，并未考虑互斥，仅做示例供大家参考。

1.POSIX共享内存对象


编译执行
root:/home/ftpuser/ipc#g&#43;&#43;-oshm_posix-lrtshm_posix.cc






root:/home/ftpuser/ipc#./shm_posix

Child2280:start
Thereis3itemintheshm

1:Nellson

2:Daisy

3:Robbie
Parent2279getchildstatus:0

2.POSIX文件映射


编译执行

root:/home/ftpuser/ipc#g&#43;&#43;-omap_posixmap_posix.cc

root:/home/ftpuser/ipc#./map_posix

Child2300:start
Thereis3itemintheshm

1:Nellson

2:Daisy

3:Robbie
Parent2299getchildstatus:0

3.SYSTEMV共享内存对象


编译执行

root:/home/ftpuser/ipc#g&#43;&#43;-oshm_vshm_v.cc


root:/home/ftpuser/ipc#./shm_v

Child2323:start
Thereis3itemintheshm

1:Nellson

2:Daisy

3:Robbie
Parent2322getchildstatus:0

【性能测试】
下面对三种方式进行性能测试，比较下差异。
测试机信息：
AMDAthlon(tm)NeoX2DualCoreProcessor6850e
cpu:1.7G
os:Linux2.6.18

测试方式：
打开大小为SIZE的共享内存，映射到一个int型的数组中，循环写数组、读数组。
重复10W次，计算时间开销。

内存大小
Shmopen&#43;mmap(ms)
Open&#43;mmap
Shmget
4k
1504
1470
1507
16k
6616
6201
5994
64k
25905
24391
24315
256k
87487
76981
69417
1M
253209
263431
241886

重复1K次，计算时间开销。

内存大小
Shmopen&#43;mmap(ms)
Open&#43;mmap(ms)
Shmget(ms)
1M
5458
5447
5404
4M
21492
21447
21307
16M
90880
93685
87594
32M
178000
214900
193000

分析：
SytemV方式读写速度快于POSIX方式，而POSIX共享内存和文件映射方式相差不大，共享内存性能略优。

附上测试源码：


【应用场景】

1.进程间通讯-生产者消费者模式

生产者进程和消费者进程通讯常使用共享内存，比如一个网络服务器，接入进程收到数据包后，直接写到共享内存中，并唤醒处理进程，处理进程从共享内存中读数据包，进行处理。当然，这里要解决互斥的问题。

2.父子进程间通讯

由于fork产生的子进程和父进程不共享内存区，所以父子进程间的通讯也可以使用共享内存，以POSIX共享内存为例，父进程启动后使用MAP_SHARED建立内存映射，并返回指针ptr。fork结束后，子进程也会有指针ptr的拷贝，并指向同一个文件映射。这样父、子进程便共享了ptr指向的内存区。

3.进程间共享-只读模式

业务经常碰到一种场景，进程需要加载一份配置文件，可能这个文件有100K大，那如果这台机器上多个进程都要加载这份配置文件时，比如有200个进程，那内存开销合计为20M，但如果文件更多或者进程数更多时，这种对内存的消耗就是一种严重的浪费。比较好的解决办法是，由一个进程负责把配置文件加载到共享内存中，然后所有需要这份配置的进程只要使用这个共享内存即可。

【共享内存分类】

1.POSIX共享内存对象

constcharshmfile[]=&quot;/tmp&quot;;

constintsize=100;

shm_open创建一个名称为tmp，大小为100字节的共享内存区对象后，在/dev/shm/下可以看到对应的文件，cat可以看到内容。
root:/home/#ls-al/dev/shm/tmp

-rw-------1rootroot10010-1513:37/dev/shm/tmp

访问速度：非常快，因为/dev/shm是tmpfs的文件系统，
可以看成是直接对内存操作的，速度当然是非常快的。

持续性：随内核，即进程重启共享内存中数据不会丢失，内核自举或显示调用shm_unlink或rm掉文件删除后丢失。

2.
POSIX内存映射文件
constcharshmfile[]=&quot;./tmp.shm&quot;;

constintsize=100;

open在指定目录下创建指定名称后文件，cat可以看到内容。
root:/home/#ls-al
./tmp.shm
-rw-------
1root


root


10010-1513:42tmp.shm

访问速度：慢于内存区对象，因为内核为同步或异步更新到文件系统中，而内存区对象是直接操作内存的。
持续性：随文件，即进程重启或内核自举不后丢失，除失显示rm掉文件后丢失。

3.SYSTEMV共享内存

共享内存创建后，执行ipcs命令，会打印出相应的信息，比如下面所示，key为申请时分配的，可以执行ipcrm-M0x12345678删除，nattch字段为1表示有一个进程挂载了该内存。

------SharedMemorySegments--------

key






shmid




owner




perms




bytes




nattch



status






0x1234567832769




root




644






10







1

访问速度：非常快，可以理解为全内存操作。
持续性：随内核，即进程重启共享内存中数据不会丢失，内核自举或显示调用shmdt或使用ipcrm删除后丢失。

与POSIXV共享内存区对象不同的是，SYSTEMV的共享内存区对象的大小是在调用shmget创建时固定下来的，而POSIX共享内存区大小可以在任何时刻通过ftruncate修改。


【代码示例】

下面给出三种共享内存使用方法的示例代码，都采用父子进程间通讯，并未考虑互斥，仅做示例供大家参考。

1.POSIX共享内存对象


编译执行
root:/home/ftpuser/ipc#g&#43;&#43;-oshm_posix-lrtshm_posix.cc






root:/home/ftpuser/ipc#./shm_posix

Child2280:start
Thereis3itemintheshm

1:Nellson

2:Daisy

3:Robbie
Parent2279getchildstatus:0

2.POSIX文件映射


编译执行

root:/home/ftpuser/ipc#g&#43;&#43;-omap_posixmap_posix.cc

root:/home/ftpuser/ipc#./map_posix

Child2300:start
Thereis3itemintheshm

1:Nellson

2:Daisy

3:Robbie
Parent2299getchildstatus:0

3.SYSTEMV共享内存对象


编译执行

root:/home/ftpuser/ipc#g&#43;&#43;-oshm_vshm_v.cc


root:/home/ftpuser/ipc#./shm_v

Child2323:start
Thereis3itemintheshm

1:Nellson

2:Daisy

3:Robbie
Parent2322getchildstatus:0

【性能测试】
下面对三种方式进行性能测试，比较下差异。
测试机信息：
AMDAthlon(tm)NeoX2DualCoreProcessor6850e
cpu:1.7G
os:Linux2.6.18

测试方式：
打开大小为SIZE的共享内存，映射到一个int型的数组中，循环写数组、读数组。
重复10W次，计算时间开销。

内存大小
Shmopen&#43;mmap(ms)
Open&#43;mmap
Shmget
4k
1504
1470
1507
16k
6616
6201
5994
64k
25905
24391
24315
256k
87487
76981
69417
1M
253209
263431
241886

重复1K次，计算时间开销。

内存大小
Shmopen&#43;mmap(ms)
Open&#43;mmap(ms)
Shmget(ms)
1M
5458
5447
5404
4M
21492
21447
21307
16M
90880
93685
87594
32M
178000
214900
193000

分析：
SytemV方式读写速度快于POSIX方式，而POSIX共享内存和文件映射方式相差不大，共享内存性能略优。

附上测试源码：

