大家好，前面入门已经说了那么多基础知识了，下面我们做几个实战项目来挑战一下吧。那么这次为大家带来，Python爬取糗事百科的小段子的例子。
首先，糗事百科大家都听说过吧？糗友们发的搞笑的段子一抓一大把，这次我们尝试一下用爬虫把他们抓取下来。
1.抓取糗事百科热门段子
2.过滤带有图片的段子
3.实现每按一次回车显示一个段子的发布时间，发布人，段子内容，点赞数。
糗事百科是不需要登录的，所以也没必要用到Cookie，另外糗事百科有的段子是附图的，我们把图抓下来图片不便于显示，那么我们就尝试过滤掉有图的段子吧。
好，现在我们尝试抓取一下糗事百科的热门段子吧，每按下一次回车我们显示一个段子。
首先我们确定好页面的URL是http://www.qiushibaike.com/hot/page/1，其中最后一个数字1代表页数，我们可以传入不同的&#20540;来获得某一页的段子内容。
我们初步构建如下的代码来打印页面代码内容试试看，先构造最基本的页面抓取方式，看看会不会成功
运行程序，哦不，它竟然报错了，真是时运不济，命途多舛啊
好吧，应该是headers验证的问题，我们加上一个headers验证试试看吧，将代码修改如下
嘿嘿，这次运行终于正常了，打印出了第一页的HTML代码，大家可以运行下代码试试看。在这里运行结果太长就不贴了。
好，获取了HTML代码之后，我们开始分析怎样获取某一页的所有段子。
首先我们审查元素看一下，按浏览器的F12，截图如下

我们可以看到，每一个段子都是&lt;divclass=”articleblockuntaggedmb15″id=”…”&gt;…&lt;/div&gt;包裹的内容。
现在我们想获取发布人，发布日期，段子内容，以及点赞的个数。不过另外注意的是，段子有些是带图片的，如果我们想在控制台显示图片是不现实的，所以我们直接把带有图片的段子给它剔除掉，只保存仅含文本的段子。
所以我们加入如下正则表达式来匹配一下，用到的方法是re.findall是找寻所有匹配的内容。方法的用法详情可以看前面说的正则表达式的介绍。
好，我们的正则表达式匹配语句书写如下，在原来的基础上追加如下代码
现在正则表达式在这里稍作说明
1）.*?是一个固定的搭配，.和*代表可以匹配任意无限多个字符，加上？表示使用非贪婪模式进行匹配，也就是我们会尽可能短地做匹配，以后我们还会大量用到.*?的搭配。
2）(.*?)代表一个分组，在这个正则表达式中我们匹配了五个分组，在后面的遍历item中，item[0]就代表第一个(.*?)所指代的内容，item[1]就代表第二个(.*?)所指代的内容，以此类推。
3）re.S标志代表在匹配时为点任意匹配模式，点.也可以代表换行符。
现在我们可以看一下部分运行结果
儒雅男神2015-02-1714:34:42
小时候一个一个拆着放的举个爪…
&lt;divclass=”thumb”&gt;
&lt;ahref=”/article/100705418?list=hot&amp;s=4747301″target=”_blank”onclick=”_hmt.push([‘_trackEvent’,‘post’,‘click’,‘signlePost’])”&gt;

&lt;imgsrc=”http://pic.qiushibaike.com/system/pictures/10070/100705418/medium/app100705418.jpg”alt=”糗事#100705418″/&gt;

&lt;/a&gt;
&lt;/div&gt;
7093

奇怪的名字啊2015-02-1714:49:16
回家的路，你追我赶，回家的心情和窗外的阳光一样灿烂。一路向前，离亲人越来越近了。哪里有爸妈哪里才是家，希望所有糗友的爸爸妈妈都身体健康…….
4803
这是其中的两个段子，分别打印了发布人，发布时间，发布内容，附加图片以及点赞数。
其中，附加图片的内容我把图片代码整体抠了出来，这个对应item[3]，所以我们只需要进一步判断item[3]里面是否含有img这个字样就可以进行过滤了。
好，我们再把上述代码中的for循环改为下面的样子
现在，整体的代码如下
运行一下看下效果

恩，带有图片的段子已经被剔除啦。是不是很开森？
好啦，现在最核心的部分我们已经完成啦，剩下的就是修一下边边角角的东西，我们想达到的目的是：
按下回车，读取一个段子，显示出段子的发布人，发布日期，内容以及点赞个数。
另外我们需要设计面向对象模式，引入类和方法，将代码做一下优化和封装，最后，我们的代码如下所示
好啦，大家来测试一下吧，点一下回车会输出一个段子，包括发布人，发布时间，段子内容以及点赞数，是不是感觉爽爆了！
我们第一个爬虫实战项目介绍到这里，欢迎大家继续关注，小伙伴们加油！
大家好，前面入门已经说了那么多基础知识了，下面我们做几个实战项目来挑战一下吧。那么这次为大家带来，Python爬取糗事百科的小段子的例子。
首先，糗事百科大家都听说过吧？糗友们发的搞笑的段子一抓一大把，这次我们尝试一下用爬虫把他们抓取下来。
1.抓取糗事百科热门段子
2.过滤带有图片的段子
3.实现每按一次回车显示一个段子的发布时间，发布人，段子内容，点赞数。
糗事百科是不需要登录的，所以也没必要用到Cookie，另外糗事百科有的段子是附图的，我们把图抓下来图片不便于显示，那么我们就尝试过滤掉有图的段子吧。
好，现在我们尝试抓取一下糗事百科的热门段子吧，每按下一次回车我们显示一个段子。
首先我们确定好页面的URL是http://www.qiushibaike.com/hot/page/1，其中最后一个数字1代表页数，我们可以传入不同的&#20540;来获得某一页的段子内容。
我们初步构建如下的代码来打印页面代码内容试试看，先构造最基本的页面抓取方式，看看会不会成功
运行程序，哦不，它竟然报错了，真是时运不济，命途多舛啊
好吧，应该是headers验证的问题，我们加上一个headers验证试试看吧，将代码修改如下
嘿嘿，这次运行终于正常了，打印出了第一页的HTML代码，大家可以运行下代码试试看。在这里运行结果太长就不贴了。
好，获取了HTML代码之后，我们开始分析怎样获取某一页的所有段子。
首先我们审查元素看一下，按浏览器的F12，截图如下

我们可以看到，每一个段子都是&lt;divclass=”articleblockuntaggedmb15″id=”…”&gt;…&lt;/div&gt;包裹的内容。
现在我们想获取发布人，发布日期，段子内容，以及点赞的个数。不过另外注意的是，段子有些是带图片的，如果我们想在控制台显示图片是不现实的，所以我们直接把带有图片的段子给它剔除掉，只保存仅含文本的段子。
所以我们加入如下正则表达式来匹配一下，用到的方法是re.findall是找寻所有匹配的内容。方法的用法详情可以看前面说的正则表达式的介绍。
好，我们的正则表达式匹配语句书写如下，在原来的基础上追加如下代码
现在正则表达式在这里稍作说明
1）.*?是一个固定的搭配，.和*代表可以匹配任意无限多个字符，加上？表示使用非贪婪模式进行匹配，也就是我们会尽可能短地做匹配，以后我们还会大量用到.*?的搭配。
2）(.*?)代表一个分组，在这个正则表达式中我们匹配了五个分组，在后面的遍历item中，item[0]就代表第一个(.*?)所指代的内容，item[1]就代表第二个(.*?)所指代的内容，以此类推。
3）re.S标志代表在匹配时为点任意匹配模式，点.也可以代表换行符。
现在我们可以看一下部分运行结果
儒雅男神2015-02-1714:34:42
小时候一个一个拆着放的举个爪…
&lt;divclass=”thumb”&gt;
&lt;ahref=”/article/100705418?list=hot&amp;s=4747301″target=”_blank”onclick=”_hmt.push([‘_trackEvent’,‘post’,‘click’,‘signlePost’])”&gt;

&lt;imgsrc=”http://pic.qiushibaike.com/system/pictures/10070/100705418/medium/app100705418.jpg”alt=”糗事#100705418″/&gt;

&lt;/a&gt;
&lt;/div&gt;
7093

奇怪的名字啊2015-02-1714:49:16
回家的路，你追我赶，回家的心情和窗外的阳光一样灿烂。一路向前，离亲人越来越近了。哪里有爸妈哪里才是家，希望所有糗友的爸爸妈妈都身体健康…….
4803
这是其中的两个段子，分别打印了发布人，发布时间，发布内容，附加图片以及点赞数。
其中，附加图片的内容我把图片代码整体抠了出来，这个对应item[3]，所以我们只需要进一步判断item[3]里面是否含有img这个字样就可以进行过滤了。
好，我们再把上述代码中的for循环改为下面的样子
现在，整体的代码如下
运行一下看下效果

恩，带有图片的段子已经被剔除啦。是不是很开森？
好啦，现在最核心的部分我们已经完成啦，剩下的就是修一下边边角角的东西，我们想达到的目的是：
按下回车，读取一个段子，显示出段子的发布人，发布日期，内容以及点赞个数。
另外我们需要设计面向对象模式，引入类和方法，将代码做一下优化和封装，最后，我们的代码如下所示
好啦，大家来测试一下吧，点一下回车会输出一个段子，包括发布人，发布时间，段子内容以及点赞数，是不是感觉爽爆了！
我们第一个爬虫实战项目介绍到这里，欢迎大家继续关注，小伙伴们加油！
