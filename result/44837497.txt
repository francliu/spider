转自：http://www.cnblogs.com/liushang0419/archive/2011/05/29/2061571.html
在书中看到一有趣的东西，叫做freeList，无非就是优化Link节点类，是的newLink操作跑的更快！方法是重载运算符，重新定义new，和delete方法。英文书，原理细节描述不清，我的大致理解是，new操作的时候，要跑到内存中去取一块内存单元，CPU在跑着程序，如果能从较近的地方取内存肯定要比去远的地方要好的多。于是，就采取自行管理链表所需内存的方式，定义一freeList链表，为Link类的静态成员变量，初始&#20540;为NULL，表示没有“近内存”。调用new方法的时候，如果freelist不为空，那么就在freelist中取一块内存（近内存），如果为NULL，那么只能调用原new操作符，调用“远内存”。调用delete方法的时候，释放的内存不丢弃，而是把它加载到freelist中，供程序之后重新使用。这样的话，程序的运行就可以在小范围内存区域中存取，那么注定要比系统定义的new
delete方法要快得多吧...
具体实现代码如下

//自行管理的Link类

//即重写new,delete函数

classLink{

private:




//因为所有连接共用一个freelist，所以必须定义为静态的




staticLink&lt;Elem&gt;*freeList;//Head

public:




Elemelement;//该节点的&#20540;




Link*next;
Link(Elemelemval,Link*nextval=NULL){








element=elemval;








next=nextval;




}




Link(Link*nextval=NULL){








next=nextval;




}




void*operatornew(size_t);



//Overload




voidoperatordelete(void*);
//Overload

};

//静态变量的初始化

template&lt;classElem&gt;

Link&lt;Elem&gt;*Link&lt;Elem&gt;::freeList=NULL;

//重载new运算符

template&lt;classElem&gt;

void*Link&lt;Elem&gt;::operatornew(size_t){




if(freeList==NULL)return::newLink;
Link&lt;Elem&gt;*temp=freeList;//Reuse




freeList=freeList-&gt;next;




returntemp;


//ReturntheLink

}

template&lt;classElem&gt;

voidLink&lt;Elem&gt;::operatordelete(void*ptr){




((Link&lt;Elem&gt;*)ptr)-&gt;next=freeList;




freeList=(Link&lt;Elem&gt;*)ptr;

}
转自：http://www.cnblogs.com/liushang0419/archive/2011/05/29/2061571.html
在书中看到一有趣的东西，叫做freeList，无非就是优化Link节点类，是的newLink操作跑的更快！方法是重载运算符，重新定义new，和delete方法。英文书，原理细节描述不清，我的大致理解是，new操作的时候，要跑到内存中去取一块内存单元，CPU在跑着程序，如果能从较近的地方取内存肯定要比去远的地方要好的多。于是，就采取自行管理链表所需内存的方式，定义一freeList链表，为Link类的静态成员变量，初始&#20540;为NULL，表示没有“近内存”。调用new方法的时候，如果freelist不为空，那么就在freelist中取一块内存（近内存），如果为NULL，那么只能调用原new操作符，调用“远内存”。调用delete方法的时候，释放的内存不丢弃，而是把它加载到freelist中，供程序之后重新使用。这样的话，程序的运行就可以在小范围内存区域中存取，那么注定要比系统定义的new
delete方法要快得多吧...
具体实现代码如下

//自行管理的Link类

//即重写new,delete函数

classLink{

private:




//因为所有连接共用一个freelist，所以必须定义为静态的




staticLink&lt;Elem&gt;*freeList;//Head

public:




Elemelement;//该节点的&#20540;




Link*next;
Link(Elemelemval,Link*nextval=NULL){








element=elemval;








next=nextval;




}




Link(Link*nextval=NULL){








next=nextval;




}




void*operatornew(size_t);



//Overload




voidoperatordelete(void*);
//Overload

};

//静态变量的初始化

template&lt;classElem&gt;

Link&lt;Elem&gt;*Link&lt;Elem&gt;::freeList=NULL;

//重载new运算符

template&lt;classElem&gt;

void*Link&lt;Elem&gt;::operatornew(size_t){




if(freeList==NULL)return::newLink;
Link&lt;Elem&gt;*temp=freeList;//Reuse




freeList=freeList-&gt;next;




returntemp;


//ReturntheLink

}

template&lt;classElem&gt;

voidLink&lt;Elem&gt;::operatordelete(void*ptr){




((Link&lt;Elem&gt;*)ptr)-&gt;next=freeList;




freeList=(Link&lt;Elem&gt;*)ptr;

}
