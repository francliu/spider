本文目的
最近一段时间在Coursera上学习DataAnalysis，里面有个assignment涉及到了决策树，所以参考了一些决策树方面的资料，现在将学习过程的笔记整理记录于此，作为备忘。

算法原理
决策树（DecisionTree）是一种简单但是广泛使用的分类器。通过训练数据构建决策树，可以高效的对未知的数据进行分类。决策数有两大优点：1）决策树模型可以读性好，具有描述性，有助于人工分析；2）效率高，决策树只需要一次构建，反复使用，每一次预测的最大计算次数不超过决策树的深度。

如何预测
先看看下面的数据表&#26684;：
ID
拥有房产（是/否）
婚姻情况（单身，已婚，离婚）
年收入（单位：千元）
无法偿还债务（是/否）
1
是
单身
125
否
2
否
已婚
100
否
3
否
单身
70
否
4
是
已婚
120
否
5
否
离婚
95
是
6
否
已婚
60
否
7
是
离婚
220
否
8
否
单身
85
是
9
否
已婚
75
否
10
否
单身
90
是
上表根据历史数据，记录已有的用户是否可以偿还债务，以及相关的信息。通过该数据，构建的决策树如下：

比如新来一个用户：无房产，单身，年收入55K，那么根据上面的决策树，可以预测他无法偿还债务（蓝色虚线路径）。从上面的决策树，还可以知道是否拥有房产可以很大的决定用户是否可以偿还债务，对借贷业务具有指导意义。

基本步骤
决策树构建的基本步骤如下：
1.开始，所有记录看作一个节点
2.遍历每个变量的每一种分割方式，找到最好的分割点
3.分割成两个节点N1和N2
4.对N1和N2分别继续执行2-3步，直到每个节点足够“纯”为止
决策树的变量可以有两种：
1）数字型（Numeric）：变量类型是整数或浮点数，如前面例子中的“年收入”。用“&gt;=”，“&gt;”,“&lt;”或“&lt;=”作为分割条件（排序后，利用已有的分割情况，可以优化分割算法的时间复杂度）。
2）名称型（Nominal）：类&#20284;编程语言中的枚举类型，变量只能重有限的选项中选取，比如前面例子中的“婚姻情况”，只能是“单身”，“已婚”或“离婚”。使用“=”来分割。
如何评估分割点的好坏？如果一个分割点可以将当前的所有节点分为两类，使得每一类都很“纯”，也就是同一类的记录较多，那么就是一个好分割点。比如上面的例子，“拥有房产”，可以将记录分成了两类，“是”的节点全部都可以偿还债务，非常“纯”；“否”的节点，可以偿还贷款和无法偿还贷款的人都有，不是很“纯”，但是两个节点加起来的纯度之和与原始节点的纯度之差最大，所以按照这种方法分割。构建决策树采用贪心算法，只考虑当前纯度差最大的情况作为分割点。


量化纯度
前面讲到，决策树是根据“纯度”来构建的，如何量化纯度呢？这里介绍三种纯度计算方法。如果记录被分为n类，每一类的比例P(i)=第i类的数目/总数目。还是拿上面的例子，10个数据中可以偿还债务的记录比例为P(1)=7/10=0.7，无法偿还的为P(2)=3/10=0.3，N=2。
Gini不纯度

熵（Entropy）

错误率

上面的三个公式均是&#20540;越大，表示越“不纯”，越小表示越“纯”。三种公式只需要取一种即可，实践证明三种公司的选择对最终分类准确率的影响并不大，一般使用熵公式。
纯度差，也称为信息增益（InformationGain），公式如下：

其中，I代表不纯度（也就是上面三个公式的任意一种），K代表分割的节点数，一般K=2。vj表示子节点中的记录数目。上面公式实际上就是当前节点的不纯度减去子节点不纯度的加权平均数，权重由子节点记录数与当前节点记录数的比例决定。

停止条件
决策树的构建过程是一个递归的过程，所以需要确定停止条件，否则过程将不会结束。一种最直观的方式是当每个子节点只有一种类型的记录时停止，但是这样往往会使得树的节点过多，导致过拟合问题（Overfitting）。另一种可行的方法是当前节点中的记录数低于一个最小的阀&#20540;，那么就停止分割，将max(P(i))对应的分类作为当前叶节点的分类。

过渡拟合
采用上面算法生成的决策树在事件中往往会导致过滤拟合。也就是该决策树对训练数据可以得到很低的错误率，但是运用到测试数据上却得到非常高的错误率。过渡拟合的原因有以下几点：

优化方案1：修剪枝叶
决策树过渡拟合往往是因为太过“茂盛”，也就是节点过多，所以需要裁剪（PruneTree）枝叶。裁剪枝叶的策略对决策树正确率的影响很大。主要有两种裁剪策略。
前置裁剪在构建决策树的过程时，提前停止。那么，会将切分节点的条件设置的很苛刻，导致决策树很短小。结果就是决策树无法达到最优。实践证明这中策略无法得到较好的结果。
后置裁剪决策树构建好后，然后才开始裁剪。采用两种方法：1）用单一叶节点代替整个子树，叶节点的分类采用子树中最主要的分类；2）将一个字数完全替代另外一颗子树。后置裁剪有个问题就是计算效率，有些节点计算后就被裁剪了，导致有点浪费。


优化方案2：K-FoldCrossValidation
首先计算出整体的决策树T，叶节点个数记作N，设i属于[1,N]。对每个i，使用K-FoldValidataion方法计算决策树，并裁剪到i个节点，计算错误率，最后求出平均错误率。这样可以用具有最小错误率对应的i作为最终决策树的大小，对原始决策树进行裁剪，得到最优决策树。

优化方案3：RandomForest
RandomForest是用训练数据随机的计算出许多决策树，形成了一个森林。然后用这个森林对未知数据进行预测，选取投票最多的分类。实践证明，此算法的错误率得到了经一步的降低。这种方法背后的原理可以用“三个臭皮匠定一个诸葛亮”这句谚语来概括。一颗树预测正确的概率可能不高，但是集体预测正确的概率却很高。


准确率估计
决策树T构建好后，需要估计预测准确率。直观说明，比如N条测试数据，X预测正确的记录数，那么可以估计acc=X/N为T的准确率。但是，这样不是很科学。因为我们是通过样本估计的准确率，很有可能存在偏差。所以，比较科学的方法是估计一个准确率的区间，这里就要用到统计学中的置信区间（ConfidenceInterval）。
设T的准确率p是一个客观存在的&#20540;，X的概率分布为X~B(N,p)，即X遵循概率为p，次数为N的二项分布（BinomialDistribution），期望E(X)=N*p，方差Var(X)=N*p*(1-p)。由于当N很大时，二项分布可以近&#20284;有正太分布（NormalDistribution）计算，一般N会很大，所以X~N(np,n*p*(1-p))。可以算出，acc=
X/N的期望E(acc)=E(X/N)=E(X)/N=p，方差Var(acc)=Var(X/N)=
Var(X)/N2=p*(1-p)/N，所以acc~N(p,p*(1-p)/N)。这样，就可以通过正太分布的置信区间的计算方式计算执行区间了。
正太分布的置信区间求解如下：
1）将acc标准化，即
2）选择置信水平α=95%，或其他&#20540;，这取决于你需要对这个区间有多自信。一般来说，α越大，区间越大。
3）求出α/2和1-α/2对应的标准正太分布的统计量
和
（均为常量）。然后解下面关于p的不等式。acc可以有样本估计得出。即可以得到关于p的执行区间


参考资料
[1]《数据挖掘导论》Chapter4Classification:BasicConcepts,DecisionTrees,andModelEvaluation，Pang-NingTan&amp;MichealSteinbach&amp;VipinKumar著
[2]DataAnalyis,LecturesinWeek6,7atCoursera
[3]《集体智慧编程》Chapter7ModelingwithDecisionTree，TobySegaran著
[4]《HeadFirstStatistics》Chapter12置信区间的构造,DawnGriffiths著
本文目的
最近一段时间在Coursera上学习DataAnalysis，里面有个assignment涉及到了决策树，所以参考了一些决策树方面的资料，现在将学习过程的笔记整理记录于此，作为备忘。

算法原理
决策树（DecisionTree）是一种简单但是广泛使用的分类器。通过训练数据构建决策树，可以高效的对未知的数据进行分类。决策数有两大优点：1）决策树模型可以读性好，具有描述性，有助于人工分析；2）效率高，决策树只需要一次构建，反复使用，每一次预测的最大计算次数不超过决策树的深度。

如何预测
先看看下面的数据表&#26684;：
ID
拥有房产（是/否）
婚姻情况（单身，已婚，离婚）
年收入（单位：千元）
无法偿还债务（是/否）
1
是
单身
125
否
2
否
已婚
100
否
3
否
单身
70
否
4
是
已婚
120
否
5
否
离婚
95
是
6
否
已婚
60
否
7
是
离婚
220
否
8
否
单身
85
是
9
否
已婚
75
否
10
否
单身
90
是
上表根据历史数据，记录已有的用户是否可以偿还债务，以及相关的信息。通过该数据，构建的决策树如下：

比如新来一个用户：无房产，单身，年收入55K，那么根据上面的决策树，可以预测他无法偿还债务（蓝色虚线路径）。从上面的决策树，还可以知道是否拥有房产可以很大的决定用户是否可以偿还债务，对借贷业务具有指导意义。

基本步骤
决策树构建的基本步骤如下：
1.开始，所有记录看作一个节点
2.遍历每个变量的每一种分割方式，找到最好的分割点
3.分割成两个节点N1和N2
4.对N1和N2分别继续执行2-3步，直到每个节点足够“纯”为止
决策树的变量可以有两种：
1）数字型（Numeric）：变量类型是整数或浮点数，如前面例子中的“年收入”。用“&gt;=”，“&gt;”,“&lt;”或“&lt;=”作为分割条件（排序后，利用已有的分割情况，可以优化分割算法的时间复杂度）。
2）名称型（Nominal）：类&#20284;编程语言中的枚举类型，变量只能重有限的选项中选取，比如前面例子中的“婚姻情况”，只能是“单身”，“已婚”或“离婚”。使用“=”来分割。
如何评估分割点的好坏？如果一个分割点可以将当前的所有节点分为两类，使得每一类都很“纯”，也就是同一类的记录较多，那么就是一个好分割点。比如上面的例子，“拥有房产”，可以将记录分成了两类，“是”的节点全部都可以偿还债务，非常“纯”；“否”的节点，可以偿还贷款和无法偿还贷款的人都有，不是很“纯”，但是两个节点加起来的纯度之和与原始节点的纯度之差最大，所以按照这种方法分割。构建决策树采用贪心算法，只考虑当前纯度差最大的情况作为分割点。


量化纯度
前面讲到，决策树是根据“纯度”来构建的，如何量化纯度呢？这里介绍三种纯度计算方法。如果记录被分为n类，每一类的比例P(i)=第i类的数目/总数目。还是拿上面的例子，10个数据中可以偿还债务的记录比例为P(1)=7/10=0.7，无法偿还的为P(2)=3/10=0.3，N=2。
Gini不纯度

熵（Entropy）

错误率

上面的三个公式均是&#20540;越大，表示越“不纯”，越小表示越“纯”。三种公式只需要取一种即可，实践证明三种公司的选择对最终分类准确率的影响并不大，一般使用熵公式。
纯度差，也称为信息增益（InformationGain），公式如下：

其中，I代表不纯度（也就是上面三个公式的任意一种），K代表分割的节点数，一般K=2。vj表示子节点中的记录数目。上面公式实际上就是当前节点的不纯度减去子节点不纯度的加权平均数，权重由子节点记录数与当前节点记录数的比例决定。

停止条件
决策树的构建过程是一个递归的过程，所以需要确定停止条件，否则过程将不会结束。一种最直观的方式是当每个子节点只有一种类型的记录时停止，但是这样往往会使得树的节点过多，导致过拟合问题（Overfitting）。另一种可行的方法是当前节点中的记录数低于一个最小的阀&#20540;，那么就停止分割，将max(P(i))对应的分类作为当前叶节点的分类。

过渡拟合
采用上面算法生成的决策树在事件中往往会导致过滤拟合。也就是该决策树对训练数据可以得到很低的错误率，但是运用到测试数据上却得到非常高的错误率。过渡拟合的原因有以下几点：

优化方案1：修剪枝叶
决策树过渡拟合往往是因为太过“茂盛”，也就是节点过多，所以需要裁剪（PruneTree）枝叶。裁剪枝叶的策略对决策树正确率的影响很大。主要有两种裁剪策略。
前置裁剪在构建决策树的过程时，提前停止。那么，会将切分节点的条件设置的很苛刻，导致决策树很短小。结果就是决策树无法达到最优。实践证明这中策略无法得到较好的结果。
后置裁剪决策树构建好后，然后才开始裁剪。采用两种方法：1）用单一叶节点代替整个子树，叶节点的分类采用子树中最主要的分类；2）将一个字数完全替代另外一颗子树。后置裁剪有个问题就是计算效率，有些节点计算后就被裁剪了，导致有点浪费。


优化方案2：K-FoldCrossValidation
首先计算出整体的决策树T，叶节点个数记作N，设i属于[1,N]。对每个i，使用K-FoldValidataion方法计算决策树，并裁剪到i个节点，计算错误率，最后求出平均错误率。这样可以用具有最小错误率对应的i作为最终决策树的大小，对原始决策树进行裁剪，得到最优决策树。

优化方案3：RandomForest
RandomForest是用训练数据随机的计算出许多决策树，形成了一个森林。然后用这个森林对未知数据进行预测，选取投票最多的分类。实践证明，此算法的错误率得到了经一步的降低。这种方法背后的原理可以用“三个臭皮匠定一个诸葛亮”这句谚语来概括。一颗树预测正确的概率可能不高，但是集体预测正确的概率却很高。


准确率估计
决策树T构建好后，需要估计预测准确率。直观说明，比如N条测试数据，X预测正确的记录数，那么可以估计acc=X/N为T的准确率。但是，这样不是很科学。因为我们是通过样本估计的准确率，很有可能存在偏差。所以，比较科学的方法是估计一个准确率的区间，这里就要用到统计学中的置信区间（ConfidenceInterval）。
设T的准确率p是一个客观存在的&#20540;，X的概率分布为X~B(N,p)，即X遵循概率为p，次数为N的二项分布（BinomialDistribution），期望E(X)=N*p，方差Var(X)=N*p*(1-p)。由于当N很大时，二项分布可以近&#20284;有正太分布（NormalDistribution）计算，一般N会很大，所以X~N(np,n*p*(1-p))。可以算出，acc=
X/N的期望E(acc)=E(X/N)=E(X)/N=p，方差Var(acc)=Var(X/N)=
Var(X)/N2=p*(1-p)/N，所以acc~N(p,p*(1-p)/N)。这样，就可以通过正太分布的置信区间的计算方式计算执行区间了。
正太分布的置信区间求解如下：
1）将acc标准化，即
2）选择置信水平α=95%，或其他&#20540;，这取决于你需要对这个区间有多自信。一般来说，α越大，区间越大。
3）求出α/2和1-α/2对应的标准正太分布的统计量
和
（均为常量）。然后解下面关于p的不等式。acc可以有样本估计得出。即可以得到关于p的执行区间


参考资料
[1]《数据挖掘导论》Chapter4Classification:BasicConcepts,DecisionTrees,andModelEvaluation，Pang-NingTan&amp;MichealSteinbach&amp;VipinKumar著
[2]DataAnalyis,LecturesinWeek6,7atCoursera
[3]《集体智慧编程》Chapter7ModelingwithDecisionTree，TobySegaran著
[4]《HeadFirstStatistics》Chapter12置信区间的构造,DawnGriffiths著
