相关函数：longjmp,siglongjmp,setjmp

表头文件：#include&lt;setjmp.h&gt;

函数定义：intsigsetjmp(sigjmp_bufenv,intsavesigs)

函数说明：sigsetjmp()会保存目前堆栈环境，然后将目前的地址作一个记号，而在程序其他地方调用siglongjmp()时便会直接跳到这个记号位置，然后还原堆栈，继续程序好执行。

参数env为用来保存目前堆栈环境，一般声明为全局变量

参数savesigs若为非0则代表搁置的信号集合也会一块保存

当sigsetjmp()返回0时代表已经做好记号上，若返回非0则代表由siglongjmp（）跳转回来。

返回&#20540;
：返回0代表局促存好目前的堆栈环境，随时可供siglongjmp()调用，若返回非0&#20540;则代表由siglongjmp()返回
附加说明：setjmp()和sigsetjmp()会令程序不易令人理解，请尽量不要使用

//测试代码

#include&lt;unistd.h&gt;

#include&lt;setjmp.h&gt;

#include&lt;stdlib.h&gt;

#include&lt;stdlib.h&gt;

#include&lt;signal.h&gt;

staticjmp_bufenv_alrm;

voidalarm_fun()

{

printf(&quot;timeout/n&quot;);

siglongjmp(env_alrm,1);

}

inttest_alrm()

{

inttest_value=0;

signal(SIGALRM,alarm_fun);

if(sigsetjmp(env_alrm,1)!=0)




{








alarm(0);








signal(SIGALRM,SIG_IGN);








return-1;


/*timeout*/




}

alarm(5);//5sec;

sleep(10);//改变这里看效果

alarm(0);

signal(SIGALRM,SIG_IGN);//忽略信号

return1;

}

intmain()

{

printf(&quot;%d&quot;,test_alrm());

return0;

}
本文来自CSDN博客，转载请标明出处：http://blog.csdn.net/ljx0305/archive/2008/09/09/2904221.aspx


在信号处理函数调用之前，系统自动阻塞当前被处理的信号以防止接下来发生的该类信号中断信号处理函数，这使得使用longjmp从信号处理函数返回时，出现是否恢复信号掩码的问题。有些系统恢复，有些系统不恢复，POSIX.1对此没有指示，而是提供了另外两个函数sigsetjmp和siglongjmp。当从信号处理函数跳出时，应该使用siglongjmp函数。
intsigsetjmp(sigjmp_buf*env,int
savemask);
voidsiglongjmp(sigjmp_buf*env,int
val);
当调用sigsetjmp时，参数savemask指示是否将当前进程的信号掩码存储在env中；
在调用siglongjmp时，若env中有之前存储的信号掩码，则恢复进程的信号掩码。
在信号处理函数中调用siglongjmp时，需要特殊的保护方案：
通常在sigsetjmp调用之前部署信号处理函数，若在sigsetjmp初始化sigjmp_buf之前，信号发生，信号处理函数中的siglongjmp被调用，这将会出错。需要提供一种保护机制，保证在sigsetjmp完成之前，信号处理函数中的siglongjmp不会被调用。ISOC提供了一种sig_automic_t可以原子的写。全局定义一个sig_atomic_t类型的数据canjmp，初始&#20540;为0，在sigsetjmp完成之后将其&#20540;修改为1，在信号处理函数里面当且仅当canjmp不为0时，才回调用siglongjmp，这样就确保了在sigsetjmp调用之后才会对siglongjmp调用。通常也将canjmp限定为volatile（它被两个线程同时访问：主线程和信号处理函数）。
相关函数：longjmp,siglongjmp,setjmp

表头文件：#include&lt;setjmp.h&gt;

函数定义：intsigsetjmp(sigjmp_bufenv,intsavesigs)

函数说明：sigsetjmp()会保存目前堆栈环境，然后将目前的地址作一个记号，而在程序其他地方调用siglongjmp()时便会直接跳到这个记号位置，然后还原堆栈，继续程序好执行。

参数env为用来保存目前堆栈环境，一般声明为全局变量

参数savesigs若为非0则代表搁置的信号集合也会一块保存

当sigsetjmp()返回0时代表已经做好记号上，若返回非0则代表由siglongjmp（）跳转回来。

返回&#20540;
：返回0代表局促存好目前的堆栈环境，随时可供siglongjmp()调用，若返回非0&#20540;则代表由siglongjmp()返回
附加说明：setjmp()和sigsetjmp()会令程序不易令人理解，请尽量不要使用

//测试代码

#include&lt;unistd.h&gt;

#include&lt;setjmp.h&gt;

#include&lt;stdlib.h&gt;

#include&lt;stdlib.h&gt;

#include&lt;signal.h&gt;

staticjmp_bufenv_alrm;

voidalarm_fun()

{

printf(&quot;timeout/n&quot;);

siglongjmp(env_alrm,1);

}

inttest_alrm()

{

inttest_value=0;

signal(SIGALRM,alarm_fun);

if(sigsetjmp(env_alrm,1)!=0)




{








alarm(0);








signal(SIGALRM,SIG_IGN);








return-1;


/*timeout*/




}

alarm(5);//5sec;

sleep(10);//改变这里看效果

alarm(0);

signal(SIGALRM,SIG_IGN);//忽略信号

return1;

}

intmain()

{

printf(&quot;%d&quot;,test_alrm());

return0;

}
本文来自CSDN博客，转载请标明出处：http://blog.csdn.net/ljx0305/archive/2008/09/09/2904221.aspx


在信号处理函数调用之前，系统自动阻塞当前被处理的信号以防止接下来发生的该类信号中断信号处理函数，这使得使用longjmp从信号处理函数返回时，出现是否恢复信号掩码的问题。有些系统恢复，有些系统不恢复，POSIX.1对此没有指示，而是提供了另外两个函数sigsetjmp和siglongjmp。当从信号处理函数跳出时，应该使用siglongjmp函数。
intsigsetjmp(sigjmp_buf*env,int
savemask);
voidsiglongjmp(sigjmp_buf*env,int
val);
当调用sigsetjmp时，参数savemask指示是否将当前进程的信号掩码存储在env中；
在调用siglongjmp时，若env中有之前存储的信号掩码，则恢复进程的信号掩码。
在信号处理函数中调用siglongjmp时，需要特殊的保护方案：
通常在sigsetjmp调用之前部署信号处理函数，若在sigsetjmp初始化sigjmp_buf之前，信号发生，信号处理函数中的siglongjmp被调用，这将会出错。需要提供一种保护机制，保证在sigsetjmp完成之前，信号处理函数中的siglongjmp不会被调用。ISOC提供了一种sig_automic_t可以原子的写。全局定义一个sig_atomic_t类型的数据canjmp，初始&#20540;为0，在sigsetjmp完成之后将其&#20540;修改为1，在信号处理函数里面当且仅当canjmp不为0时，才回调用siglongjmp，这样就确保了在sigsetjmp调用之后才会对siglongjmp调用。通常也将canjmp限定为volatile（它被两个线程同时访问：主线程和信号处理函数）。
