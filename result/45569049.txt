问题描述：
什么是无向图的最大割？
有无向图G=(V,E).设U是V的一个子集。对任意的顶点u,v如果(u,v)是E中的一条边，如果u在U中，则v一定不
在U中，这样的边称为顶点集合U的一个割边。那个这个顶点集合U所有的割边就构成图G的一个割。最大割
的意思，就是说含割边最多的割。
编程任务：
给定一个无向图G，计算G的最大割。
数据输入：
第一行2个整数n,e表示顶点个数和边个数。下面e行是边,每行2个整数对应顶点编号。顶点编号从1-n;
数据输出：
第一行是最大割的边数。
第二行是顶点集的向量对应1-n,0表示不在集合，1表示在集合。
解题思想：
这道题也是一个子集选取问题，所以它的解空间树是一个子集树。这个集合n个元素，每个元素可以有
选取或不选取2种选择，所以共用2^n个子集。
这里用分支界限法。
分支界限法：类&#20284;宽度优先搜索，它和回溯的区别在与，它每次都取一个节点，然后把它的所有的儿子节点
都扩展，然后加到队列中，所以说，分支界限法，这种扩展方式导致没个节点最多一次扩展机会，它在扩展
它的分支的时候，根据一定的界限条件，或淘汰不可能产生最优解的分支。
这里的队列有2种，一种是普通队列就是先进先出。
另一种就是优先级队列，它会根据优先级进行出队，这和Windows中的消息队列类&#20284;。
在C&#43;&#43;中，STL中priority_queue就是优先级队列。queue是普通队列。优先级队列可以用最大堆或最小堆
实现。
#include&lt;iostream&gt;

#include&lt;queue&gt;

usingnamespacestd;
intn,e;//顶点数和边数

intGraph[200][200];//存储图的邻接矩阵

intbestcut=0;//存储最优解

intbestx[200];//存储最优解

structHeapNode//队列节点

{

HeapNode()

{







memset(x,0,sizeof(x));

}

inti;

intcut;

intedges;

intx[200];




booloperator&lt;(constHeapNode&amp;a)const

{



returncut&lt;a.cut;

}

};

voidmaxcut()

{




HeapNodeE;

priority_queue&lt;HeapNode&gt;Q;

E.cut=0;

E.edges=e;

E.i=0;

while(1)

{



if(E.i==n)



{












if(E.cut&gt;bestcut)












{





bestcut=E.cut;





memcpy(bestx,E.x,sizeof(int)*n);












}



}



else



{




HeapNodetemp=E;




inti=E.i;




for(intj=0;j&lt;n;j&#43;&#43;)




{





if(Graph[i][j])





{






if(temp.x[j])






{







temp.cut--;






}






else






{







temp.cut&#43;&#43;;







temp.edges--;






}





}




}




temp.x[i]=1;












temp.i&#43;&#43;;




Q.push(temp);




if(E.cut&#43;E.edges&gt;bestcut)//界限条件




{
















E.i&#43;&#43;;





Q.push(E);




}



}



if(Q.size()==0)//队列为空跳出循环



{




break;



}



E=Q.top();



Q.pop();

}

}

intmain()

{




intu,v;

cin&gt;&gt;n&gt;&gt;e;

for(inti=0;i&lt;e;i&#43;&#43;)

{



cin&gt;&gt;u&gt;&gt;v;



Graph[u-1][v-1]=1;



Graph[v-1][u-1]=1;

}




maxcut();

cout&lt;&lt;bestcut&lt;&lt;endl;

for(intk=0;k&lt;n;k&#43;&#43;)

{



cout&lt;&lt;bestx[k]&lt;&lt;'';

}

cout&lt;&lt;endl;

return0;

}
输入实例
718

14

15

16

17

23

24

25

26

27

34

35

36

37

45

46

56

57

67
输出实例：
12

1110100
问题描述：
什么是无向图的最大割？
有无向图G=(V,E).设U是V的一个子集。对任意的顶点u,v如果(u,v)是E中的一条边，如果u在U中，则v一定不
在U中，这样的边称为顶点集合U的一个割边。那个这个顶点集合U所有的割边就构成图G的一个割。最大割
的意思，就是说含割边最多的割。
编程任务：
给定一个无向图G，计算G的最大割。
数据输入：
第一行2个整数n,e表示顶点个数和边个数。下面e行是边,每行2个整数对应顶点编号。顶点编号从1-n;
数据输出：
第一行是最大割的边数。
第二行是顶点集的向量对应1-n,0表示不在集合，1表示在集合。
解题思想：
这道题也是一个子集选取问题，所以它的解空间树是一个子集树。这个集合n个元素，每个元素可以有
选取或不选取2种选择，所以共用2^n个子集。
这里用分支界限法。
分支界限法：类&#20284;宽度优先搜索，它和回溯的区别在与，它每次都取一个节点，然后把它的所有的儿子节点
都扩展，然后加到队列中，所以说，分支界限法，这种扩展方式导致没个节点最多一次扩展机会，它在扩展
它的分支的时候，根据一定的界限条件，或淘汰不可能产生最优解的分支。
这里的队列有2种，一种是普通队列就是先进先出。
另一种就是优先级队列，它会根据优先级进行出队，这和Windows中的消息队列类&#20284;。
在C&#43;&#43;中，STL中priority_queue就是优先级队列。queue是普通队列。优先级队列可以用最大堆或最小堆
实现。
#include&lt;iostream&gt;

#include&lt;queue&gt;

usingnamespacestd;
intn,e;//顶点数和边数

intGraph[200][200];//存储图的邻接矩阵

intbestcut=0;//存储最优解

intbestx[200];//存储最优解

structHeapNode//队列节点

{

HeapNode()

{







memset(x,0,sizeof(x));

}

inti;

intcut;

intedges;

intx[200];




booloperator&lt;(constHeapNode&amp;a)const

{



returncut&lt;a.cut;

}

};

voidmaxcut()

{




HeapNodeE;

priority_queue&lt;HeapNode&gt;Q;

E.cut=0;

E.edges=e;

E.i=0;

while(1)

{



if(E.i==n)



{












if(E.cut&gt;bestcut)












{





bestcut=E.cut;





memcpy(bestx,E.x,sizeof(int)*n);












}



}



else



{




HeapNodetemp=E;




inti=E.i;




for(intj=0;j&lt;n;j&#43;&#43;)




{





if(Graph[i][j])





{






if(temp.x[j])






{







temp.cut--;






}






else






{







temp.cut&#43;&#43;;







temp.edges--;






}





}




}




temp.x[i]=1;












temp.i&#43;&#43;;




Q.push(temp);




if(E.cut&#43;E.edges&gt;bestcut)//界限条件




{
















E.i&#43;&#43;;





Q.push(E);




}



}



if(Q.size()==0)//队列为空跳出循环



{




break;



}



E=Q.top();



Q.pop();

}

}

intmain()

{




intu,v;

cin&gt;&gt;n&gt;&gt;e;

for(inti=0;i&lt;e;i&#43;&#43;)

{



cin&gt;&gt;u&gt;&gt;v;



Graph[u-1][v-1]=1;



Graph[v-1][u-1]=1;

}




maxcut();

cout&lt;&lt;bestcut&lt;&lt;endl;

for(intk=0;k&lt;n;k&#43;&#43;)

{



cout&lt;&lt;bestx[k]&lt;&lt;'';

}

cout&lt;&lt;endl;

return0;

}
输入实例
718

14

15

16

17

23

24

25

26

27

34

35

36

37

45

46

56

57

67
输出实例：
12

1110100
