之前写的模式帖子：
设计模式系列目录
今天说一下命令模式
命令模式将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其它对象。命令模式也支持可撤销的操作。这样将“行为请求者”与“行为实现者”解耦，

实现松耦合
我们来看一个类图

电视机遥控器就是一个典型的命令模式应用实例：

电视机是请求的接收者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。

抽象命令角色由一个命令接口来扮演，有三个具体的命令类实现了一个抽象命令接口，这三个具体命令类分别代表三个操作：打开电视、

关闭电视、和切换频道。
再看一下时序图

我们可以看到命令模式的执行顺序
1.Client创建一个ConcreteCommand对象并指定他的Receiver对象

2.某个Invoker对象存储该ConcreteCommand对象

3.该Invoker通过调用Command对象的Execute操作来提交一个请求。若该命令是可撤销的，ConcreteCommand就在执行Execute操作之前存储
当前状态以用于取消该命令

4.ConcreteCommand对象对调用它的Receiver的一些操作以执行该请求
看一下代码
执行结果


模式优点

1.降低对象之间的耦合度。

2.新的命令可以很容易地加入到系统中。

3.可以比较容易地设计一个组合命令。

4.调用同一方法实现不同的功能
模式缺点

1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。

2.系统需要在不同的时间指定请求、将请求排队和执行请求。

3.系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。

4.系统需要将一组操作组合在一起，即支持宏命令。
之前写的模式帖子：
设计模式系列目录
今天说一下命令模式
命令模式将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其它对象。命令模式也支持可撤销的操作。这样将“行为请求者”与“行为实现者”解耦，

实现松耦合
我们来看一个类图

电视机遥控器就是一个典型的命令模式应用实例：

电视机是请求的接收者，遥控器是请求的发送者，遥控器上有一些按钮，不同的按钮对应电视机的不同操作。

抽象命令角色由一个命令接口来扮演，有三个具体的命令类实现了一个抽象命令接口，这三个具体命令类分别代表三个操作：打开电视、

关闭电视、和切换频道。
再看一下时序图

我们可以看到命令模式的执行顺序
1.Client创建一个ConcreteCommand对象并指定他的Receiver对象

2.某个Invoker对象存储该ConcreteCommand对象

3.该Invoker通过调用Command对象的Execute操作来提交一个请求。若该命令是可撤销的，ConcreteCommand就在执行Execute操作之前存储
当前状态以用于取消该命令

4.ConcreteCommand对象对调用它的Receiver的一些操作以执行该请求
看一下代码
执行结果


模式优点

1.降低对象之间的耦合度。

2.新的命令可以很容易地加入到系统中。

3.可以比较容易地设计一个组合命令。

4.调用同一方法实现不同的功能
模式缺点

1.系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。

2.系统需要在不同的时间指定请求、将请求排队和执行请求。

3.系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。

4.系统需要将一组操作组合在一起，即支持宏命令。
