转自:http://hi.baidu.com/qufuping1981/blog/item/81120df0e27091aca40f5213.html
一、new与opeartornew
首先问大家一个问题：new与opeartornew有何区别？如果你回答：operatornew就是new的重载运算符呗!
回答错误，new是C&#43;&#43;内部定义的一种操作符，总像sizeof一样是一种操作符，而operatornew是实作者定义的一个全局函数。不信，你可以写下面的语句：
int*p=operatornew(//这时候，用的是VC的话，就会自动提示该函数的原型。嗯，有七个版本之多。好，现在我们弄清楚了，一个是操作符，一个是全局函数，而不是原来所以为的是重载的关系。正同我们看看他们各有什么用？
new操作符作了三件事.语句:
MyClass*p=newMyClass;的伪码大至如下：
void*memory=operatornew(sizeof(MyClass));//1调用全局函数:operatornew

MyClass::MyClass();












//2调用构造函数创建对象，如带参数的话
//调用的就是带参构造函数
MyClass*p=static_cast&lt;MyClass*&gt;(memory);//3转换指针类型，并赋给p
我们可以猜测到真正的内存分配是在operatornew函数中完成的。
operatornew函数其之的原型是：

void*operatornew(size_tsize)throw(std::bad_alloc)

返回类型是void*，参数类型是：size_t，是一个在系统头文件&lt;cstddef&gt;中定义的typedef。sizeof()的操作结果就是该类型的。
void*operatornew(size_tsize)大至如下：
void*p;

while((p=malloc(size))==0)

{




//内存分配失败。



if(_callnewh(size)==0)



{









_Nomemory();



}

}
returnp;
如果内存分配成功则直接返回所分配的内存的首地址。不然就循环调用if语句，首先判断_callnewh(size)调用是否成功，不成功则调用_Nomemory()，_Nomemory()实际上作用是抛出一个异常，所抛出的是一个标准库中定义的std::bad_alloc对象。_callnewh()函数首先会判断一个全局变量_pnhHeap是否为零，_pnhHeap存放的是一个函数指针，我们可以为new操作指定一个出错处理函数，也就是说当new分配内存失败时就会调用我们刚才指定的函数，出错处理函数原型必须是无参且返回类型是void的函数。可以通过全局函数set_new_handler
(new_handlerpnew)来设定我们的出错处理函数，而他又是通过调用_PNH_set_new_handler(_PNHpnh)来实现设定我们的出错处理函数的。下面是_PNH_set_new_handler(_PNHpnh)的定义：
_PNH__cdecl_set_new_handler(







_PNHpnh







)

{







_PNHpnhOld;
/*locktheheap*/







_mlock(_HEAP_LOCK);
pnhOld=_pnhHeap;//把原来在起作用的出错处理函数的指针赋给pnhOld







_pnhHeap=pnh;



//我们新设定的出错处理函数的指针。
/*unlocktheheap*/







_munlock(_HEAP_LOCK);
return(pnhOld);



//返回原来旧的出错处理函数的指针。

}
回到我们的_callnewh()函数，如果在MyClass*p=newMyClass;语句之前设定了出错处理函数，那么这里的_pnhHeap就不为零，接着就会调用(*_pnhHeap)()即我们的出错处理函数，否则返回零。接着调用_Nomemory()抛出异常。这个出错处理函数是个重要的函数，设计的好的话可以做很多事情，因为他是在while中被调用的有多次被调用的机会。在我们的出错处理函数中如果没有使用exit(1)等退出程序的语句，也没有抛出异常的话，执行完我们的出错处理函数后，又回到while((p
=malloc(size))==0)，再次分配内存并判断，还是失败的话，再次调用我们的出错处理函数，当然这个出错处理函数和上面的那个出错处理函数不一样了，因为我们可以在上面那个出错处理函数中调用set_new_handler(_PNHpnh)重新设定一个出错处理函数，也就是我们第二次调用的这个出错处理函数。还不行的话，可以继续循环，直到你满意为止。如果你觉得累了，不玩了，最后就会调用_Nomemory()抛出异常，函数返回到new调用的地方。
好，现在我们清楚了操作符new作了三件事，首先调用全局operatornew函数，后者通过调用传统的malloc函数分配内存，如果成功直接返回，不然，判断出错处理函数是否为零，不为零的话，调用我们的出错处理函数。否则调用_Nomemory()抛出异常。如果p=malloc(size)成功，new接着做第二件事，创建对象，最后转换指针类型并返回。
我们可以重写operatornew函数。当编译器看到语句MyClass*p=newMyClass;
首先会检查我们的类定义看是否提供有operatornew函数，如有，则调用该函数，接着调用构造函数，转换类型并返回。如果没有重写operatornew函数，则new操作符会调用全局中的那个operatornew函数，也就是我们上面说的这个函数。但是如果我们在new操作符前面限定了::即这样写::newMyClass则编译器不会去检查我们的类的定义而直接调用全局的operatornew函数。
操作符new不可以重载，就像sizeof操作符一样是不可以重载的。我们重载的是operatornew函数。所以有一些限定，我们重载的operatornew函数的返回类型必须是void*，第一个参数必须是size_t类型的。下面是一个自定义的operatornew函数：
classMyClass

{

public:




MyClass()




{






cout&lt;&lt;&quot;MyClass::MyClass()&quot;&lt;&lt;endl;





}
staticvoid*operatornew(size_tsize);
~MyClass()

{




cout&lt;&lt;&quot;MyClass::~MyClass()&quot;&lt;&lt;endl;

}

};
void*MyClass::operatornew(size_tsize)

{

//在这里可以对类的静态成员数据做些控制。我们在这里有一句输出语句代替。


cout&lt;&lt;&quot;MyClass::operatornew&quot;&lt;&lt;endl;


void*p=newMyClass;
returnp;

}





这样写是行不通的，因为在MyClass::operatornew中的void*p=newMyClass的new是操作符new，他做三件事，第一件就是调用MyClass::operatornew(size_tsize)，所以这里

是递归调用了。把程序改成：
void*MyClass::operatornew(size_tsize)

{

//在这里可以对类的静态成员数据做些控制。我们在这里有一句输出语句代替。

cout&lt;&lt;&quot;MyClass::operatornew&quot;&lt;&lt;endl;


void*p=operatornew(size);//已修改。
returnp;

}
这样还是不行的，这样是直接递归(自己调用自己)。刚才是间接递归。应该改成：void*p=::operatornew(size);OK，使用的是全局中的operatornew，或者写成：void*p=malloc(size),只是这样一来，出错后不会自动调用出错处理函数了，只会简单的返回NULL，所以在使用new操作符的地方要注意先检测返回&#20540;是否为零，所以最好不用malloc，还是用::operatornew(size)好，这里还可以用void*p=newchar[size]，用的是new[]操作符，不会两次调用构造函数，也不会造成递归。只是要注意在我们重写的operatordelete函数中要调用delete[]
后释放。一般情况下，我们重写了operatornew函数，都要重写operatordelete函数，而且后者中的释放资源的函数要与前者分配资源的函数的形式要搭配。
另外，要想把自己重写的operatornew函数设计得好，还是有好些地方需要注意的。好在需要我们重写这个函数的情况不多，真正需要重写时，还是先参考些这方面的资料才行，&lt;effectivec&#43;&#43;&gt;一书中就有相关的知识介绍。在这里我只是提到一下，让大家知道有这么一回事，应付一下这道公司们乐此不疲的考题。洋洋洒洒写上上千字，小样，看你还敢不敢考这样的考题。
二、new[]与operatornew[]
new[]操作符与new差不多，同样做三件事：调用operatornew[]函数，历遍一个vector调用构造函数。转换指向首地址的指针类型并返回。
operatornew[]函数通过把操作符newA[number]中的A与number进行计算：size_tcount=number*sizeof(A),然后调用全局函数operatornew(count).
三new(void*)Myclass与operatornew(size_t,void*)


指定位置创建操作符new()同样做三件事，第一件就是调用operatornew(size_t,void*)函数，下面两件和new操作符的最后二件事是一样的。让我们来看看vs.net中operatornew(size_t,void*)的定义：
inlinevoid*__cdecloperatornew(size_t,void*_Where)_THROW0()



{


//constructarraywithplacementat_Where



return(_Where);



}
和operatornew相比好简单哦，我们看到了，他并没有调用malloc函数，也没有调用operatornew函数，他怎么分配的内存啊？!对于operatornew函数，他通过循环调用malloc函数来分配一块内存，最好把这块分配好的内存returnp返回给操作符new，让他在上面做第二，第三件事。我们这里return(_Where);按此推理，_Where6应该指向一块已分配的可使用的内存。_Where从那里来的啊？答案是使用操作符new(void*_Where)MyClas时所指定的。这就是指定位置创建操作符new()的用法，先在别处分配好一块内存，然后把这块内存的首地址为参数调用new()，new()就会在这块指定位置上创建对象，然后再把这块指定的内存的首地址自制一份给p，着转换类型并返回。这样子操作符new()并没有真正分配内存，所以不能调用delete来释放内存。当程度使用享内存或者memory-mappedI/O指定位置创建就比较有用，因为在这样的程序里对象必须放置在一个确定的地上或者一块被例程分配的内存里。下面看个例子
#include&lt;iostream&gt;

#include&lt;new&gt;



















//要使用指定位置创建操作符发布包含该头文件。

usingnamespacestd;
void*mallocShared(size_tsize);//用于分配共享内存，该函数是别的程序员写的，你只知道通过


































//调用他可以获得一块已分配而未初始化的内存。
classA

{

public:

A()

{





cout&lt;&lt;&quot;A::A()&quot;&lt;&lt;endl;





m_n=0;

}
intGet()

{





returnm_n;

}
~A()

{





cout&lt;&lt;&quot;A::~A()&quot;&lt;&lt;endl;

}
private:

intm_n;

};
intmain()

{



void*p=mallocShared(sizeof(A));//该句也有可能是在别的地方调用的，






































//然后把p传过来。这里为了简化而放在此调用
A*pA=new(p)A;
cout&lt;&lt;pA-&gt;Get()&lt;&lt;endl;
deletepA;
return0;

}
////////////////////////////////////////////////////////////////////////////////////
/*下面是另一个程序员在一个模块中写的mallocShared()函数，

你不知道其具体实现，只是通过导出该函数来使用。*/
void*mallocShared(size_tsize)

{



void*p=malloc(size);







if(p==NULL)



{







cerr&lt;&lt;&quot;mallocShared(size_tsize)failed!&quot;&lt;&lt;endl;
exit(1);



}
returnp;

}
这个程序有问题吗？抛开设计上的好坏不说，就说这个程序能否通过编译？如能，运行结果如何？请先思考三分钟再往下看。
有疑问的可能是这一句deletepA;函数mallocShared不是你写的，你不知道其内部是通过什么形式分配的内存，就调用delete来释放能行吗？假如又让我们知道他内部是通过malloc函数来分配的内存，用delete来释放能行吗？答案是：能通过编译，并能得出正确结果，通过malloc函数来分配的内存用delete来释放是没问题的，new操作符不也是通过malloc来分配的内存，同样可以用delete来释放啊。如果mallocShared是下面这样子，情况又怎么样呢？
void*mallocShared(size_tsize)

{







return(newchar[size]);

}
结果是和上面是一样的，deletep没问题，只要用new[]来分配的内存块的大小和用delete释放的内存的大小是一样的就没问题。回想一下看，我们用newA来分配内存时，实际上是通过operatornew(size)来分配的，这里的size=sizeof(A)，这种情况下我们可以用deletep来释放，只要p的类型是A*，因为delete是通过调用operatordelete(size)函数来释放的内存，这里的size也是等于sizeof(P)，当我们调用newchar[number]时，先调用operator
new[]函数，后者实际上也是调用operatornew(number*sizeof(char))来分配的内存，既然都是通过调用operatornew来分配的内存，所以调用delete来释放应该也是没问题的。因为这里:mallocShared(sizeof(A))----&gt;size==sizeof(A)==size*sizeof(char)==sizeof(P)大小一样。

改成：
void*mallocShared(size_tsize)

{







return(operatornew(size));

}
结果也是一样的!当然这里是假设没有提供自己的operatornew函数的情况下，如果重写了operatornew函数就要改成：
void*mallocShared(size_tsize)

{







return(::operatornew(size));

//用的是全局函数

}
这个程序目前没问题，但是存在很多的安全隐患，很容易就出错，一不小心就阴沟里翻船，有“未定义”行为产生，结果是啥事都有可能发生。应该谢绝写这样的程序。
上面说了mallocShared(sizeof(A));可能不是在你的程序中调用的，而是在别人那里调用的，然后别人给你传来一个指针让你把这个指针作为参数调用你自己的A*pA=new(p)A,这样子你调用deletep来释放，别人那里或者还需要用，因为这是共共享的内存，又或者别人那里在做完想要做的工作之后，调用delete，这样子就出问题了。同一块内存不能释放两次。就算mallocShared(sizeof(A));是在你这里调用的，那么你可以算是内存的分配者，你有权利and义务把他释放，可是你也要先确定别人还需不需要用到这块内存，需要的话，你就不能马上delete，又或者呆会你自己也还需要用到，再次在这块内存上指定位置创建。所以就不必再调用mallocShared(sizeof(A));来分配内存。把主函数改成下面这样，结果又如何，能通过编译吗？
intmain()

{



void*p=mallocShared(sizeof(A));//就限定是在这里调用的。
A*pA=new(p)A;
cout&lt;&lt;pA-&gt;Get()&lt;&lt;endl;
A*pA1=new(p)A;















//再次指定位置创建。

deletepA;
return0;

}
答案是：能通过编译，运行结果如下：
A::A()

0

A::A()

~A::A()
原来的那块内存是确实被释放掉了的，只是这里构造函数A::A()调用了两次而析构函数A::~A()只调用一次，这显然不太好，如果你的类在其他地方分配了资源，需要通过析构函数来释放，这样子你少调用了一次析构数就会造成内存泄漏或者别的问题了。所以应该把程序改成下面这样
intmain()

{



void*p=mallocShared(sizeof(A));//就限定是在这里调用的。
A*pA=new(p)A;
cout&lt;&lt;pA-&gt;Get()&lt;&lt;endl;
A*pA1=new(p)A;















//再次指定位置创建。
pA-&gt;~A();







//这里显式调用析构函数来析构对象，但是内存并没有释放，还可以再次使用。
A*pA1=new(p)A;
//在这里判断别的程序是否还需要用到该内存
deletepA;




//当别人不再需要，自己也不会再用到，可以释放!
return0;

}
这句deletep总让我担心受怕，最好调用和mallocShared函数相对应的函数来释放内存，你写了mallocShared函数来分配资源就有义务写一个freeShared函数来释放资源，分配资源函数和释放资源函数是一对的，一起提供给别人使用。因为只有你自己最清楚你的mallocShared函数是怎么分配的资源，你的freeShared就应该做相应的工作。比如在mallocShared中除了分配内存，还用到其他资源，如果直接调用deletep来释放那就成问题了。应该调用freeShared来释放。如果你是老板而你的员工只写一个mallocShared函数却没有提供相应的freeShared函数，建议你让他走人!
不然迟早会出问题的。如果void*p=mallocShared(sizeof(A));语句不是在这里调用的，你既不能使用deletep,也不能使用freeShared(p)，或者其他一切释放资源的函数。不是你分配的资源你无权释放。当然你对整个程序把握得比较好，一切尽在你控制中，而你又和别人有协议由你来释放的情况除外。
void*operatornew(size_t,void*_Where)同样可以提供自己的版本，这时候第二个参数可以是别的类型，_Where也不一定是指向一块已分配而未使用的内存，可以是一个指向可以分配内存的函数的指针，然后在operatornew(size_t,void*_Where)内部通过该指针来调用函数从而分配内存。也可以是其他东西，不一定要是指针。总之可以传递你想传递的东西。下面来看个例子，这个例子来自&lt;BjarneStroustrup的FAQ：C&#43;&#43;的风&#26684;与技巧&gt;我懒得写了，就用他写的这个.
以下是原文：
////////////////////////////////////////////////////////////////////////////
有没有“指定位置删除”(placementdelete)？

没有，不过如果你需要的话，可以自己写一个。

看看这个指定位置创建(placementnew)，它将对象放进了一系列Arena中；

classArena{
public:
void*allocate(size_t);
voiddeallocate(void*);
//...
};

void*operatornew(size_tsz,Arena&amp;a)
{
returna.allocate(sz);//梁杨注：这里第二个参数传递的是一个引用，







































//然后通过其成员函数来分配内存.
}

Arenaa1(somearguments);
Arenaa2(somearguments);

这样实现了之后，我们就可以这么写：

X*p1=new(a1)X;
Y*p2=new(a1)Y;
Z*p3=new(a2)Z;
//...

但是，以后怎样正确地销毁这些对象呢？没有对应于这种“placementnew”的内建的
“placementdelete”，原因是，没有一种通用的方法可以保证它被正确地使用。在C&#43;&#43;的
类型系统中，没有什么东西可以让我们确认，p1一定指向一个由Arena类型的a1分派的对象
。p1可能指向任何东西分派的任何一块地方。

然而，有时候程序员是知道的，所以这是一种方法：

template&lt;classT&gt;voiddestroy(T*p,Arena&amp;a)
{
if(p){
p-&gt;~T();//explicitdestructorcall
a.deallocate(p);
}
}

现在我们可以这么写：

destroy(p1,a1);
destroy(p2,a2);
destroy(p3,a3);

如果Arena维护了它保存着的对象的线索，你甚至可以自己写一个析构函数，以避免它发生错误。这也是可能的：定义一对相互匹配的操作符new()和delete()，以维护《C&#43;&#43;程序设计言》15.6中的类继承体系。参见《C&#43;&#43;语言的设计和演变》10.4和《C&#43;&#43;程序设计语言

19.4.5。
///////////////////////////////////////////////////////////////////////////////
////////////////
C&#43;&#43;中有指定位置创建操作符：new()，但没有指定位置删除操作符：delete()。
我们可以写：















X*p1=new(a1)X;//指定位置创建

但是不可以写：















delete(a1)p1





//这句不能通过编译。
他上面写的这个程序其实是有点问题的(靠，梁杨你也太牛B了吧，C&#43;&#43;之父写的你也敢说有问题?!),用事实说话，如果只提供void*operatornew(size_tsz,Arena&amp;a)而不提供voidoperatordelete(void*,Arena&amp;)函数，vs.net的编译器会提出一条警告：“void*operatornew(size_t,Arena&amp;)”:未找到匹配的删除算符；如果初始化引发异常，则不会释放内存对于new操作符会作三件事，在第一件分配内存顺利完成之后，接着会调用构造函数，如果在调用构造函数中生异常，他就会调用operator
delete(void*)函数来释放在第一件事中通过operatornew(size_t)来分配的内存，从而保证不会发生内存泄漏。同样定位创建操作符new()也做三件事:第一件调用我们重写的void*operatornew(size_tsz,Arena&amp;a)来分配内存，这步成功之后接着调用构造函数，那么如果在调用构造函数中发生异常时，怎么办呢？没有相应的释放函数来给编译器调用，所以我们必须自己提供一个voidoperatordelete(void*,Arena&amp;)来释放内存。这个函数第一个参数的类型必须是void*,第二个类型必须和operator
new()中的相同，不然当发生异常时，编译器不会调用该函数的。当我们提供了voidoperatordelete(void*,Arena&amp;)后还是不能写：delete(a1)pA1这样的语句的。可以写operatordelete(pA1,a1)，但是最好不要这样调用，该函数是专为编译器写的，当发生构造异常时调用的。当我们成功的创建一个对象，做完一些事之后，应该还象他上面写的那样，通过调用destroy(p1,a1);来释放。注意这里内存分配是在指定创建函数operatornew()中调用其他函数来分配的，所以我们需要提供一个相应的delete()来预防构造失败时来释放资源。但是在我们前面写的那个共享内存的例子，定位创建函数new()并没有分配内存，内存分配是在其他地方完成的，这时候我们就不需要提供定位删除函数delete()来释放资源，你构造函数失败就失败呗，内存又不是你分配的，你无权释放，不可能说你创建一个对象失败了，连内存都释放了，呆会有权释放内存者(分配者有权释放)再释放一次，那问题就大了。也就是说当我们重写定位创建函数new()时，如果内存是在其中分配的，那么就要提供相应的delete()函数给编译器专用。反之则不必提供delete()函数。
四、new(nothrow)MyClass操作符
从字面就可以看出来了，这个版本的new不会抛出异常。他也做三件事，其中第一件调用的就是不抛出异常的operatornew()函数，其原型是：
void*__cdecloperatornew(size_t,conststd::nothrow_t&amp;)



_THROW0();
看到了，其后面的异常规范是空的，即不抛出任何异常。与常用的那个operatornew()函数不同void*__cdecloperatornew(size_t)_THROW1(std::bad_alloc);，这个可以抛出std::bad_alloc异常。不允许抛出异常不并代其内部也不会发生异常，当内部内存分配失败时发生异常，因为规范中不允许抛出异常，这就会抛出一个意外的异常，如果用户不对这个意外异常进行捕捉的话，默认处理是调用abort函数。
五、newconstMyClass
这个版本的new表示在堆内存中创建后个const对象，创建完之后就不能再修改，所以必须在创建时初始化(有无参构造函数的类除外)，并且返回的指针是一个指向const对象的指针，即要写：constint*p=newconst
int(1);而不能写int*p=newconstint(1).
转自:http://hi.baidu.com/qufuping1981/blog/item/81120df0e27091aca40f5213.html
一、new与opeartornew
首先问大家一个问题：new与opeartornew有何区别？如果你回答：operatornew就是new的重载运算符呗!
回答错误，new是C&#43;&#43;内部定义的一种操作符，总像sizeof一样是一种操作符，而operatornew是实作者定义的一个全局函数。不信，你可以写下面的语句：
int*p=operatornew(//这时候，用的是VC的话，就会自动提示该函数的原型。嗯，有七个版本之多。好，现在我们弄清楚了，一个是操作符，一个是全局函数，而不是原来所以为的是重载的关系。正同我们看看他们各有什么用？
new操作符作了三件事.语句:
MyClass*p=newMyClass;的伪码大至如下：
void*memory=operatornew(sizeof(MyClass));//1调用全局函数:operatornew

MyClass::MyClass();












//2调用构造函数创建对象，如带参数的话
//调用的就是带参构造函数
MyClass*p=static_cast&lt;MyClass*&gt;(memory);//3转换指针类型，并赋给p
我们可以猜测到真正的内存分配是在operatornew函数中完成的。
operatornew函数其之的原型是：

void*operatornew(size_tsize)throw(std::bad_alloc)

返回类型是void*，参数类型是：size_t，是一个在系统头文件&lt;cstddef&gt;中定义的typedef。sizeof()的操作结果就是该类型的。
void*operatornew(size_tsize)大至如下：
void*p;

while((p=malloc(size))==0)

{




//内存分配失败。



if(_callnewh(size)==0)



{









_Nomemory();



}

}
returnp;
如果内存分配成功则直接返回所分配的内存的首地址。不然就循环调用if语句，首先判断_callnewh(size)调用是否成功，不成功则调用_Nomemory()，_Nomemory()实际上作用是抛出一个异常，所抛出的是一个标准库中定义的std::bad_alloc对象。_callnewh()函数首先会判断一个全局变量_pnhHeap是否为零，_pnhHeap存放的是一个函数指针，我们可以为new操作指定一个出错处理函数，也就是说当new分配内存失败时就会调用我们刚才指定的函数，出错处理函数原型必须是无参且返回类型是void的函数。可以通过全局函数set_new_handler
(new_handlerpnew)来设定我们的出错处理函数，而他又是通过调用_PNH_set_new_handler(_PNHpnh)来实现设定我们的出错处理函数的。下面是_PNH_set_new_handler(_PNHpnh)的定义：
_PNH__cdecl_set_new_handler(







_PNHpnh







)

{







_PNHpnhOld;
/*locktheheap*/







_mlock(_HEAP_LOCK);
pnhOld=_pnhHeap;//把原来在起作用的出错处理函数的指针赋给pnhOld







_pnhHeap=pnh;



//我们新设定的出错处理函数的指针。
/*unlocktheheap*/







_munlock(_HEAP_LOCK);
return(pnhOld);



//返回原来旧的出错处理函数的指针。

}
回到我们的_callnewh()函数，如果在MyClass*p=newMyClass;语句之前设定了出错处理函数，那么这里的_pnhHeap就不为零，接着就会调用(*_pnhHeap)()即我们的出错处理函数，否则返回零。接着调用_Nomemory()抛出异常。这个出错处理函数是个重要的函数，设计的好的话可以做很多事情，因为他是在while中被调用的有多次被调用的机会。在我们的出错处理函数中如果没有使用exit(1)等退出程序的语句，也没有抛出异常的话，执行完我们的出错处理函数后，又回到while((p
=malloc(size))==0)，再次分配内存并判断，还是失败的话，再次调用我们的出错处理函数，当然这个出错处理函数和上面的那个出错处理函数不一样了，因为我们可以在上面那个出错处理函数中调用set_new_handler(_PNHpnh)重新设定一个出错处理函数，也就是我们第二次调用的这个出错处理函数。还不行的话，可以继续循环，直到你满意为止。如果你觉得累了，不玩了，最后就会调用_Nomemory()抛出异常，函数返回到new调用的地方。
好，现在我们清楚了操作符new作了三件事，首先调用全局operatornew函数，后者通过调用传统的malloc函数分配内存，如果成功直接返回，不然，判断出错处理函数是否为零，不为零的话，调用我们的出错处理函数。否则调用_Nomemory()抛出异常。如果p=malloc(size)成功，new接着做第二件事，创建对象，最后转换指针类型并返回。
我们可以重写operatornew函数。当编译器看到语句MyClass*p=newMyClass;
首先会检查我们的类定义看是否提供有operatornew函数，如有，则调用该函数，接着调用构造函数，转换类型并返回。如果没有重写operatornew函数，则new操作符会调用全局中的那个operatornew函数，也就是我们上面说的这个函数。但是如果我们在new操作符前面限定了::即这样写::newMyClass则编译器不会去检查我们的类的定义而直接调用全局的operatornew函数。
操作符new不可以重载，就像sizeof操作符一样是不可以重载的。我们重载的是operatornew函数。所以有一些限定，我们重载的operatornew函数的返回类型必须是void*，第一个参数必须是size_t类型的。下面是一个自定义的operatornew函数：
classMyClass

{

public:




MyClass()




{






cout&lt;&lt;&quot;MyClass::MyClass()&quot;&lt;&lt;endl;





}
staticvoid*operatornew(size_tsize);
~MyClass()

{




cout&lt;&lt;&quot;MyClass::~MyClass()&quot;&lt;&lt;endl;

}

};
void*MyClass::operatornew(size_tsize)

{

//在这里可以对类的静态成员数据做些控制。我们在这里有一句输出语句代替。


cout&lt;&lt;&quot;MyClass::operatornew&quot;&lt;&lt;endl;


void*p=newMyClass;
returnp;

}





这样写是行不通的，因为在MyClass::operatornew中的void*p=newMyClass的new是操作符new，他做三件事，第一件就是调用MyClass::operatornew(size_tsize)，所以这里

是递归调用了。把程序改成：
void*MyClass::operatornew(size_tsize)

{

//在这里可以对类的静态成员数据做些控制。我们在这里有一句输出语句代替。

cout&lt;&lt;&quot;MyClass::operatornew&quot;&lt;&lt;endl;


void*p=operatornew(size);//已修改。
returnp;

}
这样还是不行的，这样是直接递归(自己调用自己)。刚才是间接递归。应该改成：void*p=::operatornew(size);OK，使用的是全局中的operatornew，或者写成：void*p=malloc(size),只是这样一来，出错后不会自动调用出错处理函数了，只会简单的返回NULL，所以在使用new操作符的地方要注意先检测返回&#20540;是否为零，所以最好不用malloc，还是用::operatornew(size)好，这里还可以用void*p=newchar[size]，用的是new[]操作符，不会两次调用构造函数，也不会造成递归。只是要注意在我们重写的operatordelete函数中要调用delete[]
后释放。一般情况下，我们重写了operatornew函数，都要重写operatordelete函数，而且后者中的释放资源的函数要与前者分配资源的函数的形式要搭配。
另外，要想把自己重写的operatornew函数设计得好，还是有好些地方需要注意的。好在需要我们重写这个函数的情况不多，真正需要重写时，还是先参考些这方面的资料才行，&lt;effectivec&#43;&#43;&gt;一书中就有相关的知识介绍。在这里我只是提到一下，让大家知道有这么一回事，应付一下这道公司们乐此不疲的考题。洋洋洒洒写上上千字，小样，看你还敢不敢考这样的考题。
二、new[]与operatornew[]
new[]操作符与new差不多，同样做三件事：调用operatornew[]函数，历遍一个vector调用构造函数。转换指向首地址的指针类型并返回。
operatornew[]函数通过把操作符newA[number]中的A与number进行计算：size_tcount=number*sizeof(A),然后调用全局函数operatornew(count).
三new(void*)Myclass与operatornew(size_t,void*)


指定位置创建操作符new()同样做三件事，第一件就是调用operatornew(size_t,void*)函数，下面两件和new操作符的最后二件事是一样的。让我们来看看vs.net中operatornew(size_t,void*)的定义：
inlinevoid*__cdecloperatornew(size_t,void*_Where)_THROW0()



{


//constructarraywithplacementat_Where



return(_Where);



}
和operatornew相比好简单哦，我们看到了，他并没有调用malloc函数，也没有调用operatornew函数，他怎么分配的内存啊？!对于operatornew函数，他通过循环调用malloc函数来分配一块内存，最好把这块分配好的内存returnp返回给操作符new，让他在上面做第二，第三件事。我们这里return(_Where);按此推理，_Where6应该指向一块已分配的可使用的内存。_Where从那里来的啊？答案是使用操作符new(void*_Where)MyClas时所指定的。这就是指定位置创建操作符new()的用法，先在别处分配好一块内存，然后把这块内存的首地址为参数调用new()，new()就会在这块指定位置上创建对象，然后再把这块指定的内存的首地址自制一份给p，着转换类型并返回。这样子操作符new()并没有真正分配内存，所以不能调用delete来释放内存。当程度使用享内存或者memory-mappedI/O指定位置创建就比较有用，因为在这样的程序里对象必须放置在一个确定的地上或者一块被例程分配的内存里。下面看个例子
#include&lt;iostream&gt;

#include&lt;new&gt;



















//要使用指定位置创建操作符发布包含该头文件。

usingnamespacestd;
void*mallocShared(size_tsize);//用于分配共享内存，该函数是别的程序员写的，你只知道通过


































//调用他可以获得一块已分配而未初始化的内存。
classA

{

public:

A()

{





cout&lt;&lt;&quot;A::A()&quot;&lt;&lt;endl;





m_n=0;

}
intGet()

{





returnm_n;

}
~A()

{





cout&lt;&lt;&quot;A::~A()&quot;&lt;&lt;endl;

}
private:

intm_n;

};
intmain()

{



void*p=mallocShared(sizeof(A));//该句也有可能是在别的地方调用的，






































//然后把p传过来。这里为了简化而放在此调用
A*pA=new(p)A;
cout&lt;&lt;pA-&gt;Get()&lt;&lt;endl;
deletepA;
return0;

}
////////////////////////////////////////////////////////////////////////////////////
/*下面是另一个程序员在一个模块中写的mallocShared()函数，

你不知道其具体实现，只是通过导出该函数来使用。*/
void*mallocShared(size_tsize)

{



void*p=malloc(size);







if(p==NULL)



{







cerr&lt;&lt;&quot;mallocShared(size_tsize)failed!&quot;&lt;&lt;endl;
exit(1);



}
returnp;

}
这个程序有问题吗？抛开设计上的好坏不说，就说这个程序能否通过编译？如能，运行结果如何？请先思考三分钟再往下看。
有疑问的可能是这一句deletepA;函数mallocShared不是你写的，你不知道其内部是通过什么形式分配的内存，就调用delete来释放能行吗？假如又让我们知道他内部是通过malloc函数来分配的内存，用delete来释放能行吗？答案是：能通过编译，并能得出正确结果，通过malloc函数来分配的内存用delete来释放是没问题的，new操作符不也是通过malloc来分配的内存，同样可以用delete来释放啊。如果mallocShared是下面这样子，情况又怎么样呢？
void*mallocShared(size_tsize)

{







return(newchar[size]);

}
结果是和上面是一样的，deletep没问题，只要用new[]来分配的内存块的大小和用delete释放的内存的大小是一样的就没问题。回想一下看，我们用newA来分配内存时，实际上是通过operatornew(size)来分配的，这里的size=sizeof(A)，这种情况下我们可以用deletep来释放，只要p的类型是A*，因为delete是通过调用operatordelete(size)函数来释放的内存，这里的size也是等于sizeof(P)，当我们调用newchar[number]时，先调用operator
new[]函数，后者实际上也是调用operatornew(number*sizeof(char))来分配的内存，既然都是通过调用operatornew来分配的内存，所以调用delete来释放应该也是没问题的。因为这里:mallocShared(sizeof(A))----&gt;size==sizeof(A)==size*sizeof(char)==sizeof(P)大小一样。

改成：
void*mallocShared(size_tsize)

{







return(operatornew(size));

}
结果也是一样的!当然这里是假设没有提供自己的operatornew函数的情况下，如果重写了operatornew函数就要改成：
void*mallocShared(size_tsize)

{







return(::operatornew(size));

//用的是全局函数

}
这个程序目前没问题，但是存在很多的安全隐患，很容易就出错，一不小心就阴沟里翻船，有“未定义”行为产生，结果是啥事都有可能发生。应该谢绝写这样的程序。
上面说了mallocShared(sizeof(A));可能不是在你的程序中调用的，而是在别人那里调用的，然后别人给你传来一个指针让你把这个指针作为参数调用你自己的A*pA=new(p)A,这样子你调用deletep来释放，别人那里或者还需要用，因为这是共共享的内存，又或者别人那里在做完想要做的工作之后，调用delete，这样子就出问题了。同一块内存不能释放两次。就算mallocShared(sizeof(A));是在你这里调用的，那么你可以算是内存的分配者，你有权利and义务把他释放，可是你也要先确定别人还需不需要用到这块内存，需要的话，你就不能马上delete，又或者呆会你自己也还需要用到，再次在这块内存上指定位置创建。所以就不必再调用mallocShared(sizeof(A));来分配内存。把主函数改成下面这样，结果又如何，能通过编译吗？
intmain()

{



void*p=mallocShared(sizeof(A));//就限定是在这里调用的。
A*pA=new(p)A;
cout&lt;&lt;pA-&gt;Get()&lt;&lt;endl;
A*pA1=new(p)A;















//再次指定位置创建。

deletepA;
return0;

}
答案是：能通过编译，运行结果如下：
A::A()

0

A::A()

~A::A()
原来的那块内存是确实被释放掉了的，只是这里构造函数A::A()调用了两次而析构函数A::~A()只调用一次，这显然不太好，如果你的类在其他地方分配了资源，需要通过析构函数来释放，这样子你少调用了一次析构数就会造成内存泄漏或者别的问题了。所以应该把程序改成下面这样
intmain()

{



void*p=mallocShared(sizeof(A));//就限定是在这里调用的。
A*pA=new(p)A;
cout&lt;&lt;pA-&gt;Get()&lt;&lt;endl;
A*pA1=new(p)A;















//再次指定位置创建。
pA-&gt;~A();







//这里显式调用析构函数来析构对象，但是内存并没有释放，还可以再次使用。
A*pA1=new(p)A;
//在这里判断别的程序是否还需要用到该内存
deletepA;




//当别人不再需要，自己也不会再用到，可以释放!
return0;

}
这句deletep总让我担心受怕，最好调用和mallocShared函数相对应的函数来释放内存，你写了mallocShared函数来分配资源就有义务写一个freeShared函数来释放资源，分配资源函数和释放资源函数是一对的，一起提供给别人使用。因为只有你自己最清楚你的mallocShared函数是怎么分配的资源，你的freeShared就应该做相应的工作。比如在mallocShared中除了分配内存，还用到其他资源，如果直接调用deletep来释放那就成问题了。应该调用freeShared来释放。如果你是老板而你的员工只写一个mallocShared函数却没有提供相应的freeShared函数，建议你让他走人!
不然迟早会出问题的。如果void*p=mallocShared(sizeof(A));语句不是在这里调用的，你既不能使用deletep,也不能使用freeShared(p)，或者其他一切释放资源的函数。不是你分配的资源你无权释放。当然你对整个程序把握得比较好，一切尽在你控制中，而你又和别人有协议由你来释放的情况除外。
void*operatornew(size_t,void*_Where)同样可以提供自己的版本，这时候第二个参数可以是别的类型，_Where也不一定是指向一块已分配而未使用的内存，可以是一个指向可以分配内存的函数的指针，然后在operatornew(size_t,void*_Where)内部通过该指针来调用函数从而分配内存。也可以是其他东西，不一定要是指针。总之可以传递你想传递的东西。下面来看个例子，这个例子来自&lt;BjarneStroustrup的FAQ：C&#43;&#43;的风&#26684;与技巧&gt;我懒得写了，就用他写的这个.
以下是原文：
////////////////////////////////////////////////////////////////////////////
有没有“指定位置删除”(placementdelete)？

没有，不过如果你需要的话，可以自己写一个。

看看这个指定位置创建(placementnew)，它将对象放进了一系列Arena中；

classArena{
public:
void*allocate(size_t);
voiddeallocate(void*);
//...
};

void*operatornew(size_tsz,Arena&amp;a)
{
returna.allocate(sz);//梁杨注：这里第二个参数传递的是一个引用，







































//然后通过其成员函数来分配内存.
}

Arenaa1(somearguments);
Arenaa2(somearguments);

这样实现了之后，我们就可以这么写：

X*p1=new(a1)X;
Y*p2=new(a1)Y;
Z*p3=new(a2)Z;
//...

但是，以后怎样正确地销毁这些对象呢？没有对应于这种“placementnew”的内建的
“placementdelete”，原因是，没有一种通用的方法可以保证它被正确地使用。在C&#43;&#43;的
类型系统中，没有什么东西可以让我们确认，p1一定指向一个由Arena类型的a1分派的对象
。p1可能指向任何东西分派的任何一块地方。

然而，有时候程序员是知道的，所以这是一种方法：

template&lt;classT&gt;voiddestroy(T*p,Arena&amp;a)
{
if(p){
p-&gt;~T();//explicitdestructorcall
a.deallocate(p);
}
}

现在我们可以这么写：

destroy(p1,a1);
destroy(p2,a2);
destroy(p3,a3);

如果Arena维护了它保存着的对象的线索，你甚至可以自己写一个析构函数，以避免它发生错误。这也是可能的：定义一对相互匹配的操作符new()和delete()，以维护《C&#43;&#43;程序设计言》15.6中的类继承体系。参见《C&#43;&#43;语言的设计和演变》10.4和《C&#43;&#43;程序设计语言

19.4.5。
///////////////////////////////////////////////////////////////////////////////
////////////////
C&#43;&#43;中有指定位置创建操作符：new()，但没有指定位置删除操作符：delete()。
我们可以写：















X*p1=new(a1)X;//指定位置创建

但是不可以写：















delete(a1)p1





//这句不能通过编译。
他上面写的这个程序其实是有点问题的(靠，梁杨你也太牛B了吧，C&#43;&#43;之父写的你也敢说有问题?!),用事实说话，如果只提供void*operatornew(size_tsz,Arena&amp;a)而不提供voidoperatordelete(void*,Arena&amp;)函数，vs.net的编译器会提出一条警告：“void*operatornew(size_t,Arena&amp;)”:未找到匹配的删除算符；如果初始化引发异常，则不会释放内存对于new操作符会作三件事，在第一件分配内存顺利完成之后，接着会调用构造函数，如果在调用构造函数中生异常，他就会调用operator
delete(void*)函数来释放在第一件事中通过operatornew(size_t)来分配的内存，从而保证不会发生内存泄漏。同样定位创建操作符new()也做三件事:第一件调用我们重写的void*operatornew(size_tsz,Arena&amp;a)来分配内存，这步成功之后接着调用构造函数，那么如果在调用构造函数中发生异常时，怎么办呢？没有相应的释放函数来给编译器调用，所以我们必须自己提供一个voidoperatordelete(void*,Arena&amp;)来释放内存。这个函数第一个参数的类型必须是void*,第二个类型必须和operator
new()中的相同，不然当发生异常时，编译器不会调用该函数的。当我们提供了voidoperatordelete(void*,Arena&amp;)后还是不能写：delete(a1)pA1这样的语句的。可以写operatordelete(pA1,a1)，但是最好不要这样调用，该函数是专为编译器写的，当发生构造异常时调用的。当我们成功的创建一个对象，做完一些事之后，应该还象他上面写的那样，通过调用destroy(p1,a1);来释放。注意这里内存分配是在指定创建函数operatornew()中调用其他函数来分配的，所以我们需要提供一个相应的delete()来预防构造失败时来释放资源。但是在我们前面写的那个共享内存的例子，定位创建函数new()并没有分配内存，内存分配是在其他地方完成的，这时候我们就不需要提供定位删除函数delete()来释放资源，你构造函数失败就失败呗，内存又不是你分配的，你无权释放，不可能说你创建一个对象失败了，连内存都释放了，呆会有权释放内存者(分配者有权释放)再释放一次，那问题就大了。也就是说当我们重写定位创建函数new()时，如果内存是在其中分配的，那么就要提供相应的delete()函数给编译器专用。反之则不必提供delete()函数。
四、new(nothrow)MyClass操作符
从字面就可以看出来了，这个版本的new不会抛出异常。他也做三件事，其中第一件调用的就是不抛出异常的operatornew()函数，其原型是：
void*__cdecloperatornew(size_t,conststd::nothrow_t&amp;)



_THROW0();
看到了，其后面的异常规范是空的，即不抛出任何异常。与常用的那个operatornew()函数不同void*__cdecloperatornew(size_t)_THROW1(std::bad_alloc);，这个可以抛出std::bad_alloc异常。不允许抛出异常不并代其内部也不会发生异常，当内部内存分配失败时发生异常，因为规范中不允许抛出异常，这就会抛出一个意外的异常，如果用户不对这个意外异常进行捕捉的话，默认处理是调用abort函数。
五、newconstMyClass
这个版本的new表示在堆内存中创建后个const对象，创建完之后就不能再修改，所以必须在创建时初始化(有无参构造函数的类除外)，并且返回的指针是一个指向const对象的指针，即要写：constint*p=newconst
int(1);而不能写int*p=newconstint(1).
