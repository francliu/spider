使用变量

————






在Makefile中的定义的变量，就像是C/C&#43;&#43;语言中的宏一样，他代表了一个文本字串，在Makefile中执行的时候其会自动原模原样地展开在所使用的地方。其与C/C&#43;&#43;所不同的是，你可以在Makefile中改变其&#20540;。在Makefile中，变量可以使用在“目标”，“依赖目标”，“命令”或是Makefile的其它部分中。变量的命名字可以包含字符、数字，下划线（可以是数字开头），但不应该含有“:”、“#”、“=”或是空字符（空&#26684;、回车等）。变量是大小写敏感的，“foo”、“Foo”和“FOO”是三个不同的变量名。传统的Makefile的变量名是全大写的命名方式，但我推荐使用大小写搭配的变量名，如：MakeFlags。这样可以避免和系统的变量冲突，而发生意外的事情。有一些变量是很奇怪字串，如“$&lt;”、“$@”等，这些是自动化变量，我会在后面介绍。


一、变量的基础




变量在声明时需要给予初&#20540;，而在使用时，需要给在变量名前加上“$”符号，但最好用小括号“（）”或是大括号“{}”把变量给包括起来。如果你要使用真实的“$”字符，那么你需要用“$$”来表示。变量可以使用在许多地方，如规则中的“目标”、“依赖”、“命令”以及新的变量中。


先看一个例子：


objects=program.ofoo.outils.o

program:$(objects)

cc-oprogram$(objects)


$(objects):defs.h


变量会在使用它的地方精确地展开，就像C/C&#43;&#43;中的宏一样，例如：


foo=c

prog.o:prog.$(foo)

$(foo)$(foo)-$(foo)prog.$(foo)



展开后得到：


prog.o:prog.c

cc-cprog.c



当然，千万不要在你的Makefile中这样干，这里只是举个例子来表明Makefile中的变量在使用处展开的真实样子。可见其就是一个“替代”的原理。另外，给变量加上括号完全是为了更加安全地使用这个变量，在上面的例子中，如果你不想给变量加上括号，那也可以，但我还是强烈建议你给变量加上括号。


二、变量中的变量


在定义变量的&#20540;时，我们可以使用其它变量来构造变量的&#20540;，在Makefile中有两种方式来在用变量定义变量的&#20540;。



先看第一种方式，也就是简单的使用“=”号，在“=”左侧是变量，右侧是变量的&#20540;，右侧变量的&#20540;可以定义在文件的任何一处，也就是说，右侧中的变量不一定非要是已定义好

的&#20540;，其也可以使用后面定义的&#20540;。如：


foo=$(bar)

bar=$(ugh)

ugh=Huh?



all:

echo$(foo)



我们执行“makeall”将会打出变量$(foo)的&#20540;是“Huh?”（$(foo)的&#20540;是$(bar)，$(bar)的&#20540;是$(ugh)，$(ugh)的&#20540;是“Huh?”）可见，变量是可以使用后面的变量来定义的。

这个功能有好的地方，也有不好的地方，好的地方是，我们可以把变量的真实&#20540;推到后面来定义，如：


CFLAGS=$(include_dirs)-O

include_dirs=-Ifoo-Ibar



当“CFLAGS”在命令中被展开时，会是“-Ifoo-Ibar-O”。但这种形式也有不好的地方

，那就是递归定义，如：



CFLAGS=$(CFLAGS)-O



或：



A=$(B)

B=$(A)



这会让make陷入无限的变量展开过程中去，当然，我们的make是有能力检测这样的定义，并会报错。还有就是如果在变量中使用函数，那么，这种方式会让我们的make运行时非常慢，更糟糕的是，他会使用得两个make的函数“wildcard”和“shell”发生不可预知的错误。因为你不会知道这两个函数会被调用多少次。


为了避免上面的这种方法，我们可以使用make中的另一种用变量来定义变量的方法。这种方法使用的是“:=”操作符，如：



x:=foo

y:=$(x)bar

x:=later



其等价于：



y:=foobar

x:=later



&#20540;得一提的是，这种方法，前面的变量不能使用后面的变量，只能使用前面已定义好了的变量。如果是这样：



y:=$(x)bar

x:=foo



那么，y的&#20540;是“bar”，而不是“foobar”。



上面都是一些比较简单的变量使用了，让我们来看一个复杂的例子，其中包括了make的函数、条件表达式和一个系统变量“MAKELEVEL”的使用：



ifeq(0,${MAKELEVEL})

cur-dir:=$(shellpwd)

whoami:=$(shellwhoami)

host-type:=$(shellarch)

MAKE:=${MAKE}host-type=${host-type}whoami=${whoami}

endif



关于条件表达式和函数，我们在后面再说，对于系统变量“MAKELEVEL”，其意思是，如果我们的make有一个嵌套执行的动作（参见前面的“嵌套使用make”），那么，这个变量会记录了我们的当前Makefile的调用层数。



下面再介绍两个定义变量时我们需要知道的，请先看一个例子，如果我们要定义一个变量，其&#20540;是一个空&#26684;，那么我们可以这样来：


nullstring:=

space:=$(nullstring)#endoftheline



nullstring是一个Empty变量，其中什么也没有，而我们的space的&#20540;是一个空&#26684;。因为在操作符的右边是很难描述一个空&#26684;的，这里采用的技术很管用，先用一个Empty变量来标明变量的&#20540;开始了，而后面采用“#”注释符来表示变量定义的终止，这样，我们可以定义出其&#20540;是一个空&#26684;的变量。请注意这里关于“#”的使用，注释符“#”的这种特性&#20540;得我们注意，如果我们这样定义一个变量：


dir:=/foo/bar#directorytoputthefrobsin


dir这个变量的&#20540;是“/foo/bar”，后面还跟了4个空&#26684;，如果我们这样使用这样变量来指定别的目录——“$(dir)/file”那么就完蛋了。



还有一个比较有用的操作符是“?=”，先看示例：



FOO?=bar



其含义是，如果FOO没有被定义过，那么变量FOO的&#20540;就是“bar”，如果FOO先前被定义过，那么这条语将什么也不做，其等价于：



ifeq($(originFOO),undefined)

FOO=bar

endif


三、变量高级用法



这里介绍两种变量的高级使用方法，第一种是变量&#20540;的替换。


我们可以替换变量中的共有的部分，其&#26684;式是“$(var:a=b)”或是“${var:a=b}”，其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。这里的“结尾”意思是“空&#26684;”或是“结束符”。


还是看一个示例吧：



foo:=a.ob.oc.o

bar:=$(foo:.o=.c)



这个示例中，我们先定义了一个“$(foo)”变量，而第二行的意思是把“$(foo)”中所有以“.o”字串“结尾”全部替换成“.c”，所以我们的“$(bar)”的&#20540;就是“a.cb.cc.c”。


另外一种变量替换的技术是以“静态模式”（参见前面章节）定义的，如：



foo:=a.ob.oc.o

bar:=$(foo:%.o=%.c)



这依赖于被替换字串中的有相同的模式，模式中必须包含一个“%”字符，这个例子同样让$(bar)变量的&#20540;为“a.cb.cc.c”。



第二种高级用法是——“把变量的&#20540;再当成变量”。先看一个例子：



x=y

y=z

a:=$($(x))



在这个例子中，$(x)的&#20540;是“y”，所以$($(x))就是$(y)，于是$(a)的&#20540;就是“z”。（注意，是“x=y”，而不是“x=$(y)”）



我们还可以使用更多的层次：



x=y

y=z

z=u

a:=$($($(x)))



这里的$(a)的&#20540;是“u”，相关的推导留给读者自己去做吧。


让我们再复杂一点，使用上“在变量定义中使用变量”的第一个方式，来看一个例子：



x=$(y)

y=z

z=Hello

a:=$($(x))



这里的$($(x))被替换成了$($(y))，因为$(y)&#20540;是“z”，所以，最终结果是：a:=$(z)，也就是“Hello”。



再复杂一点，我们再加上函数：



x=variable1

variable2:=Hello

y=$(subst1,2,$(x))

z=y

a:=$($($(z)))



这个例子中，“$($($(z)))”扩展为“$($(y))”，而其再次被扩展为“$($(subst1,2,$(x)))”。$(x)的&#20540;是“variable1”，subst函数把“variable1”中的所有“1”字串替换成“2”字串，于是，“variable1”变成“variable2”，再取其&#20540;，所以，最终，$(a)的&#20540;就是$(variable2)的&#20540;——“Hello”。（喔，好不容易）


在这种方式中，或要可以使用多个变量来组成一个变量的名字，然后再取其&#20540;：


first_second=Hello

a=first

b=second

all=$($a_$b)



这里的“$a_$b”组成了“first_second”，于是，$(all)的&#20540;就是“Hello”。



再来看看结合第一种技术的例子：



a_objects:=a.ob.oc.o

1_objects:=1.o2.o3.o



sources:=$($(a1)_objects:.o=.c)



这个例子中，如果$(a1)的&#20540;是“a”的话，那么，$(sources)的&#20540;就是“a.cb.cc.c”；如果$(a1)的&#20540;是“1”，那么$(sources)的&#20540;是“1.c2.c3.c”。


再来看一个这种技术和“函数”与“条件语句”一同使用的例子：



ifdefdo_sort

func:=sort

else

func:=strip

endif


bar:=adbgqc


foo:=$($(func)$(bar))



这个示例中，如果定义了“do_sort”，那么：foo:=$(sortadbgqc)，于是$(foo)的&#20540;就是“abcdgq”，而如果没有定义“do_sort”，那么：foo:=$(sortadbgqc)，调用的就是strip函数。


当然，“把变量的&#20540;再当成变量”这种技术，同样可以用在操作符的左边：


dir=foo

$(dir)_sources:=$(wildcard$(dir)/*.c)

define$(dir)_print

lpr$($(dir)_sources)

endef


这个例子中定义了三个变量：“dir”，“foo_sources”和“foo_print”。



四、追加变量&#20540;



我们可以使用“&#43;=”操作符给变量追加&#20540;，如：



objects=main.ofoo.obar.outils.o

objects&#43;=another.o


于是，我们的$(objects)&#20540;变成：“main.ofoo.obar.outils.oanother.o”（another.o被追加进去了）


使用“&#43;=”操作符，可以模拟为下面的这种例子：



objects=main.ofoo.obar.outils.o

objects:=$(objects)another.o



所不同的是，用“&#43;=”更为简洁。



如果变量之前没有定义过，那么，“&#43;=”会自动变成“=”，如果前面有变量定义，那么“&#43;=”会继承于前次操作的赋&#20540;符。如果前一次的是“:=”，那么“&#43;=”会以“:=”作为其赋&#20540;符，如：


variable:=value

variable&#43;=more



等价于：



variable:=value

variable:=$(variable)more



但如果是这种情况：



variable=value

variable&#43;=more



由于前次的赋&#20540;符是“=”，所以“&#43;=”也会以“=”来做为赋&#20540;，那么岂不会发生变量的递补归定义，这是很不好的，所以make会自动为我们解决这个问题，我们不必担心这个问题。



五、override指示符



如果有变量是通常make的命令行参数设置的，那么Makefile中对这个变量的赋&#20540;会被忽略。如果你想在Makefile中设置这类参数的&#20540;，那么，你可以使用“override”指示符。其语法是：


override&lt;variable&gt;=&lt;value&gt;

override&lt;variable&gt;:=&lt;value&gt;



当然，你还可以追加：



override&lt;variable&gt;&#43;=&lt;moretext&gt;



对于多行的变量定义，我们用define指示符，在define指示符前，也同样可以使用ovveride指示符，如：



overridedefinefoo

bar

endef



六、多行变量



还有一种设置变量&#20540;的方法是使用define关键字。使用define关键字设置变量的&#20540;可以有换行，这有利于定义一系列的命令（前面我们讲过“命令包”的技术就是利用这个关键字）。


define指示符后面跟的是变量的名字，而重起一行定义变量的&#20540;，定义是以endef关键字结束。其工作方式和“=”操作符一样。变量的&#20540;可以包含函数、命令、文字，或是其它变量。因为命令需要以[Tab]键开头，所以如果你用define定义的命令变量中没有以[Tab]键开头，那么make就不会把其认为是命令。


下面的这个示例展示了define的用法：



definetwo-lines

echofoo

echo$(bar)

endef



七、环境变量



make运行时的系统环境变量可以在make开始运行时被载入到Makefile文件中，但是如果Makefile中已定义了这个变量，或是这个变量由make命令行带入，那么系统的环境变量的&#20540;将被覆盖。（如果make指定了“-e”参数，那么，系统环境变量将覆盖Makefile中定义的变量）


因此，如果我们在环境变量中设置了“CFLAGS”环境变量，那么我们就可以在所有的Makefile中使用这个变量了。这对于我们使用统一的编译参数有比较大的好处。如果Makefile中定义了CFLAGS，那么则会使用Makefile中的这个变量，如果没有定义则使用系统环境变量的&#20540;，一个共性和个性的统一，很像“全局变量”和“局部变量”的特性。


当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile中。当然，默认情况下，只有通过命令行设置的变量会被传递。而定义在文件中的变量，如果要向下层
Makefile传递，则需要使用exprot关键字来声明。（参见前面章节）




当然，我并不推荐把许多的变量都定义在系统环境中，这样，在我们执行不用的Makefile时，拥有的是同一套系统变量，这可能会带来更多的麻烦。





八、目标变量



前面我们所讲的在Makefile中定义的变量都是“全局变量”，在整个文件，我们都可以访问这些变量。当然，“自动化变量”除外，如“$&lt;”等这种类量的自动化变量就属于“规则型变量”，这种变量的&#20540;依赖于规则的目标和依赖目标的定义。


当然，我样同样可以为某个目标设置局部变量，这种变量被称为“Target-specificVariable”，它可以和“全局变量”同名，因为它的作用范围只在这条规则以及连带规则中，所以其&#20540;也只在作用范围内有效。而不会影响规则链以外的全局变量的&#20540;。


其语法是：



&lt;target...&gt;:&lt;variable-assignment&gt;



&lt;target...&gt;:overide&lt;variable-assignment&gt;



&lt;variable-assignment&gt;可以是前面讲过的各种赋&#20540;表达式，如“=”、“:=”、“&#43;=”或是“？=”。第二个语法是针对于make命令行带入的变量，或是系统环境变量。


这个特性非常的有用，当我们设置了这样一个变量，这个变量会作用到由这个目标所引发的所有的规则中去。如：


prog:CFLAGS=-g

prog:prog.ofoo.obar.o

$(CC)$(CFLAGS)prog.ofoo.obar.o



prog.o:prog.c

$(CC)$(CFLAGS)prog.c



foo.o:foo.c

$(CC)$(CFLAGS)foo.c



bar.o:bar.c

$(CC)$(CFLAGS)bar.c



在这个示例中，不管全局的$(CFLAGS)的&#20540;是什么，在prog目标，以及其所引发的所有规则中（prog.ofoo.obar.o的规则），$(CFLAGS)的&#20540;都是“-g”





九、模式变量



在GNU的make中，还支持模式变量（Pattern-specificVariable），通过上面的目标变量中，我们知道，变量可以定义在某个目标上。模式变量的好处就是，我们可以给定一种“模式”，可以把变量定义在符合这种模式的所有目标上。


我们知道，make的“模式”一般是至少含有一个“%”的，所以，我们可以以如下方式给所有以[.o]结尾的目标定义目标变量：



%.o:CFLAGS=-O



同样，模式变量的语法和“目标变量”一样：



&lt;pattern...&gt;:&lt;variable-assignment&gt;



&lt;pattern...&gt;:override&lt;variable-assignment&gt;



override同样是针对于系统环境传入的变量，或是make命令行指定的变量。



使用条件判断

——————



使用条件判断，可以让make根据运行时的不同情况选择不同的执行分支。条件表达式可以是比较变量的&#20540;，或是比较变量和常量的&#20540;。


一、示例



下面的例子，判断$(CC)变量是否“gcc”，如果是的话，则使用GNU函数编译目标。



libs_for_gcc=-lgnu

normal_libs=



foo:$(objects)

ifeq($(CC),gcc)

$(CC)-ofoo$(objects)$(libs_for_gcc)

else

$(CC)-ofoo$(objects)$(normal_libs)

endif



可见，在上面示例的这个规则中，目标“foo”可以根据变量“$(CC)”&#20540;来选取不同的函数库来编译程序。


我们可以从上面的示例中看到三个关键字：ifeq、else和endif。ifeq的意思表示条件语句的开始，并指定一个条件表达式，表达式包含两个参数，以逗号分隔，表达式以圆括号括起。else表示条件表达式为假的情况。endif表示一个条件语句的结束，任何一个条件表达式都应该以endif结束。


当我们的变量$(CC)&#20540;是“gcc”时，目标foo的规则是：



foo:$(objects)

$(CC)-ofoo$(objects)$(libs_for_gcc)



而当我们的变量$(CC)&#20540;不是“gcc”时（比如“cc”），目标foo的规则是：


foo:$(objects)

$(CC)-ofoo$(objects)$(normal_libs)



当然，我们还可以把上面的那个例子写得更简洁一些：



libs_for_gcc=-lgnu

normal_libs=



ifeq($(CC),gcc)

libs=$(libs_for_gcc)

else

libs=$(normal_libs)

endif



foo:$(objects)

$(CC)-ofoo$(objects)$(libs)





二、语法



条件表达式的语法为：



&lt;conditional-directive&gt;

&lt;text-if-true&gt;

endif



以及：



&lt;conditional-directive&gt;

&lt;text-if-true&gt;

else

&lt;text-if-false&gt;

endif



其中&lt;conditional-directive&gt;表示条件关键字，如“ifeq”。这个关键字有四个。


第一个是我们前面所见过的“ifeq”



ifeq(&lt;arg1&gt;,&lt;arg2&gt;)

ifeq'&lt;arg1&gt;''&lt;arg2&gt;'

ifeq&quot;&lt;arg1&gt;&quot;&quot;&lt;arg2&gt;&quot;

ifeq&quot;&lt;arg1&gt;&quot;'&lt;arg2&gt;'

ifeq'&lt;arg1&gt;'&quot;&lt;arg2&gt;&quot;



比较参数“arg1”和“arg2”的&#20540;是否相同。当然，参数中我们还可以使用make的函数。如：



ifeq($(strip$(foo)),)

&lt;text-if-empty&gt;

endif



这个示例中使用了“strip”函数，如果这个函数的返回&#20540;是空（Empty），那么&lt;text-if-empty&gt;就生效。


第二个条件关键字是“ifneq”。语法是：



ifneq(&lt;arg1&gt;,&lt;arg2&gt;)

ifneq'&lt;arg1&gt;''&lt;arg2&gt;'

ifneq&quot;&lt;arg1&gt;&quot;&quot;&lt;arg2&gt;&quot;

ifneq&quot;&lt;arg1&gt;&quot;'&lt;arg2&gt;'

ifneq'&lt;arg1&gt;'&quot;&lt;arg2&gt;&quot;



其比较参数“arg1”和“arg2”的&#20540;是否相同，如果不同，则为真。和“ifeq”类&#20284;。





第三个条件关键字是“ifdef”。语法是：



ifdef&lt;variable-name&gt;



如果变量&lt;variable-name&gt;的&#20540;非空，那到表达式为真。否则，表达式为假。当然，&lt;variable-name&gt;同样可以是一个函数的返回&#20540;。注意，ifdef只是测试一个变量是否有&#20540;，其并不会把变量扩展到当前位置。还是来看两个例子：



示例一：

bar=

foo=$(bar)

ifdeffoo

frobozz=yes

else

frobozz=no

endif



示例二：

foo=

ifdeffoo

frobozz=yes

else

frobozz=no

endif



第一个例子中，“$(frobozz)”&#20540;是“yes”，第二个则是“no”。



第四个条件关键字是“ifndef”。其语法是：



ifndef&lt;variable-name&gt;



这个我就不多说了，和“ifdef”是相反的意思。



在&lt;conditional-directive&gt;这一行上，多余的空&#26684;是被允许的，但是不能以[Tab]键做为开始（不然就被认为是命令）。而注释符“#”同样也是安全的。“else”和“endif”也

一样，只要不是以[Tab]键开始就行了。


特别注意的是，make是在读取Makefile时就计算条件表达式的&#20540;，并根据条件表达式的&#20540;来选择语句，所以，你最好不要把自动化变量（如“$@”等）放入条件表达式中，因为自动化变量是在运行时才有的。


而且，为了避免混乱，make不允许把整个条件语句分成两部分放在不同的文件中。






使用函数

————



在Makefile中可以使用函数来处理变量，从而让我们的命令或是规则更为的灵活和具有智能。make所支持的函数也不算很多，不过已经足够我们的操作了。函数调用后，函数的返回&#20540;可以当做变量来使用。



一、函数的调用语法



函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：



$(&lt;function&gt;&lt;arguments&gt;)



或是



${&lt;function&gt;&lt;arguments&gt;}



这里，&lt;function&gt;就是函数名，make支持的函数不多。&lt;arguments&gt;是函数的参数，参数间以逗号“,”分隔，而函数名和参数之间以“空&#26684;”分隔。函数调用以“$”开头，以圆括号或花括号把函数名和参数括起。感觉很像一个变量，是不是？函数中的参数可以使用变量，为了风&#26684;的统一，函数和变量的括号最好一样，如使用“$(substa,b,$(x))”这样的形式，而不是“$(substa,b,${x})”的形式。因为统一会更清楚，也会减少一些不必要的麻烦。



还是来看一个示例：



comma:=,

empty:=

space:=$(empty)$(empty)

foo:=abc

bar:=$(subst$(space),$(comma),$(foo))



在这个示例中，$(comma)的&#20540;是一个逗号。$(space)使用了$(empty)定义了一个空&#26684;，$(foo)的&#20540;是“abc”，$(bar)的定义用，调用了函数“subst”，这是一个替换函数，这个函数有三个参数，第一个参数是被替换字串，第二个参数是替换字串，第三个参数是替换操作作用的字串。这个函数也就是把$(foo)中的空&#26684;替换成逗号，所以$(bar)的&#20540;是“

a,b,c”。


二、字符串处理函数



$(subst&lt;from&gt;,&lt;to&gt;,&lt;text&gt;)



名称：字符串替换函数——subst。

功能：把字串&lt;text&gt;中的&lt;from&gt;字符串替换成&lt;to&gt;。

返回：函数返回被替换过后的字符串。



示例：



$(substee,EE,feetonthestreet)，



把“feetonthestreet”中的“ee”替换成“EE”，返回结果是“fEEtonthestrEEt

”。





$(patsubst&lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)



名称：模式字符串替换函数——patsubst。

功能：查找&lt;text&gt;中的单词（单词以“空&#26684;”、“Tab”或“回车”“换行”分隔）是否符合模式&lt;pattern&gt;，如果匹配的话，则以&lt;replacement&gt;替换。这里，&lt;pattern&gt;可以包括通配符“%”，表示任意长度的字串。如果&lt;replacement&gt;中也包含“%”，那么，&lt;replacement&gt;中的这个“%”将是&lt;pattern&gt;中的那个“%”所代表的字串。（可以用“\”来转义，以“\%”来表示真实含义的“%”字符）返回：函数返回被替换过后的字符串。



示例：



$(patsubst%.c,%.o,x.c.cbar.c)



把字串“x.c.cbar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.obar.o”



备注：



这和我们前面“变量章节”说过的相关知识有点相&#20284;。如：



“$(var:&lt;pattern&gt;=&lt;replacement&gt;)”

相当于

“$(patsubst&lt;pattern&gt;,&lt;replacement&gt;,$(var))”，



而“$(var:&lt;suffix&gt;=&lt;replacement&gt;)”

则相当于

“$(patsubst%&lt;suffix&gt;,%&lt;replacement&gt;,$(var))”。



例如有：objects=foo.obar.obaz.o，

那么，“$(objects:.o=.c)”和“$(patsubst%.o,%.c,$(objects))”是一样的。



$(strip&lt;string&gt;)



名称：去空&#26684;函数——strip。

功能：去掉&lt;string&gt;字串中开头和结尾的空字符。

返回：返回被去掉空&#26684;的字符串&#20540;。

示例：



$(stripabc)



把字串“abc”去到开头和结尾的空&#26684;，结果是“abc”。



$(findstring&lt;find&gt;,&lt;in&gt;)



名称：查找字符串函数——findstring。

功能：在字串&lt;in&gt;中查找&lt;find&gt;字串。

返回：如果找到，那么返回&lt;find&gt;，否则返回空字符串。

示例：



$(findstringa,abc)

$(findstringa,bc)



第一个函数返回“a”字符串，第二个返回“”字符串（空字符串）



$(filter&lt;pattern...&gt;,&lt;text&gt;)



名称：过滤函数——filter。

功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，保留符合模式&lt;pattern&gt;的单词。可

以有多个模式。

返回：返回符合模式&lt;pattern&gt;的字串。

示例：



sources:=foo.cbar.cbaz.sugh.h

foo:$(sources)

cc$(filter%.c%.s,$(sources))-ofoo



$(filter%.c%.s,$(sources))返回的&#20540;是“foo.cbar.cbaz.s”。



$(filter-out&lt;pattern...&gt;,&lt;text&gt;)



名称：反过滤函数——filter-out。

功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，去除符合模式&lt;pattern&gt;的单词。可

以有多个模式。

返回：返回不符合模式&lt;pattern&gt;的字串。

示例：



objects=main1.ofoo.omain2.obar.o

mains=main1.omain2.o



$(filter-out$(mains),$(objects))返回&#20540;是“foo.obar.o”。



$(sort&lt;list&gt;)



名称：排序函数——sort。

功能：给字符串&lt;list&gt;中的单词排序（升序）。

返回：返回排序后的字符串。

示例：$(sortfoobarlose)返回“barfoolose”。

备注：sort函数会去掉&lt;list&gt;中相同的单词。



$(word&lt;n&gt;,&lt;text&gt;)



名称：取单词函数——word。

功能：取字符串&lt;text&gt;中第&lt;n&gt;个单词。（从一开始）

返回：返回字符串&lt;text&gt;中第&lt;n&gt;个单词。如果&lt;n&gt;比&lt;text&gt;中的单词数要大，那么返回空

字符串。

示例：$(word2,foobarbaz)返回&#20540;是“bar”。



$(wordlist&lt;s&gt;,&lt;e&gt;,&lt;text&gt;)



名称：取单词串函数——wordlist。

功能：从字符串&lt;text&gt;中取从&lt;s&gt;开始到&lt;e&gt;的单词串。&lt;s&gt;和&lt;e&gt;是一个数字。

返回：返回字符串&lt;text&gt;中从&lt;s&gt;到&lt;e&gt;的单词字串。如果&lt;s&gt;比&lt;text&gt;中的单词数要大，那

么返回空字符串。如果&lt;e&gt;大于&lt;text&gt;的单词数，那么返回从&lt;s&gt;开始，到&lt;text&gt;结束的单

词串。

示例：$(wordlist2,3,foobarbaz)返回&#20540;是“barbaz”。



$(words&lt;text&gt;)



名称：单词个数统计函数——words。

功能：统计&lt;text&gt;中字符串中的单词个数。

返回：返回&lt;text&gt;中的单词数。

示例：$(words,foobarbaz)返回&#20540;是“3”。

备注：如果我们要取&lt;text&gt;中最后的一个单词，我们可以这样：$(word$(words&lt;text&gt;


),&lt;text&gt;)。



$(firstword&lt;text&gt;)



名称：首单词函数——firstword。

功能：取字符串&lt;text&gt;中的第一个单词。

返回：返回字符串&lt;text&gt;的第一个单词。

示例：$(firstwordfoobar)返回&#20540;是“foo”。

备注：这个函数可以用word函数来实现：$(word1,&lt;text&gt;)。



以上，是所有的字符串操作函数，如果搭配混合使用，可以完成比较复杂的功能。这里，

举一个现实中应用的例子。我们知道，make使用“VPATH”变量来指定“依赖文件”的搜索

路径。于是，我们可以利用这个搜索路径来指定编译器对头文件的搜索路径参数CFLAGS，

如：



overrideCFLAGS&#43;=$(patsubst%,-I%,$(subst:,,$(VPATH)))



如果我们的“$(VPATH)”&#20540;是“src:../headers”，那么“$(patsubst%,-I%,$(subst:

,,$(VPATH)))”将返回“-Isrc-I../headers”，这正是cc或gcc搜索头文件路径的参数

。



三、文件名操作函数


下面我们要介绍的函数主要是处理文件名的。每个函数的参数字符串都会被当做一个或是

一系列的文件名来对待。



$(dir&lt;names...&gt;)



名称：取目录函数——dir。

功能：从文件名序列&lt;names&gt;中取出目录部分。目录部分是指最后一个反斜杠（“/”）之

前的部分。如果没有反斜杠，那么返回“./”。

返回：返回文件名序列&lt;names&gt;的目录部分。

示例：$(dirsrc/foo.chacks)返回&#20540;是“src/./”。



$(notdir&lt;names...&gt;)



名称：取文件函数——notdir。

功能：从文件名序列&lt;names&gt;中取出非目录部分。非目录部分是指最后一个反斜杠（“/”

）之后的部分。

返回：返回文件名序列&lt;names&gt;的非目录部分。

示例：$(notdirsrc/foo.chacks)返回&#20540;是“foo.chacks”。



$(suffix&lt;names...&gt;)



名称：取后缀函数——suffix。

功能：从文件名序列&lt;names&gt;中取出各个文件名的后缀。

返回：返回文件名序列&lt;names&gt;的后缀序列，如果文件没有后缀，则返回空字串。

示例：$(suffixsrc/foo.csrc-1.0/bar.chacks)返回&#20540;是“.c.c”。



$(basename&lt;names...&gt;)



名称：取前缀函数——basename。

功能：从文件名序列&lt;names&gt;中取出各个文件名的前缀部分。

返回：返回文件名序列&lt;names&gt;的前缀序列，如果文件没有前缀，则返回空字串。

示例：$(basenamesrc/foo.csrc-1.0/bar.chacks)返回&#20540;是“src/foosrc-1.0/barh

acks”。



$(addsuffix&lt;suffix&gt;,&lt;names...&gt;)



名称：加后缀函数——addsuffix。

功能：把后缀&lt;suffix&gt;加到&lt;names&gt;中的每个单词后面。

返回：返回加过后缀的文件名序列。

示例：$(addsuffix.c,foobar)返回&#20540;是“foo.cbar.c”。


$(addprefix&lt;prefix&gt;,&lt;names...&gt;)



名称：加前缀函数——addprefix。

功能：把前缀&lt;prefix&gt;加到&lt;names&gt;中的每个单词后面。

返回：返回加过前缀的文件名序列。

示例：$(addprefixsrc/,foobar)返回&#20540;是“src/foosrc/bar”。



$(join&lt;list1&gt;,&lt;list2&gt;)



名称：连接函数——join。

功能：把&lt;list2&gt;中的单词对应地加到&lt;list1&gt;的单词后面。如果&lt;list1&gt;的单词个数要比&lt;

list2&gt;的多，那么，&lt;list1&gt;中的多出来的单词将保持原样。如果&lt;list2&gt;的单词个数要比

&lt;list1&gt;多，那么，&lt;list2&gt;多出来的单词将被复制到&lt;list2&gt;中。

返回：返回连接过后的字符串。

示例：$(joinaaabbb,111222333)返回&#20540;是“aaa111bbb222333”。



四、foreach函数



foreach函数和别的函数非常的不一样。因为这个函数是用来做循环用的，Makefile中的

foreach函数几乎是仿照于Unix标准Shell（/bin/sh）中的for语句，或是C-Shell（/bin

/csh）中的foreach语句而构建的。它的语法是：


$(foreach&lt;var&gt;,&lt;list&gt;,&lt;text&gt;)



这个函数的意思是，把参数&lt;list&gt;中的单词逐一取出放到参数&lt;var&gt;所指定的变量中，然后再执行&lt;text&gt;所包含的表达式。每一次&lt;text&gt;会返回一个字符串，循环过程中，&lt;text&gt;的所返回的每个字符串会以空&#26684;分隔，最后当整个循环结束时，&lt;text&gt;所返回的每个字符串所组成的整个字符串（以空&#26684;分隔）将会是foreach函数的返回&#20540;。


所以，&lt;var&gt;最好是一个变量名，&lt;list&gt;可以是一个表达式，而&lt;text&gt;中一般会使用&lt;var&gt;

这个参数来依次枚举&lt;list&gt;中的单词。举个例子：



names:=abcd



files:=$(foreachn,$(names),$(n).o)


上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次根据“$(n)”计算出一个&#20540;，这些&#20540;以空&#26684;分隔，最后作为foreach函数的返回，所以，$(f

iles)的&#20540;是“a.ob.oc.od.o”。



注意，foreach中的&lt;var&gt;参数是一个临时的局部变量，foreach函数执行完后，参数&lt;var&gt;的变量将不在作用，其作用域只在foreach函数当中。




五、if函数



if函数很像GNU的make所支持的条件语句——ifeq（参见前面所述的章节），if函数的语法是：



$(if&lt;condition&gt;,&lt;then-part&gt;)




或是



$(if&lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)




可见，if函数可以包含“else”部分，或是不含。即if函数的参数可以是两个，也可以是三个。&lt;condition&gt;参数是if的表达式，如果其返回的为非空字符串，那么这个表达式就相当于返回真，于是，&lt;then-part&gt;会被计算，否则&lt;else-part&gt;会被计算。


而if函数的返回&#20540;是，如果&lt;condition&gt;为真（非空字符串），那个&lt;then-part&gt;会是整个函数的返回&#20540;，如果&lt;condition&gt;为假（空字符串），那么&lt;else-part&gt;会是整个函数的返回&#20540;，此时如果&lt;else-part&gt;没有被定义，那么，整个函数返回空字串。


所以，&lt;then-part&gt;和&lt;else-part&gt;只会有一个被计算。




六、call函数


call函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用call函数来向这个表达式传递参数。其语法是：



$(call&lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)



当make执行这个函数时，&lt;expression&gt;参数中的变量，如$(1)，$(2)，$(3)等，会被参数&lt;parm1&gt;，&lt;parm2&gt;，&lt;parm3&gt;依次取代。而&lt;expression&gt;的返回&#20540;就是call函数的返回&#20540;。例如：


reverse=$(1)$(2)


foo=$(callreverse,a,b)




那么，foo的&#20540;就是“ab”。当然，参数的次序是可以自定义的，不一定是顺序的，如：


reverse=$(2)$(1)

foo=$(callreverse,a,b)


此时的foo的&#20540;就是“ba”。


七、origin函数

origin函数不像其它的函数，他并不操作变量的&#20540;，他只是告诉你你的这个变量是哪里来的？其语法是：


$(origin&lt;variable&gt;)



注意，&lt;variable&gt;是变量的名字，不应该是引用。所以你最好不要在&lt;variable&gt;中使用“$”字符。Origin函数会以其返回&#20540;来告诉你这个变量的“出生情况”，下面，是origin函

数的返回&#20540;:


“undefined”



如果&lt;variable&gt;从来没有定义过，origin函数返回这个&#20540;“undefined”。


“default”



如果&lt;variable&gt;是一个默认的定义，比如“CC”这个变量，这种变量我们将在后面讲述。


“environment”



如果&lt;variable&gt;是一个环境变量，并且当Makefile被执行时，“-e”参数没有被打开。



“file”



如果&lt;variable&gt;这个变量被定义在Makefile中。



“commandline”



如果&lt;variable&gt;这个变量是被命令行定义的。


“override”



如果&lt;variable&gt;是被override指示符重新定义的。


“automatic”



如果&lt;variable&gt;是一个命令运行中的自动化变量。关于自动化变量将在后面讲述。



这些信息对于我们编写Makefile是非常有用的，例如，假设我们有一个Makefile其包了一个定义文件Make.def，在Make.def中定义了一个变量“bletch”，而我们的环境中也有一

个环境变量“bletch”，此时，我们想判断一下，如果变量来源于环境，那么我们就把之重定义了，如果来源于Make.def或是命令行等非环境的，那么我们就不重新定义它。于是

，在我们的Makefile中，我们可以这样写：



ifdefbletch



ifeq&quot;$(originbletch)&quot;&quot;environment&quot;



bletch=barf,gag,etc.


endif


endif


当然，你也许会说，使用override关键字不就可以重新定义环境中的变量了吗？为什么需要使用这样的步骤？是的，我们用override是可以达到这样的效果，可是override过于粗

暴，它同时会把从命令行定义的变量也覆盖了，而我们只想重新定义环境传来的，而不想重新定义命令行传来的。



八、shell函数


shell函数也不像其它的函数。顾名思义，它的参数应该就是操作系统Shell的命令。它和反引号“`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数

返回。于是，我们可以用操作系统命令以及字符串处理命令awk，sed等等命令来生成一个变量，如：



contents:=$(shellcatfoo)




files:=$(shellecho*.c)



注意，这个函数会新生成一个Shell程序来执行命令，所以你要注意其运行性能，如果你的Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有害的。特别是Makefile的隐晦的规则可能会让你的shell函数执行的次数比你想像的多得多。



九、控制make的函数




make提供了一些函数来控制make的运行。通常，你需要检测一些运行Makefile时的运行时信息，并且根据这些信息来决定，你是让make继续执行，还是停止。



$(error&lt;text...&gt;)


产生一个致命的错误，&lt;text...&gt;是错误信息。注意，error函数不会在一被使用就会产生错误信息，所以如果你把其定义在某个变量中，并在后续的脚本中使用这个变量，那么也

是可以的。例如：


示例一：



ifdefERROR_001



$(errorerroris$(ERROR_001))


endif



示例二：



ERR=$(errorfoundanerror!)



.PHONY:err



err:;$(ERR)



示例一会在变量ERROR_001定义了后执行时产生error调用，而示例二则在目录err被执行时才发生error调用。


$(warning&lt;text...&gt;)



这个函数很像error函数，只是它并不会让make退出，只是输出一段警告信息，而make继续执行。
0——表示成功执行。
1——如果make运行时出现任何错误，其返回1。
2——如果你使用了make的“-q”选项，并且make使得一些目标不需要更新，那么返回2。
Make的相关参数我们会在后续章节中讲述。





二、指定Makefile



前面我们说过，GNUmake找寻默认的Makefile的规则是在当前目录下依次找三个文件——“GNUmakefile”、“makefile”和“Makefile”。其按顺序找这三个文件，一旦找到，就

开始读取这个文件并执行。



当前，我们也可以给make命令指定一个特殊名字的Makefile。要达到这个功能，我们要使用make的“-f”或是“--file”参数（“--makefile”参数也行）。例如，我们有个mak

efile的名字是“hchen.mk”，那么，我们可以这样来让make来执行这个文件：


make–fhchen.mk



如果在make的命令行是，你不只一次地使用了“-f”参数，那么，所有指定的makefile将会被连在一起传递给make执行。



三、指定目标



一般来说，make的最终目标是makefile中的第一个目标，而其它目标一般是由这个目标连带出来的。这是make的默认行为。当然，一般来说，你的makefile中的第一个目标是由许多个目标组成，你可以指示make，让其完成你所指定的目标。要达到这一目的很简单，需在make命令后直接跟目标的名字就可以完成（如前面提到的“makeclean”形式）任何在makefile中的目标都可以被指定成终极目标，但是除了以“-”打头，或是包含了“=”的目标，因为有这些字符的目标，会被解析成命令行参数或是变量。甚至没有被我们明确写出来的目标也可以成为make的终极目标，也就是说，只要make可以找到其隐含规则推导规则，那么这个隐含目标同样可以被指定成终极目标。


有一个make的环境变量叫“MAKECMDGOALS”，这个变量中会存放你所指定的终极目标的列表，如果在命令行上，你没有指定目标，那么，这个变量是空&#20540;。这个变量可以让你使用在一些比较特殊的情形下。比如下面的例子：



sources=foo.cbar.c

ifneq($(MAKECMDGOALS),clean)

include$(sources:.c=.d)

endif



基于上面的这个例子，只要我们输入的命令不是“makeclean”，那么makefile会自动包含“foo.d”和“bar.d”这两个makefile。


使用指定终极目标的方法可以很方便地让我们编译我们的程序，例如下面这个例子：



.PHONY:all

all:prog1prog2prog3prog4



从这个例子中，我们可以看到，这个makefile中有四个需要编译的程序——“prog1”，
“prog2”，“prog3”和“prog4”，我们可以使用“makeall”命令来编译所有的目标

（如果把all置成第一个目标，那么只需执行“make”），我们也可以使用“makeprog2”来单独编译目标“prog2”。



即然make可以指定所有makefile中的目标，那么也包括“伪目标”，于是我们可以根据这种性质来让我们的makefile根据指定的不同的目标来完成不同的事。在Unix世界中，软件

发布时，特别是GNU这种开源软件的发布时，其makefile都包含了编译、安装、打包等功能。我们可以参照这种规则来书写我们的makefile中的目标。
“all”






这个伪目标是所有目标的目标，其功能一般是编译所有的目标。
“clean”



这个伪目标功能是删除所有被make创建的文件。
“install”



这个伪目标功能是安装已编译好的程序，其实就是把目标执行文件拷贝到指定的目标中去。
“print”




这个伪目标的功能是例出改变过的源文件。
“tar”






这个伪目标功能是把源程序打包备份。也就是一个tar文件。
“dist”





这个伪目标功能是创建一个压缩文件，一般是把tar文件压成Z文件。或是gz文件。
“TAGS”



这个伪目标功能是更新所有的目标，以备完整地重编译使用。
“check”和“test”

这两个伪目标一般用来测试makefile的流程。
当然一个项目的makefile中也不一定要书写这样的目标，这些东西都是GNU的东西，但是我想，GNU搞出这些东西一定有其可取之处（等你的UNIX下的程序文件一多时你就会发现这些功能很有用了），这里只不过是说明了，如果你要书写这种功能，最好使用这种名字命名你的目标，这样规范一些，规范的好处就是——不用解释，大家都明白。而且如果你的makefile中有这些功能，一是很实用，二是可以显得你的makefile很专业（不是那种初学者的作品）。



四、检查规则



有时候，我们不想让我们的makefile中的规则执行起来，我们只想检查一下我们的命令，或是执行的序列。于是我们可以使用make命令的下述参数：



“-n”

“--just-print”

“--dry-run”

“--recon”

不执行参数，这些参数只是打印命令，不管目标是否更新，把规则和连带规则下的命令打印出来，但不执行，这些参数对于我们调试makefile很有用处。



“-t”

“--touch”

这个参数的意思就是把目标文件的时间更新，但不更改目标文件。也就是说，make假装编译目标，但不是真正的编译目标，只是把目标变成已编译过的状态。



“-q”

“--question”

这个参数的行为是找目标的意思，也就是说，如果目标存在，那么其什么也不会输出，当然也不会执行编译，如果目标不存在，其会打印出一条出错信息。



“-W&lt;file&gt;”

“--what-if=&lt;file&gt;”

“--assume-new=&lt;file&gt;”

“--new-file=&lt;file&gt;”

这个参数需要指定一个文件。一般是是源文件（或依赖文件），Make会根据规则推导来运行依赖于这个文件的命令，一般来说，可以和“-n”参数一同使用，来查看这个依赖文件

所发生的规则命令。


另外一个很有意思的用法是结合“-p”和“-v”来输出makefile被执行时的信息（这个将在后面讲述）。




五、make的参数



下面列举了所有GNUmake3.80版的参数定义。其它版本和产商的make大同小异，不过其它产商的make的具体参数还是请参考各自的产品文档。



“-b”

“-m”

这两个参数的作用是忽略和其它版本make的兼容性。



“-B”

“--always-make”

认为所有的目标都需要更新（重编译）。



“-C&lt;dir&gt;”

“--directory=&lt;dir&gt;”

指定读取makefile的目录。如果有多个“-C”参数，make的解释是后面的路径以前面的作为相对路径，并以最后的目录作为被指定目录。如：“make–C~hchen/test–Cprog”

等价于“make–C~hchen/test/prog”。



“—debug[=&lt;options&gt;]”

输出make的调试信息。它有几种不同的级别可供选择，如果没有参数，那就是输出最简单的调试信息。下面是&lt;options&gt;的取&#20540;：
a——也就是all，输出所有的调试信息。（会非常的多）
b——也就是basic，只输出简单的调试信息。即输出不需要重编译的目标。
v——也就是verbose，在b选项的级别之上。输出的信息包括哪个makefile被解析，不需要被重编译的依赖文件（或是依赖目标）等。
i——也就是implicit，输出所以的隐含规则。
j——也就是jobs，输出执行规则中命令的详细信息，如命令的PID、返回码等。
m——也就是makefile，输出make读取makefile，更新makefile，执行makefile的信息。
“-d”

相当于“--debug=a”。



“-e”

“--environment-overrides”

指明环境变量的&#20540;覆盖makefile中定义的变量的&#20540;。



“-f=&lt;file&gt;”

“--file=&lt;file&gt;”

“--makefile=&lt;file&gt;”

指定需要执行的makefile。



“-h”

“--help”

显示帮助信息。



“-i”

“--ignore-errors”

在执行时忽略所有的错误。



“-I&lt;dir&gt;”

“--include-dir=&lt;dir&gt;”

指定一个被包含makefile的搜索目标。可以使用多个“-I”参数来指定多个目录。



“-j[&lt;jobsnum&gt;]”

“--jobs[=&lt;jobsnum&gt;]”

指同时运行命令的个数。如果没有这个参数，make运行命令时能运行多少就运行多少。如果有一个以上的“-j”参数，那么仅最后一个“-j”才是有效的。（注意这个参数在MS-D

OS中是无用的）



“-k”

“--keep-going”

出错也不停止运行。如果生成一个目标失败了，那么依赖于其上的目标就不会被执行了。





“-l&lt;load&gt;”

“--load-average[=&lt;load]”

“—max-load[=&lt;load&gt;]”

指定make运行命令的负载。



“-n”

“--just-print”

“--dry-run”

“--recon”

仅输出执行过程中的命令序列，但并不执行。



“-o&lt;file&gt;”

“--old-file=&lt;file&gt;”

“--assume-old=&lt;file&gt;”

不重新生成的指定的&lt;file&gt;，即使这个目标的依赖文件新于它。



“-p”

“--print-data-base”

输出makefile中的所有数据，包括所有的规则和变量。这个参数会让一个简单的makefile都会输出一堆信息。如果你只是想输出信息而不想执行makefile，你可以使用“make-q

p”命令。如果你想查看执行makefile前的预设变量和规则，你可以使用“make–p–f
/dev/null”。这个参数输出的信息会包含着你的makefile文件的文件名和行号，所以，用

这个参数来调试你的makefile会是很有用的，特别是当你的环境变量很复杂的时候。


“-q”

“--question”

不运行命令，也不输出。仅仅是检查所指定的目标是否需要更新。如果是0则说明要更新，如果是2则说明有错误发生。



“-r”

“--no-builtin-rules”

禁止make使用任何隐含规则。



“-R”

“--no-builtin-variabes”

禁止make使用任何作用于变量上的隐含规则。



“-s”

“--silent”

“--quiet”

在命令运行时不输出命令的输出。



“-S”

“--no-keep-going”

“--stop”

取消“-k”选项的作用。因为有些时候，make的选项是从环境变量“MAKEFLAGS”中继承下来的。所以你可以在命令行中使用这个参数来让环境变量中的“-k”选项失效。



“-t”

“--touch”

相当于UNIX的touch命令，只是把目标的修改日期变成最新的，也就是阻止生成目标的命令运行。



“-v”

“--version”

输出make程序的版本、版权等关于make的信息。



“-w”

“--print-directory”

输出运行makefile之前和之后的信息。这个参数对于跟踪嵌套式调用make时很有用。



“--no-print-directory”

禁止“-w”选项。



“-W&lt;file&gt;”

“--what-if=&lt;file&gt;”

“--new-file=&lt;file&gt;”

“--assume-file=&lt;file&gt;”

假定目标&lt;file&gt;需要更新，如果和“-n”选项使用，那么这个参数会输出该目标更新时的运行动作。如果没有“-n”那么就像运行UNIX的“touch”命令一样，使得&lt;file&gt;的修改时

间为当前时间。



“--warn-undefined-variables”

只要make发现有未定义的变量，那么就输出警告信息。



隐含规则

————



在我们使用Makefile时，有一些我们会经常使用，而且使用频率非常高的东西，比如，我们编译C/C&#43;&#43;的源程序为中间目标文件（Unix下是[.o]文件，Windows下是[.obj]文件）。本章讲述的就是一些在Makefile中的“隐含的”，早先约定了的，不需要我们再写出来的规则。



“隐含规则”也就是一种惯例，make会按照这种“惯例”心照不喧地来运行，那怕我们的Makefile中没有书写这样的规则。例如，把[.c]文件编译成[.o]文件这一规则，你根本就

不用写出来，make会自动推导出这种规则，并生成我们需要的[.o]文件。


“隐含规则”会使用一些我们系统变量，我们可以改变这些系统变量的&#20540;来定制隐含规则的运行时的参数。如系统变量“CFLAGS”可以控制编译时的编译器参数。



我们还可以通过“模式规则”的方式写下自己的隐含规则。用“后缀规则”来定义隐含规则会有许多的限制。使用“模式规则”会更回得智能和清楚，但“后缀规则”可以用来保

证我们Makefile的兼容性。

我们了解了“隐含规则”，可以让其为我们更好的服务，也会让我们知道一些“约定俗成”了的东西，而不至于使得我们在运行Makefile时出现一些我们觉得莫名其妙的东西。当

然，任何事物都是矛盾的，水能载舟，亦可覆舟，所以，有时候“隐含规则”也会给我们造成不小的麻烦。只有了解了它，我们才能更好地使用它。



一、使用隐含规则



如果要使用隐含规则生成你需要的目标，你所需要做的就是不要写出这个目标的规则。那么，make会试图去自动推导产生这个目标的规则和命令，如果make可以自动推导生成这个目标的规则和命令，那么这个行为就是隐含规则的自动推导。当然，隐含规则是make事先约定好的一些东西。例如，我们有下面的一个Makefile：



foo:foo.obar.o

cc–ofoofoo.obar.o$(CFLAGS)$(LDFLAGS)



我们可以注意到，这个Makefile中并没有写下如何生成foo.o和bar.o这两目标的规则和命令。因为make的“隐含规则”功能会自动为我们自动去推导这两个目标的依赖目标和生成

命令。


make会在自己的“隐含规则”库中寻找可以用的规则，如果找到，那么就会使用。如果找不到，那么就会报错。在上面的那个例子中，make调用的隐含规则是，把[.o]的目标的依赖文件置成[.c]，并使用C的编译命令“cc–c$(CFLAGS)[.c]”来生成[.o]的目标。也就是说，我们完全没有必要写下下面的两条规则：



foo.o:foo.c

cc–cfoo.c$(CFLAGS)

bar.o:bar.c

cc–cbar.c$(CFLAGS)



因为，这已经是“约定”好了的事了，make和我们约定好了用C编译器“cc”生成[.o]文件的规则，这就是隐含规则。



当然，如果我们为[.o]文件书写了自己的规则，那么make就不会自动推导并调用隐含规则，它会按照我们写好的规则忠实地执行。



还有，在make的“隐含规则库”中，每一条隐含规则都在库中有其顺序，越靠前的则是越被经常使用的，所以，这会导致我们有些时候即使我们显示地指定了目标依赖，make也不会管。如下面这条规则（没有命令）：



foo.o:foo.p



依赖文件“foo.p”（Pascal程序的源文件）有可能变得没有意义。如果目录下存在了“foo.c”文件，那么我们的隐含规则一样会生效，并会通过“foo.c”调用C的编译器生成f

oo.o文件。因为，在隐含规则中，Pascal的规则出现在C的规则之后，所以，make找到可以生成foo.o的C的规则就不再寻找下一条规则了。如果你确实不希望任何隐含规则推导，那么，你就不要只写出“依赖规则”，而不写命令。



二、隐含规则一览



这里我们将讲述所有预先设置（也就是make内建）的隐含规则，如果我们不明确地写下规则，那么，make就会在这些规则中寻找所需要规则和命令。当然，我们也可以使用make的参数“-r”或“--no-builtin-rules”选项来取消所有的预设置的隐含规则。



当然，即使是我们指定了“-r”参数，某些隐含规则还是会生效，因为有许多的隐含规则都是使用了“后缀规则”来定义的，所以，只要隐含规则中有“后缀列表”（也就一系统

定义在目标.SUFFIXES的依赖目标），那么隐含规则就会生效。默认的后缀列表是：.out,.a,.ln,.o,.c,.cc,.C,.p,.f,.F,.r,.y,.l,.s,.S,.mod,.sym,.def,.

h,.info,.dvi,.tex,.texinfo,.texi,.txinfo,.w,.ch.web,.sh,.elc,.el。具体的细节，我们会在后面讲述。



还是先来看一看常用的隐含规则吧。



1、编译C程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.c”，并且其生成命令是“$(CC)–c$(CPPFLAGS)$(CFLAGS)”



2、编译C&#43;&#43;程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.cc”或是“&lt;n&gt;.C”，并且其生成命令是“$(CXX)–c$(CPPFLAGS)$(CFLAGS)”。（建议使用“.cc”作为C&#43;&#43;源文件的后缀，而

不是“.C”）



3、编译Pascal程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.p”，并且其生成命令是“$(PC)–c$(PFLAGS)”。



4、编译Fortran/Ratfor程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.r”或“&lt;n&gt;.F”或“&lt;n&gt;.f”，并且其生成命令是:

“.f”“$(FC)–c$(FFLAGS)”

“.F”“$(FC)–c$(FFLAGS)$(CPPFLAGS)”

“.f”“$(FC)–c$(FFLAGS)$(RFLAGS)”



5、预处理Fortran/Ratfor程序的隐含规则。

“&lt;n&gt;.f”的目标的依赖目标会自动推导为“&lt;n&gt;.r”或“&lt;n&gt;.F”。这个规则只是转换Ratfor或有预处理的Fortran程序到一个标准的Fortran程序。其使用的命令是：

“.F”“$(FC)–F$(CPPFLAGS)$(FFLAGS)”

“.r”“$(FC)–F$(FFLAGS)$(RFLAGS)”



6、编译Modula-2程序的隐含规则。

“&lt;n&gt;.sym”的目标的依赖目标会自动推导为“&lt;n&gt;.def”，并且其生成命令是：“$(M2C)$(M2FLAGS)$(DEFFLAGS)”。“&lt;n.o&gt;”的目标的依赖目标会自动推导为“&lt;n&gt;.mod”，

并且其生成命令是：“$(M2C)$(M2FLAGS)$(MODFLAGS)”。



7、汇编和汇编预处理的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.s”，默认使用编译品“as”，并且其生成命令是：“$(AS)$(ASFLAGS)”。“&lt;n&gt;.s”的目标的依赖目标会自动推导为“&lt;n&gt;.S”

，默认使用C预编译器“cpp”，并且其生成命令是：“$(AS)$(ASFLAGS)”。



8、链接Object文件的隐含规则。

“&lt;n&gt;”目标依赖于“&lt;n&gt;.o”，通过运行C的编译器来运行链接程序生成（一般是“ld”），其生成命令是：“$(CC)$(LDFLAGS)&lt;n&gt;.o$(LOADLIBES)$(LDLIBS)”。这个规则对

于只有一个源文件的工程有效，同时也对多个Object文件（由不同的源文件生成）的也有效。例如如下规则：


x:y.oz.o



并且“x.c”、“y.c”和“z.c”都存在时，隐含规则将执行如下命令：



cc-cx.c-ox.o

cc-cy.c-oy.o

cc-cz.c-oz.o

ccx.oy.oz.o-ox

rm-fx.o

rm-fy.o

rm-fz.o



如果没有一个源文件（如上例中的x.c）和你的目标名字（如上例中的x）相关联，那么，你最好写出自己的生成规则，不然，隐含规则会报错的。



9、YaccC程序时的隐含规则。


“&lt;n&gt;.c”的依赖文件被自动推导为“n.y”（Yacc生成的文件），其生成命令是：“$(YACC)$(YFALGS)”。（“Yacc”是一个语法分析器，关于其细节请查看相关资料）



10、LexC程序时的隐含规则。

“&lt;n&gt;.c”的依赖文件被自动推导为“n.l”（Lex生成的文件），其生成命令是：“$(LEX)$(LFALGS)”。（关于“Lex”的细节请查看相关资料）



11、LexRatfor程序时的隐含规则。

“&lt;n&gt;.r”的依赖文件被自动推导为“n.l”（Lex生成的文件），其生成命令是：“$(LEX

)$(LFALGS)”。



12、从C程序、Yacc文件或Lex文件创建Lint库的隐含规则。

“&lt;n&gt;.ln”（lint生成的文件）的依赖文件被自动推导为“n.c”，其生成命令是：“$(LINT)$(LINTFALGS)$(CPPFLAGS)-i”。对于“&lt;n&gt;.y”和“&lt;n&gt;.l”也是同样的规则。



三、隐含规则使用的变量



在隐含规则中的命令中，基本上都是使用了一些预先设置的变量。你可以在你的makefile中改变这些变量的&#20540;，或是在make的命令行中传入这些&#20540;，或是在你的环境变量中设置这些&#20540;，无论怎么样，只要设置了这些特定的变量，那么其就会对隐含规则起作用。当然，你也可以利用make的“-R”或“--no–builtin-variables”参数来取消你所定义的变量

对隐含规则的作用。


例如，第一条隐含规则——编译C程序的隐含规则的命令是“$(CC)–c$(CFLAGS)$(CPPFLAGS)”。Make默认的编译命令是“cc”，如果你把变量“$(CC)”重定义成“gcc”，把

变量“$(CFLAGS)”重定义成“-g”，那么，隐含规则中的命令全部会以“gcc–c-g$(CPPFLAGS)”的样子来执行了。



我们可以把隐含规则中使用的变量分成两种：一种是命令相关的，如“CC”；一种是参数

相的关，如“CFLAGS”。下面是所有隐含规则中会用到的变量：



1、关于命令的变量。



AR

函数库打包程序。默认命令是“ar”。

AS

汇编语言编译程序。默认命令是“as”。

CC

C语言编译程序。默认命令是“cc”。

CXX

C&#43;&#43;语言编译程序。默认命令是“g&#43;&#43;”。

CO

从RCS文件中扩展文件程序。默认命令是“co”。

CPP

C程序的预处理器（输出是标准输出设备）。默认命令是“$(CC)–E”。

FC

Fortran和Ratfor的编译器和预处理程序。默认命令是“f77”。

GET

从SCCS文件中扩展文件的程序。默认命令是“get”。

LEX

Lex方法分析器程序（针对于C或Ratfor）。默认命令是“lex”。

PC

Pascal语言编译程序。默认命令是“pc”。

YACC

Yacc文法分析器（针对于C程序）。默认命令是“yacc”。

YACCR

Yacc文法分析器（针对于Ratfor程序）。默认命令是“yacc–r”。

MAKEINFO

转换Texinfo源文件（.texi）到Info文件程序。默认命令是“makeinfo”。

TEX

从TeX源文件创建TeXDVI文件的程序。默认命令是“tex”。

TEXI2DVI

从Texinfo源文件创建军TeXDVI文件的程序。默认命令是“texi2dvi”。

WEAVE

转换Web到TeX的程序。默认命令是“weave”。

CWEAVE

转换CWeb到TeX的程序。默认命令是“cweave”。

TANGLE

转换Web到Pascal语言的程序。默认命令是“tangle”。

CTANGLE

转换CWeb到C。默认命令是“ctangle”。

RM

删除文件命令。默认命令是“rm–f”。



2、关于命令参数的变量


下面的这些变量都是相关上面的命令的参数。如果没有指明其默认&#20540;，那么其默认&#20540;都是

空。



ARFLAGS

函数库打包程序AR命令的参数。默认&#20540;是“rv”。

ASFLAGS

汇编语言编译器参数。（当明显地调用“.s”或“.S”文件时）。

CFLAGS

C语言编译器参数。

CXXFLAGS

C&#43;&#43;语言编译器参数。

COFLAGS

RCS命令参数。

CPPFLAGS

C预处理器参数。（C和Fortran编译器也会用到）。

FFLAGS

Fortran语言编译器参数。

GFLAGS

SCCS“get”程序参数。

LDFLAGS

链接器参数。（如：“ld”）

LFLAGS

Lex文法分析器参数。

PFLAGS

Pascal语言编译器参数。

RFLAGS

Ratfor程序的Fortran编译器参数。

YFLAGS

Yacc文法分析器参数。




四、隐含规则链



有些时候，一个目标可能被一系列的隐含规则所作用。例如，一个[.o]的文件生成，可能会是先被Yacc的[.y]文件先成[.c]，然后再被C的编译器生成。我们把这一系列的隐含规则

叫做“隐含规则链”。



在上面的例子中，如果文件[.c]存在，那么就直接调用C的编译器的隐含规则，如果没有[.c]文件，但有一个[.y]文件，那么Yacc的隐含规则会被调用，生成[.c]文件，然后，再调

用C编译的隐含规则最终由[.c]生成[.o]文件，达到目标。



我们把这种[.c]的文件（或是目标），叫做中间目标。不管怎么样，make会努力自动推导生成目标的一切方法，不管中间目标有多少，其都会执着地把所有的隐含规则和你书写的规则全部合起来分析，努力达到目标，所以，有些时候，可能会让你觉得奇怪，怎么我的目标会这样生成？怎么我的makefile发疯了？


在默认情况下，对于中间目标，它和一般的目标有两个地方所不同：第一个不同是除非中间的目标不存在，才会引发中间规则。第二个不同的是，只要目标成功产生，那么，产生最终目标过程中，所产生的中间目标文件会被以“rm-f”删除。


通常，一个被makefile指定成目标或是依赖目标的文件不能被当作中介。然而，你可以明显地说明一个文件或是目标是中介目标，你可以使用伪目标“.INTERMEDIATE”来强制声明。（如：.INTERMEDIATE：mid）



你也可以阻止make自动删除中间目标，要做到这一点，你可以使用伪目标“.SECONDARY”来强制声明（如：.SECONDARY:sec）。你还可以把你的目标，以模式的方式来指定（如：%.o）成伪目标“.PRECIOUS”的依赖目标，以保存被隐含规则所生成的中间文件。



在“隐含规则链”中，禁止同一个目标出现两次或两次以上，这样一来，就可防止在make自动推导时出现无限递归的情况。


Make会优化一些特殊的隐含规则，而不生成中间文件。如，从文件“foo.c”生成目标程序“foo”，按道理，make会编译生成中间文件“foo.o”，然后链接成“foo”，但在实际情况下，这一动作可以被一条“cc”的命令完成（cc–ofoofoo.c），于是优化过的规

则就不会生成中间文件。




五、定义模式规则



你可以使用模式规则来定义一个隐含规则。一个模式规则就好像一个一般的规则，只是在规则中，目标的定义需要有&quot;%&quot;字符。&quot;%&quot;的意思是表示一个或多个任意字符。在依赖目标中同样可以使用&quot;%&quot;，只是依赖目标中的&quot;%&quot;的取&#20540;，取决于其目标。


有一点需要注意的是，&quot;%&quot;的展开发生在变量和函数的展开之后，变量和函数的展开发生在make载入Makefile时，而模式规则中的&quot;%&quot;则发生在运行时。




1、模式规则介绍



模式规则中，至少在规则的目标定义中要包含&quot;%&quot;，否则，就是一般的规则。目标中的&quot;%&quot;定义表示对文件名的匹配，&quot;%&quot;表示长度任意的非空字符串。例如：&quot;%.c&quot;表示以&quot;.c&quot;结尾的文件名（文件名的长度至少为3），而&quot;s.%.c&quot;则表示以&quot;s.&quot;开头，&quot;.c&quot;结尾的文件名（文件名的长度至少为5）。


如果&quot;%&quot;定义在目标中，那么，目标中的&quot;%&quot;的&#20540;决定了依赖目标中的&quot;%&quot;的&#20540;，也就是说，目标中的模式的&quot;%&quot;决定了依赖目标中&quot;%&quot;的样子。例如有一个模式规则如下：



%.o:%.c;&lt;command......&gt;



其含义是，指出了怎么从所有的[.c]文件生成相应的[.o]文件的规则。如果要生成的目标是&quot;a.ob.o&quot;，那么&quot;%c&quot;就是&quot;a.cb.c&quot;。



一旦依赖目标中的&quot;%&quot;模式被确定，那么，make会被要求去匹配当前目录下所有的文件名，一旦找到，make就会规则下的命令，所以，在模式规则中，目标可能会是多个的，如果有模式匹配出多个目标，make就会产生所有的模式目标，此时，make关心的是依赖的文件名和生成目标的命令这两件事。


2、模式规则示例



下面这个例子表示了,把所有的[.c]文件都编译成[.o]文件.



%.o:%.c

$(CC)-c$(CFLAGS)$(CPPFLAGS)$&lt;-o$@



其中，&quot;$@&quot;表示所有的目标的挨个&#20540;，&quot;$&lt;&quot;表示了所有依赖目标的挨个&#20540;。这些奇怪的变

量我们叫&quot;自动化变量&quot;，后面会详细讲述。



下面的这个例子中有两个目标是模式的：


%.tab.c%.tab.h:%.y

bison-d$&lt;



这条规则告诉make把所有的[.y]文件都以&quot;bison-d&lt;n&gt;.y&quot;执行，然后生成&quot;&lt;n&gt;.tab.c&quot;和&quot;&lt;n&gt;.tab.h&quot;文件。（其中，&quot;&lt;n&gt;&quot;表示一个任意字符串）。如果我们的执行程序&quot;foo&quot;依

赖于文件&quot;parse.tab.o&quot;和&quot;scan.o&quot;，并且文件&quot;scan.o&quot;依赖于文件&quot;parse.tab.h&quot;，如果&quot;parse.y&quot;文件被更新了，那么根据上述的规则，&quot;bison-dparse.y&quot;就会被执行一次，于

是，&quot;parse.tab.o&quot;和&quot;scan.o&quot;的依赖文件就齐了。（假设，&quot;parse.tab.o&quot;由&quot;parse.tab.c&quot;生成，和&quot;scan.o&quot;由&quot;scan.c&quot;生成，而&quot;foo&quot;由&quot;parse.tab.o&quot;和&quot;scan.o&quot;链接生成，

而且foo和其[.o]文件的依赖关系也写好，那么，所有的目标都会得到满足）


3、自动化变量


在上述的模式规则中，目标和依赖文件都是一系例的文件，那么我们如何书写一个命令来完成从不同的依赖文件生成相应的目标？因为在每一次的对模式规则的解析时，都会是不同的目标和依赖文件。


自动化变量就是完成这个功能的。在前面，我们已经对自动化变量有所提涉，相信你看到这里已对它有一个感性认识了。所谓自动化变量，就是这种变量会把模式中所定义的一系列的文件自动地挨个取出，直至所有的符合模式的文件都取完了。这种自动化变量只应出现在规则的命令中。


下面是所有的自动化变量及其说明：


$@

表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，&quot;$@&quot;就是匹配于目标中模式定义的集合。



$%

仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是&quot;foo.a(bar.o)&quot;，那么，&quot;$%&quot;就是&quot;bar.o&quot;，&quot;$@&quot;就是&quot;foo.a&quot;。如果目标不是函数库文件（Unix下是

[.a]，Windows下是[.lib]），那么，其&#20540;为空。


$&lt;

依赖目标中的第一个目标名字。如果依赖目标是以模式（即&quot;%&quot;）定义的，那么&quot;$&lt;&quot;将是符合模式的一系列的文件集。注意，其是一个一个取出来的。


$?

所有比目标新的依赖目标的集合。以空&#26684;分隔。


$^

所有的依赖目标的集合。以空&#26684;分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份。


$&#43;

这个变量很像&quot;$^&quot;，也是所有依赖目标的集合。只是它不去除重复的依赖目标。



$*

这个变量表示目标模式中&quot;%&quot;及其之前的部分。如果目标是&quot;dir/a.foo.b&quot;，并且目标的模式是&quot;a.%.b&quot;，那么，&quot;$*&quot;的&#20540;就是&quot;dir/a.foo&quot;。这个变量对于构造有关联的文件名是比

较有较。如果目标中没有模式的定义，那么&quot;$*&quot;也就不能被推导出，但是，如果目标文件的后缀是make所识别的，那么&quot;$*&quot;就是除了后缀的那一部分。例如：如果目标是&quot;foo.c&quot;

，因为&quot;.c&quot;是make所能识别的后缀名，所以，&quot;$*&quot;的&#20540;就是&quot;foo&quot;。这个特性是GNUmake的，很有可能不兼容于其它版本的make，所以，你应该尽量避免使用&quot;$*&quot;，除非是在隐含规则或是静态模式中。如果目标中的后缀是make所不能识别的，那么&quot;$*&quot;就是空&#20540;。


当你希望只对更新过的依赖文件进行操作时，&quot;$?&quot;在显式规则中很有用，例如，假设有一个函数库文件叫&quot;lib&quot;，其由其它几个object文件更新。那么把object文件打包的比较有效

率的Makefile规则是：



lib:foo.obar.olose.owin.o

arrlib$?



在上述所列出来的自动量变量中。四个变量（$@、$&lt;、$%、$*）在扩展时只会有一个文件，而另三个的&#20540;是一个文件列表。这七个自动化变量还可以取得文件的目录名或是在当前目录下的符合模式的文件名，只需要搭配上&quot;D&quot;或&quot;F&quot;字样。这是GNUmake中老版本的特性，在新版本中，我们使用函数&quot;dir&quot;或&quot;notdir&quot;就可以做到了。&quot;D&quot;的含义就是Directory，就是目录，&quot;F&quot;的含义就是File，就是文件。



下面是对于上面的七个变量分别加上&quot;D&quot;或是&quot;F&quot;的含义：



$(@D)

表示&quot;$@&quot;的目录部分（不以斜杠作为结尾），如果&quot;$@&quot;&#20540;是&quot;dir/foo.o&quot;，那么&quot;$(@D)&quot;就是&quot;dir&quot;，而如果&quot;$@&quot;中没有包含斜杠的话，其&#20540;就是&quot;.&quot;（当前目录）。



$(@F)

表示&quot;$@&quot;的文件部分，如果&quot;$@&quot;&#20540;是&quot;dir/foo.o&quot;，那么&quot;$(@F)&quot;就是&quot;foo.o&quot;，&quot;$(@F)&quot;相当于函数&quot;$(notdir$@)&quot;。



&quot;$(*D)&quot;

&quot;$(*F)&quot;

和上面所述的同理，也是取文件的目录部分和文件部分。对于上面的那个例子，&quot;$(*D)&quot;返回&quot;dir&quot;，而&quot;$(*F)&quot;返回&quot;foo&quot;



&quot;$(%D)&quot;

&quot;$(%F)&quot;

分别表示了函数包文件成员的目录部分和文件部分。这对于形同&quot;archive(member)&quot;形式的目标中的&quot;member&quot;中包含了不同的目录很有用。



&quot;$(&lt;D)&quot;

&quot;$(&lt;F)&quot;

分别表示依赖文件的目录部分和文件部分。



&quot;$(^D)&quot;

&quot;$(^F)&quot;

分别表示所有依赖文件的目录部分和文件部分。（无相同的）



&quot;$(&#43;D)&quot;

&quot;$(&#43;F)&quot;

分别表示所有依赖文件的目录部分和文件部分。（可以有相同的）



&quot;$(?D)&quot;

&quot;$(?F)&quot;



分别表示被更新的依赖文件的目录部分和文件部分。


最后想提醒一下的是，对于&quot;$&lt;&quot;，为了避免产生不必要的麻烦，我们最好给$后面的那个特定字符都加上圆括号，比如，&quot;$(&lt;)&quot;就要比&quot;$&lt;&quot;要好一些。


还得要注意的是，这些变量只使用在规则的命令中，而且一般都是&quot;显式规则&quot;和&quot;静态模式规则&quot;（参见前面&quot;书写规则&quot;一章）。其在隐含规则中并没有意义。



4、模式的匹配



一般来说，一个目标的模式有一个有前缀或是后缀的&quot;%&quot;，或是没有前后缀，直接就是一个&quot;%&quot;。因为&quot;%&quot;代表一个或多个字符，所以在定义好了的模式中，我们把&quot;%&quot;所匹配的内容叫做&quot;茎&quot;，例如&quot;%.c&quot;所匹配的文件&quot;test.c&quot;中&quot;test&quot;就是&quot;茎&quot;。因为在目标和依赖目标中同时有&quot;%&quot;时，依赖目标的&quot;茎&quot;会传给目标，当做目标中的&quot;茎&quot;。


当一个模式匹配包含有斜杠（实际也不经常包含）的文件时，那么在进行模式匹配时，目录部分会首先被移开，然后进行匹配，成功后，再把目录加回去。在进行&quot;茎&quot;的传递时，我们需要知道这个步骤。例如有一个模式&quot;e%t&quot;，文件&quot;src/eat&quot;匹配于该模式，于是&quot;src/a&quot;就是其&quot;茎&quot;，如果这个模式定义在依赖目标中，而被依赖于这个模式的目标中又有个模式&quot;c%r&quot;，那么，目标就是&quot;src/car&quot;。（&quot;茎&quot;被传递）


5、重载内建隐含规则



你可以重载内建的隐含规则（或是定义一个全新的），例如你可以重新构造和内建隐含规则不同的命令，如：



%.o:%.c

$(CC)-c$(CPPFLAGS)$(CFLAGS)-D$(date)



你可以取消内建的隐含规则，只要不在后面写命令就行。如：



%.o:%.s



同样，你也可以重新定义一个全新的隐含规则，其在隐含规则中的位置取决于你在哪里写下这个规则。朝前的位置就靠前。



六、老式风&#26684;的&quot;后缀规则&quot;



后缀规则是一个比较老式的定义隐含规则的方法。后缀规则会被模式规则逐步地取代。因为模式规则更强更清晰。为了和老版本的Makefile兼容，GNUmake同样兼容于这些东西。后缀规则有两种方式：&quot;双后缀&quot;和&quot;单后缀&quot;。


双后缀规则定义了一对后缀：目标文件的后缀和依赖目标（源文件）的后缀。如&quot;.c.o&quot;相当于&quot;%o:%c&quot;。单后缀规则只定义一个后缀，也就是源文件的后缀。如&quot;.c&quot;相当于&quot;%:
%.c&quot;。



后缀规则中所定义的后缀应该是make所认识的，如果一个后缀是make所认识的，那么这个规则就是单后缀规则，而如果两个连在一起的后缀都被make所认识，那就是双后缀规则。例如：&quot;.c&quot;和&quot;.o&quot;都是make所知道。因而，如果你定义了一个规则是&quot;.c.o&quot;那么其就是双后缀规则，意义就是&quot;.c&quot;是源文件的后缀，&quot;.o&quot;是目标文件的后缀。如下示例：



.c.o:

$(CC)-c$(CFLAGS)$(CPPFLAGS)-o$@$&lt;



后缀规则不允许任何的依赖文件，如果有依赖文件的话，那就不是后缀规则，那些后缀统统被认为是文件名，如：



.c.o:foo.h

$(CC)-c$(CFLAGS)$(CPPFLAGS)-o$@$&lt;



这个例子，就是说，文件&quot;.c.o&quot;依赖于文件&quot;foo.h&quot;，而不是我们想要的这样：


%.o:%.cfoo.h

$(CC)-c$(CFLAGS)$(CPPFLAGS)-o$@$&lt;



后缀规则中，如果没有命令，那是毫无意义的。因为他也不会移去内建的隐含规则。



而要让make知道一些特定的后缀，我们可以使用伪目标&quot;.SUFFIXES&quot;来定义或是删除，如：



.SUFFIXES:.hack.win



把后缀.hack和.win加入后缀列表中的末尾。



.SUFFIXES:#删除默认的后缀

.SUFFIXES:.c.o.h#定义自己的后缀



先清楚默认后缀，后定义自己的后缀列表。



make的参数&quot;-r&quot;或&quot;-no-builtin-rules&quot;也会使用得默认的后缀列表为空。而变量&quot;SUFFIXE&quot;被用来定义默认的后缀列表，你可以用&quot;.SUFFIXES&quot;来改变后缀列表，但请不要改变变量&quot;SUFFIXE&quot;的&#20540;。




七、隐含规则搜索算法


比如我们有一个目标叫T。下面是搜索目标T的规则的算法。请注意，在下面，我们没有提到后缀规则，原因是，所有的后缀规则在Makefile被载入内存时，会被转换成模式规则。如果目标是&quot;archive(member)&quot;的函数库文件模式，那么这个算法会被运行两次，第一次是找目标T，如果没有找到的话，那么进入第二次，第二次会把&quot;member&quot;当作T来搜索。
1、把T的目录部分分离出来。叫D，而剩余部分叫N。（如：如果T是&quot;src/foo.o&quot;，那么，D就是&quot;src/&quot;，N就是&quot;foo.o&quot;）
2、创建所有匹配于T或是N的模式规则列表。
3、如果在模式规则列表中有匹配所有文件的模式，如&quot;%&quot;，那么从列表中移除其它的模式。
4、移除列表中没有命令的规则。
5、对于第一个在列表中的模式规则：

1）推导其&quot;茎&quot;S，S应该是T或是N匹配于模式中&quot;%&quot;非空的部分。
2）计算依赖文件。把依赖文件中的&quot;%&quot;都替换成&quot;茎&quot;S。如果目标模式中没有包含斜框字符，而把D加在第一个依赖文件的开头。
3）测试是否所有的依赖文件都存在或是理当存在。（如果有一个文件被定义成另外一个规则的目标文件，或者是一个显式规则的依赖文件，那么这个文件就叫&quot;理当存在&quot;）
4）如果所有的依赖文件存在或是理当存在，或是就没有依赖文件。那么这条规则将被采用，退出该算法。
6、如果经过第5步，没有模式规则被找到，那么就做更进一步的搜索。对于存在于列表中的第一个模式规则：
1）如果规则是终止规则，那就忽略它，继续下一条模式规则。
2）计算依赖文件。（同第5步）
3）测试所有的依赖文件是否存在或是理当存在。
4）对于不存在的依赖文件，递归调用这个算法查找他是否可以被隐含规则找到。
5）如果所有的依赖文件存在或是理当存在，或是就根本没有依赖文件。那么这条规则被采用，退出该算法。
7、如果没有隐含规则可以使用，查看&quot;.DEFAULT&quot;规则，如果有，采用，把&quot;.DEFAULT&quot;的命令给T使用。
一旦规则被找到，就会执行其相当的命令，而此时，我们的自动化变量的&#20540;才会生成。





使用make更新函数库文件

———————————



函数库文件也就是对Object文件（程序编译的中间文件）的打包文件。在Unix下，一般是由命令&quot;ar&quot;来完成打包工作。



一、函数库文件的成员



一个函数库文件由多个文件组成。你可以以如下&#26684;式指定函数库文件及其组成：



archive(member)



这个不是一个命令，而一个目标和依赖的定义。一般来说，这种用法基本上就是为了&quot;ar&quot;命令来服务的。如：


foolib(hack.o):hack.o

arcrfoolibhack.o



如果要指定多个member，那就以空&#26684;分开，如：



foolib(hack.okludge.o)



其等价于：



foolib(hack.o)foolib(kludge.o)



你还可以使用Shell的文件通配符来定义，如：


foolib(*.o)



二、函数库成员的隐含规则



当make搜索一个目标的隐含规则时，一个特殊的特性是，如果这个目标是&quot;a(m)&quot;形式的，其会把目标变成&quot;(m)&quot;。于是，如果我们的成员是&quot;%.o&quot;的模式定义，并且如果我们使用&quot;makefoo.a(bar.o)&quot;的形式调用Makefile时，隐含规则会去找&quot;bar.o&quot;的规则，如果没有定义bar.o的规则，那么内建隐含规则生效，make会去找bar.c文件来生成bar.o，如果找得到的话，make执行的命令大致如下：



cc-cbar.c-obar.o

arrfoo.abar.o

rm-fbar.o



还有一个变量要注意的是&quot;$%&quot;，这是专属函数库文件的自动化变量，有关其说明请参见&quot;自动化变量&quot;一节。




三、函数库文件的后缀规则



你可以使用&quot;后缀规则&quot;和&quot;隐含规则&quot;来生成函数库打包文件，如：



.c.a:

$(CC)$(CFLAGS)$(CPPFLAGS)-c$&lt;-o$*.o

$(AR)r$@$*.o

$(RM)$*.o



其等效于：



(%.o):%.c

$(CC)$(CFLAGS)$(CPPFLAGS)-c$&lt;-o$*.o

$(AR)r$@$*.o

$(RM)$*.o



四、注意事项



在进行函数库打包文件生成时，请小心使用make的并行机制（&quot;-j&quot;参数）。如果多个ar命令在同一时间运行在同一个函数库打包文件上，就很有可以损坏这个函数库文件。所以，在make未来的版本中，应该提供一种机制来避免并行操作发生在函数打包文件上。

但就目前而言，你还是应该不要尽量不要使用&quot;-j&quot;参数。




后序

——



终于到写结束语的时候了，以上基本上就是GNUmake的Makefile的所有细节了。其它的产商的make基本上也就是这样的，无论什么样的make，都是以文件的依赖性为基础的，其基本是都是遵循一个标准的。这篇文档中80%的技术细节都适用于任何的make，我猜测&quot;函数&quot;那一章的内容可能不是其它make所支持的，而隐含规则方面，我想不同的make会有不同的实现，我没有精力来查看GNU的make和VC的nmake、BCB的make，或是别的UNIX下的make有些什么样的差别，一是时间精力不够，二是因为我基本上都是在Unix下使用make，以前在SCO
Unix和IBM的AIX，现在在Linux、Solaris、HP-UX、AIX和Alpha下使用，Linux和Solaris下更多一点。不过，我可以肯定的是，在Unix下的make，无论是哪种平台，几乎都使用了RichardStallman开发的make和cc/gcc的编译器，而且，基本上都是GNU的make（公司里所有的UNIX机器上都被装上了GNU的东西，所以，使用GNU的程序也就多了一些）。GNU的东西还是很不错的，特别是使用得深了以后，越来越觉得GNU的软件的强大，也越来越觉得GNU的在操作系统中（主要是Unix，甚至Windows）&quot;杀伤力&quot;。



对于上述所有的make的细节，我们不但可以利用make这个工具来编译我们的程序，还可以利用make来完成其它的工作，因为规则中的命令可以是任何Shell之下的命令，所以，在Unix下，你不一定只是使用程序语言的编译器，你还可以在Makefile中书写其它的命令，如：tar、awk、mail、sed、cvs、compress、ls、rm、yacc、rpm、ftp……等等，等等，来完成诸如&quot;程序打包&quot;、&quot;程序备份&quot;、&quot;制作程序安装包&quot;、&quot;提交代码&quot;、&quot;使用程序模板&quot;、&quot;合并文件&quot;等等五花八门的功能，文件操作，文件管理，编程开发设计，或是其它一些异想天开的东西。比如，以前在书写银行交易程序时，由于银行的交易程序基本一样，就见到有人书写了一些交易的通用程序模板，在该模板中把一些网络通讯、数据库操作的、业务操作共性的东西写在一个文件中，在这些文件中用些诸如&quot;@@@N、###N&quot;奇怪字串标注一些位置，然后书写交易时，只需按照一种特定的规则书写特定的处理，最后在make时，使用awk和sed，把模板中的&quot;@@@N、###N&quot;等字串替代成特定的程序，形成C文件，然后再编译。这个动作很像数据库的&quot;扩展C&quot;语言（即在C语言中用&quot;EXEC　SQL&quot;的样子执行SQL语句，在用
cc/gcc编译之前，需要使用&quot;扩展C&quot;的翻译程序，如cpre，把其翻译成标准C）。如果

你在使用make时有一些更为绝妙的方法，请记得告诉我啊。


回头看看整篇文档，不觉记起几年前刚刚开始在Unix下做开发的时候，有人问我会不会写Makefile时，我两&#30524;发直，根本不知道在说什么。一开始看到别人在vi中写完程序后输入&quot;!make&quot;时，还以为是vi的功能，后来才知道有一个Makefile在作怪，于是上网查啊查，那时又不愿意看英文，发现就根本没有中文的文档介绍Makefile，只得看别人写的Makefile，自己瞎碰瞎搞才积累了一点知识，但在很多地方完全是知其然不知所以然。后来开始从事UNIX下产品软件的开发，看到一个400人年，近200万行代码的大工程，发现要编译这样一个庞然大物，如果没有Makefile，那会是多么恐怖的一样事啊。于是横下心来，狠命地读了一堆英文文档，才觉得对其掌握了。但发现目前网上对Makefile介绍的文章还是少得那么的可怜，所以想写这样一篇文章，共享给大家，希望能对各位有所帮助。



现在我终于写完了，看了看文件的创建时间，这篇技术文档也写了两个多月了。发现，自己知道是一回事，要写下来，跟别人讲述又是另外一回事，而且，现在越来越没有时间专研技术细节，所以在写作时，发现在阐述一些细节问题时很难做到严谨和精练，而且对先讲什么后讲什么不是很清楚，所以，还是参考了一些国外站点上的资料和题纲，以及一些技术书籍的语言风&#26684;，才得以完成。整篇文档的提纲是基于GNU的Makefile技术手册的提纲来书写的，并结合了自己的工作经验，以及自己的学习历程。因为从来没有写过这么长，这么细的文档，所以一定会有很多地方存在表达问题，语言歧义或是错误。因些，我迫切地得等待各位给我指证和建议，以及任何的反馈。


最后，还是利用这个后序，介绍一下自己。我目前从事于所有Unix平台下的软件研发，主要是做分布式计算/网&#26684;计算方面的系统产品软件，并且我对于下一代的计算机革命——网&#26684;计算非常地感兴趣，对于分布式计算、P2P、WebService、J2EE技术方向也很感兴趣，同时，对于项目实施、团队管理、项目管理也小有心得，希望同样和我战斗在“技术和管理并重”的阵线上的年轻一代，能够和我多多地交流。我的MSN是：haoel@hotmail.com（常用），QQ是：753640（不常用）。（注：请勿给我MSN的邮箱发信，由于hotmail的垃圾

邮件导致我拒收这个邮箱的所有来信）



我欢迎任何形式的交流，无论是讨论技术还是管理，或是其它海阔天空的东西。除了政治和娱乐新闻我不关心，其它只要积极向上的东西我都欢迎！



最最后，我还想介绍一下make程序的设计开发者。


首当其冲的是：RichardStallman


开源软件的领袖和先驱，从来没有领过一天工资，从来没有使用过Windows操作系统。对于他的事迹和他的软件以及他的思想，我无需说过多的话，相信大家对这个人并不比我陌生，这是他的主页：http://www.stallman.org/。




第二位是：RolandMcGrath



个人主页是：http://www.frob.com/~roland/，下面是他的一些事迹：


1）合作编写了并维护GNUmake。
2）和ThomasBushnell一同编写了GNUHurd。
3）编写并维护着GNUClibrary。
4）合作编写并维护着部分的GNUEmacs。
在此，向这两位开源项目的斗士致以最真切的敬意。
使用变量

————






在Makefile中的定义的变量，就像是C/C&#43;&#43;语言中的宏一样，他代表了一个文本字串，在Makefile中执行的时候其会自动原模原样地展开在所使用的地方。其与C/C&#43;&#43;所不同的是，你可以在Makefile中改变其&#20540;。在Makefile中，变量可以使用在“目标”，“依赖目标”，“命令”或是Makefile的其它部分中。变量的命名字可以包含字符、数字，下划线（可以是数字开头），但不应该含有“:”、“#”、“=”或是空字符（空&#26684;、回车等）。变量是大小写敏感的，“foo”、“Foo”和“FOO”是三个不同的变量名。传统的Makefile的变量名是全大写的命名方式，但我推荐使用大小写搭配的变量名，如：MakeFlags。这样可以避免和系统的变量冲突，而发生意外的事情。有一些变量是很奇怪字串，如“$&lt;”、“$@”等，这些是自动化变量，我会在后面介绍。


一、变量的基础




变量在声明时需要给予初&#20540;，而在使用时，需要给在变量名前加上“$”符号，但最好用小括号“（）”或是大括号“{}”把变量给包括起来。如果你要使用真实的“$”字符，那么你需要用“$$”来表示。变量可以使用在许多地方，如规则中的“目标”、“依赖”、“命令”以及新的变量中。


先看一个例子：


objects=program.ofoo.outils.o

program:$(objects)

cc-oprogram$(objects)


$(objects):defs.h


变量会在使用它的地方精确地展开，就像C/C&#43;&#43;中的宏一样，例如：


foo=c

prog.o:prog.$(foo)

$(foo)$(foo)-$(foo)prog.$(foo)



展开后得到：


prog.o:prog.c

cc-cprog.c



当然，千万不要在你的Makefile中这样干，这里只是举个例子来表明Makefile中的变量在使用处展开的真实样子。可见其就是一个“替代”的原理。另外，给变量加上括号完全是为了更加安全地使用这个变量，在上面的例子中，如果你不想给变量加上括号，那也可以，但我还是强烈建议你给变量加上括号。


二、变量中的变量


在定义变量的&#20540;时，我们可以使用其它变量来构造变量的&#20540;，在Makefile中有两种方式来在用变量定义变量的&#20540;。



先看第一种方式，也就是简单的使用“=”号，在“=”左侧是变量，右侧是变量的&#20540;，右侧变量的&#20540;可以定义在文件的任何一处，也就是说，右侧中的变量不一定非要是已定义好

的&#20540;，其也可以使用后面定义的&#20540;。如：


foo=$(bar)

bar=$(ugh)

ugh=Huh?



all:

echo$(foo)



我们执行“makeall”将会打出变量$(foo)的&#20540;是“Huh?”（$(foo)的&#20540;是$(bar)，$(bar)的&#20540;是$(ugh)，$(ugh)的&#20540;是“Huh?”）可见，变量是可以使用后面的变量来定义的。

这个功能有好的地方，也有不好的地方，好的地方是，我们可以把变量的真实&#20540;推到后面来定义，如：


CFLAGS=$(include_dirs)-O

include_dirs=-Ifoo-Ibar



当“CFLAGS”在命令中被展开时，会是“-Ifoo-Ibar-O”。但这种形式也有不好的地方

，那就是递归定义，如：



CFLAGS=$(CFLAGS)-O



或：



A=$(B)

B=$(A)



这会让make陷入无限的变量展开过程中去，当然，我们的make是有能力检测这样的定义，并会报错。还有就是如果在变量中使用函数，那么，这种方式会让我们的make运行时非常慢，更糟糕的是，他会使用得两个make的函数“wildcard”和“shell”发生不可预知的错误。因为你不会知道这两个函数会被调用多少次。


为了避免上面的这种方法，我们可以使用make中的另一种用变量来定义变量的方法。这种方法使用的是“:=”操作符，如：



x:=foo

y:=$(x)bar

x:=later



其等价于：



y:=foobar

x:=later



&#20540;得一提的是，这种方法，前面的变量不能使用后面的变量，只能使用前面已定义好了的变量。如果是这样：



y:=$(x)bar

x:=foo



那么，y的&#20540;是“bar”，而不是“foobar”。



上面都是一些比较简单的变量使用了，让我们来看一个复杂的例子，其中包括了make的函数、条件表达式和一个系统变量“MAKELEVEL”的使用：



ifeq(0,${MAKELEVEL})

cur-dir:=$(shellpwd)

whoami:=$(shellwhoami)

host-type:=$(shellarch)

MAKE:=${MAKE}host-type=${host-type}whoami=${whoami}

endif



关于条件表达式和函数，我们在后面再说，对于系统变量“MAKELEVEL”，其意思是，如果我们的make有一个嵌套执行的动作（参见前面的“嵌套使用make”），那么，这个变量会记录了我们的当前Makefile的调用层数。



下面再介绍两个定义变量时我们需要知道的，请先看一个例子，如果我们要定义一个变量，其&#20540;是一个空&#26684;，那么我们可以这样来：


nullstring:=

space:=$(nullstring)#endoftheline



nullstring是一个Empty变量，其中什么也没有，而我们的space的&#20540;是一个空&#26684;。因为在操作符的右边是很难描述一个空&#26684;的，这里采用的技术很管用，先用一个Empty变量来标明变量的&#20540;开始了，而后面采用“#”注释符来表示变量定义的终止，这样，我们可以定义出其&#20540;是一个空&#26684;的变量。请注意这里关于“#”的使用，注释符“#”的这种特性&#20540;得我们注意，如果我们这样定义一个变量：


dir:=/foo/bar#directorytoputthefrobsin


dir这个变量的&#20540;是“/foo/bar”，后面还跟了4个空&#26684;，如果我们这样使用这样变量来指定别的目录——“$(dir)/file”那么就完蛋了。



还有一个比较有用的操作符是“?=”，先看示例：



FOO?=bar



其含义是，如果FOO没有被定义过，那么变量FOO的&#20540;就是“bar”，如果FOO先前被定义过，那么这条语将什么也不做，其等价于：



ifeq($(originFOO),undefined)

FOO=bar

endif


三、变量高级用法



这里介绍两种变量的高级使用方法，第一种是变量&#20540;的替换。


我们可以替换变量中的共有的部分，其&#26684;式是“$(var:a=b)”或是“${var:a=b}”，其意思是，把变量“var”中所有以“a”字串“结尾”的“a”替换成“b”字串。这里的“结尾”意思是“空&#26684;”或是“结束符”。


还是看一个示例吧：



foo:=a.ob.oc.o

bar:=$(foo:.o=.c)



这个示例中，我们先定义了一个“$(foo)”变量，而第二行的意思是把“$(foo)”中所有以“.o”字串“结尾”全部替换成“.c”，所以我们的“$(bar)”的&#20540;就是“a.cb.cc.c”。


另外一种变量替换的技术是以“静态模式”（参见前面章节）定义的，如：



foo:=a.ob.oc.o

bar:=$(foo:%.o=%.c)



这依赖于被替换字串中的有相同的模式，模式中必须包含一个“%”字符，这个例子同样让$(bar)变量的&#20540;为“a.cb.cc.c”。



第二种高级用法是——“把变量的&#20540;再当成变量”。先看一个例子：



x=y

y=z

a:=$($(x))



在这个例子中，$(x)的&#20540;是“y”，所以$($(x))就是$(y)，于是$(a)的&#20540;就是“z”。（注意，是“x=y”，而不是“x=$(y)”）



我们还可以使用更多的层次：



x=y

y=z

z=u

a:=$($($(x)))



这里的$(a)的&#20540;是“u”，相关的推导留给读者自己去做吧。


让我们再复杂一点，使用上“在变量定义中使用变量”的第一个方式，来看一个例子：



x=$(y)

y=z

z=Hello

a:=$($(x))



这里的$($(x))被替换成了$($(y))，因为$(y)&#20540;是“z”，所以，最终结果是：a:=$(z)，也就是“Hello”。



再复杂一点，我们再加上函数：



x=variable1

variable2:=Hello

y=$(subst1,2,$(x))

z=y

a:=$($($(z)))



这个例子中，“$($($(z)))”扩展为“$($(y))”，而其再次被扩展为“$($(subst1,2,$(x)))”。$(x)的&#20540;是“variable1”，subst函数把“variable1”中的所有“1”字串替换成“2”字串，于是，“variable1”变成“variable2”，再取其&#20540;，所以，最终，$(a)的&#20540;就是$(variable2)的&#20540;——“Hello”。（喔，好不容易）


在这种方式中，或要可以使用多个变量来组成一个变量的名字，然后再取其&#20540;：


first_second=Hello

a=first

b=second

all=$($a_$b)



这里的“$a_$b”组成了“first_second”，于是，$(all)的&#20540;就是“Hello”。



再来看看结合第一种技术的例子：



a_objects:=a.ob.oc.o

1_objects:=1.o2.o3.o



sources:=$($(a1)_objects:.o=.c)



这个例子中，如果$(a1)的&#20540;是“a”的话，那么，$(sources)的&#20540;就是“a.cb.cc.c”；如果$(a1)的&#20540;是“1”，那么$(sources)的&#20540;是“1.c2.c3.c”。


再来看一个这种技术和“函数”与“条件语句”一同使用的例子：



ifdefdo_sort

func:=sort

else

func:=strip

endif


bar:=adbgqc


foo:=$($(func)$(bar))



这个示例中，如果定义了“do_sort”，那么：foo:=$(sortadbgqc)，于是$(foo)的&#20540;就是“abcdgq”，而如果没有定义“do_sort”，那么：foo:=$(sortadbgqc)，调用的就是strip函数。


当然，“把变量的&#20540;再当成变量”这种技术，同样可以用在操作符的左边：


dir=foo

$(dir)_sources:=$(wildcard$(dir)/*.c)

define$(dir)_print

lpr$($(dir)_sources)

endef


这个例子中定义了三个变量：“dir”，“foo_sources”和“foo_print”。



四、追加变量&#20540;



我们可以使用“&#43;=”操作符给变量追加&#20540;，如：



objects=main.ofoo.obar.outils.o

objects&#43;=another.o


于是，我们的$(objects)&#20540;变成：“main.ofoo.obar.outils.oanother.o”（another.o被追加进去了）


使用“&#43;=”操作符，可以模拟为下面的这种例子：



objects=main.ofoo.obar.outils.o

objects:=$(objects)another.o



所不同的是，用“&#43;=”更为简洁。



如果变量之前没有定义过，那么，“&#43;=”会自动变成“=”，如果前面有变量定义，那么“&#43;=”会继承于前次操作的赋&#20540;符。如果前一次的是“:=”，那么“&#43;=”会以“:=”作为其赋&#20540;符，如：


variable:=value

variable&#43;=more



等价于：



variable:=value

variable:=$(variable)more



但如果是这种情况：



variable=value

variable&#43;=more



由于前次的赋&#20540;符是“=”，所以“&#43;=”也会以“=”来做为赋&#20540;，那么岂不会发生变量的递补归定义，这是很不好的，所以make会自动为我们解决这个问题，我们不必担心这个问题。



五、override指示符



如果有变量是通常make的命令行参数设置的，那么Makefile中对这个变量的赋&#20540;会被忽略。如果你想在Makefile中设置这类参数的&#20540;，那么，你可以使用“override”指示符。其语法是：


override&lt;variable&gt;=&lt;value&gt;

override&lt;variable&gt;:=&lt;value&gt;



当然，你还可以追加：



override&lt;variable&gt;&#43;=&lt;moretext&gt;



对于多行的变量定义，我们用define指示符，在define指示符前，也同样可以使用ovveride指示符，如：



overridedefinefoo

bar

endef



六、多行变量



还有一种设置变量&#20540;的方法是使用define关键字。使用define关键字设置变量的&#20540;可以有换行，这有利于定义一系列的命令（前面我们讲过“命令包”的技术就是利用这个关键字）。


define指示符后面跟的是变量的名字，而重起一行定义变量的&#20540;，定义是以endef关键字结束。其工作方式和“=”操作符一样。变量的&#20540;可以包含函数、命令、文字，或是其它变量。因为命令需要以[Tab]键开头，所以如果你用define定义的命令变量中没有以[Tab]键开头，那么make就不会把其认为是命令。


下面的这个示例展示了define的用法：



definetwo-lines

echofoo

echo$(bar)

endef



七、环境变量



make运行时的系统环境变量可以在make开始运行时被载入到Makefile文件中，但是如果Makefile中已定义了这个变量，或是这个变量由make命令行带入，那么系统的环境变量的&#20540;将被覆盖。（如果make指定了“-e”参数，那么，系统环境变量将覆盖Makefile中定义的变量）


因此，如果我们在环境变量中设置了“CFLAGS”环境变量，那么我们就可以在所有的Makefile中使用这个变量了。这对于我们使用统一的编译参数有比较大的好处。如果Makefile中定义了CFLAGS，那么则会使用Makefile中的这个变量，如果没有定义则使用系统环境变量的&#20540;，一个共性和个性的统一，很像“全局变量”和“局部变量”的特性。


当make嵌套调用时（参见前面的“嵌套调用”章节），上层Makefile中定义的变量会以系统环境变量的方式传递到下层的Makefile中。当然，默认情况下，只有通过命令行设置的变量会被传递。而定义在文件中的变量，如果要向下层
Makefile传递，则需要使用exprot关键字来声明。（参见前面章节）




当然，我并不推荐把许多的变量都定义在系统环境中，这样，在我们执行不用的Makefile时，拥有的是同一套系统变量，这可能会带来更多的麻烦。





八、目标变量



前面我们所讲的在Makefile中定义的变量都是“全局变量”，在整个文件，我们都可以访问这些变量。当然，“自动化变量”除外，如“$&lt;”等这种类量的自动化变量就属于“规则型变量”，这种变量的&#20540;依赖于规则的目标和依赖目标的定义。


当然，我样同样可以为某个目标设置局部变量，这种变量被称为“Target-specificVariable”，它可以和“全局变量”同名，因为它的作用范围只在这条规则以及连带规则中，所以其&#20540;也只在作用范围内有效。而不会影响规则链以外的全局变量的&#20540;。


其语法是：



&lt;target...&gt;:&lt;variable-assignment&gt;



&lt;target...&gt;:overide&lt;variable-assignment&gt;



&lt;variable-assignment&gt;可以是前面讲过的各种赋&#20540;表达式，如“=”、“:=”、“&#43;=”或是“？=”。第二个语法是针对于make命令行带入的变量，或是系统环境变量。


这个特性非常的有用，当我们设置了这样一个变量，这个变量会作用到由这个目标所引发的所有的规则中去。如：


prog:CFLAGS=-g

prog:prog.ofoo.obar.o

$(CC)$(CFLAGS)prog.ofoo.obar.o



prog.o:prog.c

$(CC)$(CFLAGS)prog.c



foo.o:foo.c

$(CC)$(CFLAGS)foo.c



bar.o:bar.c

$(CC)$(CFLAGS)bar.c



在这个示例中，不管全局的$(CFLAGS)的&#20540;是什么，在prog目标，以及其所引发的所有规则中（prog.ofoo.obar.o的规则），$(CFLAGS)的&#20540;都是“-g”





九、模式变量



在GNU的make中，还支持模式变量（Pattern-specificVariable），通过上面的目标变量中，我们知道，变量可以定义在某个目标上。模式变量的好处就是，我们可以给定一种“模式”，可以把变量定义在符合这种模式的所有目标上。


我们知道，make的“模式”一般是至少含有一个“%”的，所以，我们可以以如下方式给所有以[.o]结尾的目标定义目标变量：



%.o:CFLAGS=-O



同样，模式变量的语法和“目标变量”一样：



&lt;pattern...&gt;:&lt;variable-assignment&gt;



&lt;pattern...&gt;:override&lt;variable-assignment&gt;



override同样是针对于系统环境传入的变量，或是make命令行指定的变量。



使用条件判断

——————



使用条件判断，可以让make根据运行时的不同情况选择不同的执行分支。条件表达式可以是比较变量的&#20540;，或是比较变量和常量的&#20540;。


一、示例



下面的例子，判断$(CC)变量是否“gcc”，如果是的话，则使用GNU函数编译目标。



libs_for_gcc=-lgnu

normal_libs=



foo:$(objects)

ifeq($(CC),gcc)

$(CC)-ofoo$(objects)$(libs_for_gcc)

else

$(CC)-ofoo$(objects)$(normal_libs)

endif



可见，在上面示例的这个规则中，目标“foo”可以根据变量“$(CC)”&#20540;来选取不同的函数库来编译程序。


我们可以从上面的示例中看到三个关键字：ifeq、else和endif。ifeq的意思表示条件语句的开始，并指定一个条件表达式，表达式包含两个参数，以逗号分隔，表达式以圆括号括起。else表示条件表达式为假的情况。endif表示一个条件语句的结束，任何一个条件表达式都应该以endif结束。


当我们的变量$(CC)&#20540;是“gcc”时，目标foo的规则是：



foo:$(objects)

$(CC)-ofoo$(objects)$(libs_for_gcc)



而当我们的变量$(CC)&#20540;不是“gcc”时（比如“cc”），目标foo的规则是：


foo:$(objects)

$(CC)-ofoo$(objects)$(normal_libs)



当然，我们还可以把上面的那个例子写得更简洁一些：



libs_for_gcc=-lgnu

normal_libs=



ifeq($(CC),gcc)

libs=$(libs_for_gcc)

else

libs=$(normal_libs)

endif



foo:$(objects)

$(CC)-ofoo$(objects)$(libs)





二、语法



条件表达式的语法为：



&lt;conditional-directive&gt;

&lt;text-if-true&gt;

endif



以及：



&lt;conditional-directive&gt;

&lt;text-if-true&gt;

else

&lt;text-if-false&gt;

endif



其中&lt;conditional-directive&gt;表示条件关键字，如“ifeq”。这个关键字有四个。


第一个是我们前面所见过的“ifeq”



ifeq(&lt;arg1&gt;,&lt;arg2&gt;)

ifeq'&lt;arg1&gt;''&lt;arg2&gt;'

ifeq&quot;&lt;arg1&gt;&quot;&quot;&lt;arg2&gt;&quot;

ifeq&quot;&lt;arg1&gt;&quot;'&lt;arg2&gt;'

ifeq'&lt;arg1&gt;'&quot;&lt;arg2&gt;&quot;



比较参数“arg1”和“arg2”的&#20540;是否相同。当然，参数中我们还可以使用make的函数。如：



ifeq($(strip$(foo)),)

&lt;text-if-empty&gt;

endif



这个示例中使用了“strip”函数，如果这个函数的返回&#20540;是空（Empty），那么&lt;text-if-empty&gt;就生效。


第二个条件关键字是“ifneq”。语法是：



ifneq(&lt;arg1&gt;,&lt;arg2&gt;)

ifneq'&lt;arg1&gt;''&lt;arg2&gt;'

ifneq&quot;&lt;arg1&gt;&quot;&quot;&lt;arg2&gt;&quot;

ifneq&quot;&lt;arg1&gt;&quot;'&lt;arg2&gt;'

ifneq'&lt;arg1&gt;'&quot;&lt;arg2&gt;&quot;



其比较参数“arg1”和“arg2”的&#20540;是否相同，如果不同，则为真。和“ifeq”类&#20284;。





第三个条件关键字是“ifdef”。语法是：



ifdef&lt;variable-name&gt;



如果变量&lt;variable-name&gt;的&#20540;非空，那到表达式为真。否则，表达式为假。当然，&lt;variable-name&gt;同样可以是一个函数的返回&#20540;。注意，ifdef只是测试一个变量是否有&#20540;，其并不会把变量扩展到当前位置。还是来看两个例子：



示例一：

bar=

foo=$(bar)

ifdeffoo

frobozz=yes

else

frobozz=no

endif



示例二：

foo=

ifdeffoo

frobozz=yes

else

frobozz=no

endif



第一个例子中，“$(frobozz)”&#20540;是“yes”，第二个则是“no”。



第四个条件关键字是“ifndef”。其语法是：



ifndef&lt;variable-name&gt;



这个我就不多说了，和“ifdef”是相反的意思。



在&lt;conditional-directive&gt;这一行上，多余的空&#26684;是被允许的，但是不能以[Tab]键做为开始（不然就被认为是命令）。而注释符“#”同样也是安全的。“else”和“endif”也

一样，只要不是以[Tab]键开始就行了。


特别注意的是，make是在读取Makefile时就计算条件表达式的&#20540;，并根据条件表达式的&#20540;来选择语句，所以，你最好不要把自动化变量（如“$@”等）放入条件表达式中，因为自动化变量是在运行时才有的。


而且，为了避免混乱，make不允许把整个条件语句分成两部分放在不同的文件中。






使用函数

————



在Makefile中可以使用函数来处理变量，从而让我们的命令或是规则更为的灵活和具有智能。make所支持的函数也不算很多，不过已经足够我们的操作了。函数调用后，函数的返回&#20540;可以当做变量来使用。



一、函数的调用语法



函数调用，很像变量的使用，也是以“$”来标识的，其语法如下：



$(&lt;function&gt;&lt;arguments&gt;)



或是



${&lt;function&gt;&lt;arguments&gt;}



这里，&lt;function&gt;就是函数名，make支持的函数不多。&lt;arguments&gt;是函数的参数，参数间以逗号“,”分隔，而函数名和参数之间以“空&#26684;”分隔。函数调用以“$”开头，以圆括号或花括号把函数名和参数括起。感觉很像一个变量，是不是？函数中的参数可以使用变量，为了风&#26684;的统一，函数和变量的括号最好一样，如使用“$(substa,b,$(x))”这样的形式，而不是“$(substa,b,${x})”的形式。因为统一会更清楚，也会减少一些不必要的麻烦。



还是来看一个示例：



comma:=,

empty:=

space:=$(empty)$(empty)

foo:=abc

bar:=$(subst$(space),$(comma),$(foo))



在这个示例中，$(comma)的&#20540;是一个逗号。$(space)使用了$(empty)定义了一个空&#26684;，$(foo)的&#20540;是“abc”，$(bar)的定义用，调用了函数“subst”，这是一个替换函数，这个函数有三个参数，第一个参数是被替换字串，第二个参数是替换字串，第三个参数是替换操作作用的字串。这个函数也就是把$(foo)中的空&#26684;替换成逗号，所以$(bar)的&#20540;是“

a,b,c”。


二、字符串处理函数



$(subst&lt;from&gt;,&lt;to&gt;,&lt;text&gt;)



名称：字符串替换函数——subst。

功能：把字串&lt;text&gt;中的&lt;from&gt;字符串替换成&lt;to&gt;。

返回：函数返回被替换过后的字符串。



示例：



$(substee,EE,feetonthestreet)，



把“feetonthestreet”中的“ee”替换成“EE”，返回结果是“fEEtonthestrEEt

”。





$(patsubst&lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)



名称：模式字符串替换函数——patsubst。

功能：查找&lt;text&gt;中的单词（单词以“空&#26684;”、“Tab”或“回车”“换行”分隔）是否符合模式&lt;pattern&gt;，如果匹配的话，则以&lt;replacement&gt;替换。这里，&lt;pattern&gt;可以包括通配符“%”，表示任意长度的字串。如果&lt;replacement&gt;中也包含“%”，那么，&lt;replacement&gt;中的这个“%”将是&lt;pattern&gt;中的那个“%”所代表的字串。（可以用“\”来转义，以“\%”来表示真实含义的“%”字符）返回：函数返回被替换过后的字符串。



示例：



$(patsubst%.c,%.o,x.c.cbar.c)



把字串“x.c.cbar.c”符合模式[%.c]的单词替换成[%.o]，返回结果是“x.c.obar.o”



备注：



这和我们前面“变量章节”说过的相关知识有点相&#20284;。如：



“$(var:&lt;pattern&gt;=&lt;replacement&gt;)”

相当于

“$(patsubst&lt;pattern&gt;,&lt;replacement&gt;,$(var))”，



而“$(var:&lt;suffix&gt;=&lt;replacement&gt;)”

则相当于

“$(patsubst%&lt;suffix&gt;,%&lt;replacement&gt;,$(var))”。



例如有：objects=foo.obar.obaz.o，

那么，“$(objects:.o=.c)”和“$(patsubst%.o,%.c,$(objects))”是一样的。



$(strip&lt;string&gt;)



名称：去空&#26684;函数——strip。

功能：去掉&lt;string&gt;字串中开头和结尾的空字符。

返回：返回被去掉空&#26684;的字符串&#20540;。

示例：



$(stripabc)



把字串“abc”去到开头和结尾的空&#26684;，结果是“abc”。



$(findstring&lt;find&gt;,&lt;in&gt;)



名称：查找字符串函数——findstring。

功能：在字串&lt;in&gt;中查找&lt;find&gt;字串。

返回：如果找到，那么返回&lt;find&gt;，否则返回空字符串。

示例：



$(findstringa,abc)

$(findstringa,bc)



第一个函数返回“a”字符串，第二个返回“”字符串（空字符串）



$(filter&lt;pattern...&gt;,&lt;text&gt;)



名称：过滤函数——filter。

功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，保留符合模式&lt;pattern&gt;的单词。可

以有多个模式。

返回：返回符合模式&lt;pattern&gt;的字串。

示例：



sources:=foo.cbar.cbaz.sugh.h

foo:$(sources)

cc$(filter%.c%.s,$(sources))-ofoo



$(filter%.c%.s,$(sources))返回的&#20540;是“foo.cbar.cbaz.s”。



$(filter-out&lt;pattern...&gt;,&lt;text&gt;)



名称：反过滤函数——filter-out。

功能：以&lt;pattern&gt;模式过滤&lt;text&gt;字符串中的单词，去除符合模式&lt;pattern&gt;的单词。可

以有多个模式。

返回：返回不符合模式&lt;pattern&gt;的字串。

示例：



objects=main1.ofoo.omain2.obar.o

mains=main1.omain2.o



$(filter-out$(mains),$(objects))返回&#20540;是“foo.obar.o”。



$(sort&lt;list&gt;)



名称：排序函数——sort。

功能：给字符串&lt;list&gt;中的单词排序（升序）。

返回：返回排序后的字符串。

示例：$(sortfoobarlose)返回“barfoolose”。

备注：sort函数会去掉&lt;list&gt;中相同的单词。



$(word&lt;n&gt;,&lt;text&gt;)



名称：取单词函数——word。

功能：取字符串&lt;text&gt;中第&lt;n&gt;个单词。（从一开始）

返回：返回字符串&lt;text&gt;中第&lt;n&gt;个单词。如果&lt;n&gt;比&lt;text&gt;中的单词数要大，那么返回空

字符串。

示例：$(word2,foobarbaz)返回&#20540;是“bar”。



$(wordlist&lt;s&gt;,&lt;e&gt;,&lt;text&gt;)



名称：取单词串函数——wordlist。

功能：从字符串&lt;text&gt;中取从&lt;s&gt;开始到&lt;e&gt;的单词串。&lt;s&gt;和&lt;e&gt;是一个数字。

返回：返回字符串&lt;text&gt;中从&lt;s&gt;到&lt;e&gt;的单词字串。如果&lt;s&gt;比&lt;text&gt;中的单词数要大，那

么返回空字符串。如果&lt;e&gt;大于&lt;text&gt;的单词数，那么返回从&lt;s&gt;开始，到&lt;text&gt;结束的单

词串。

示例：$(wordlist2,3,foobarbaz)返回&#20540;是“barbaz”。



$(words&lt;text&gt;)



名称：单词个数统计函数——words。

功能：统计&lt;text&gt;中字符串中的单词个数。

返回：返回&lt;text&gt;中的单词数。

示例：$(words,foobarbaz)返回&#20540;是“3”。

备注：如果我们要取&lt;text&gt;中最后的一个单词，我们可以这样：$(word$(words&lt;text&gt;


),&lt;text&gt;)。



$(firstword&lt;text&gt;)



名称：首单词函数——firstword。

功能：取字符串&lt;text&gt;中的第一个单词。

返回：返回字符串&lt;text&gt;的第一个单词。

示例：$(firstwordfoobar)返回&#20540;是“foo”。

备注：这个函数可以用word函数来实现：$(word1,&lt;text&gt;)。



以上，是所有的字符串操作函数，如果搭配混合使用，可以完成比较复杂的功能。这里，

举一个现实中应用的例子。我们知道，make使用“VPATH”变量来指定“依赖文件”的搜索

路径。于是，我们可以利用这个搜索路径来指定编译器对头文件的搜索路径参数CFLAGS，

如：



overrideCFLAGS&#43;=$(patsubst%,-I%,$(subst:,,$(VPATH)))



如果我们的“$(VPATH)”&#20540;是“src:../headers”，那么“$(patsubst%,-I%,$(subst:

,,$(VPATH)))”将返回“-Isrc-I../headers”，这正是cc或gcc搜索头文件路径的参数

。



三、文件名操作函数


下面我们要介绍的函数主要是处理文件名的。每个函数的参数字符串都会被当做一个或是

一系列的文件名来对待。



$(dir&lt;names...&gt;)



名称：取目录函数——dir。

功能：从文件名序列&lt;names&gt;中取出目录部分。目录部分是指最后一个反斜杠（“/”）之

前的部分。如果没有反斜杠，那么返回“./”。

返回：返回文件名序列&lt;names&gt;的目录部分。

示例：$(dirsrc/foo.chacks)返回&#20540;是“src/./”。



$(notdir&lt;names...&gt;)



名称：取文件函数——notdir。

功能：从文件名序列&lt;names&gt;中取出非目录部分。非目录部分是指最后一个反斜杠（“/”

）之后的部分。

返回：返回文件名序列&lt;names&gt;的非目录部分。

示例：$(notdirsrc/foo.chacks)返回&#20540;是“foo.chacks”。



$(suffix&lt;names...&gt;)



名称：取后缀函数——suffix。

功能：从文件名序列&lt;names&gt;中取出各个文件名的后缀。

返回：返回文件名序列&lt;names&gt;的后缀序列，如果文件没有后缀，则返回空字串。

示例：$(suffixsrc/foo.csrc-1.0/bar.chacks)返回&#20540;是“.c.c”。



$(basename&lt;names...&gt;)



名称：取前缀函数——basename。

功能：从文件名序列&lt;names&gt;中取出各个文件名的前缀部分。

返回：返回文件名序列&lt;names&gt;的前缀序列，如果文件没有前缀，则返回空字串。

示例：$(basenamesrc/foo.csrc-1.0/bar.chacks)返回&#20540;是“src/foosrc-1.0/barh

acks”。



$(addsuffix&lt;suffix&gt;,&lt;names...&gt;)



名称：加后缀函数——addsuffix。

功能：把后缀&lt;suffix&gt;加到&lt;names&gt;中的每个单词后面。

返回：返回加过后缀的文件名序列。

示例：$(addsuffix.c,foobar)返回&#20540;是“foo.cbar.c”。


$(addprefix&lt;prefix&gt;,&lt;names...&gt;)



名称：加前缀函数——addprefix。

功能：把前缀&lt;prefix&gt;加到&lt;names&gt;中的每个单词后面。

返回：返回加过前缀的文件名序列。

示例：$(addprefixsrc/,foobar)返回&#20540;是“src/foosrc/bar”。



$(join&lt;list1&gt;,&lt;list2&gt;)



名称：连接函数——join。

功能：把&lt;list2&gt;中的单词对应地加到&lt;list1&gt;的单词后面。如果&lt;list1&gt;的单词个数要比&lt;

list2&gt;的多，那么，&lt;list1&gt;中的多出来的单词将保持原样。如果&lt;list2&gt;的单词个数要比

&lt;list1&gt;多，那么，&lt;list2&gt;多出来的单词将被复制到&lt;list2&gt;中。

返回：返回连接过后的字符串。

示例：$(joinaaabbb,111222333)返回&#20540;是“aaa111bbb222333”。



四、foreach函数



foreach函数和别的函数非常的不一样。因为这个函数是用来做循环用的，Makefile中的

foreach函数几乎是仿照于Unix标准Shell（/bin/sh）中的for语句，或是C-Shell（/bin

/csh）中的foreach语句而构建的。它的语法是：


$(foreach&lt;var&gt;,&lt;list&gt;,&lt;text&gt;)



这个函数的意思是，把参数&lt;list&gt;中的单词逐一取出放到参数&lt;var&gt;所指定的变量中，然后再执行&lt;text&gt;所包含的表达式。每一次&lt;text&gt;会返回一个字符串，循环过程中，&lt;text&gt;的所返回的每个字符串会以空&#26684;分隔，最后当整个循环结束时，&lt;text&gt;所返回的每个字符串所组成的整个字符串（以空&#26684;分隔）将会是foreach函数的返回&#20540;。


所以，&lt;var&gt;最好是一个变量名，&lt;list&gt;可以是一个表达式，而&lt;text&gt;中一般会使用&lt;var&gt;

这个参数来依次枚举&lt;list&gt;中的单词。举个例子：



names:=abcd



files:=$(foreachn,$(names),$(n).o)


上面的例子中，$(name)中的单词会被挨个取出，并存到变量“n”中，“$(n).o”每次根据“$(n)”计算出一个&#20540;，这些&#20540;以空&#26684;分隔，最后作为foreach函数的返回，所以，$(f

iles)的&#20540;是“a.ob.oc.od.o”。



注意，foreach中的&lt;var&gt;参数是一个临时的局部变量，foreach函数执行完后，参数&lt;var&gt;的变量将不在作用，其作用域只在foreach函数当中。




五、if函数



if函数很像GNU的make所支持的条件语句——ifeq（参见前面所述的章节），if函数的语法是：



$(if&lt;condition&gt;,&lt;then-part&gt;)




或是



$(if&lt;condition&gt;,&lt;then-part&gt;,&lt;else-part&gt;)




可见，if函数可以包含“else”部分，或是不含。即if函数的参数可以是两个，也可以是三个。&lt;condition&gt;参数是if的表达式，如果其返回的为非空字符串，那么这个表达式就相当于返回真，于是，&lt;then-part&gt;会被计算，否则&lt;else-part&gt;会被计算。


而if函数的返回&#20540;是，如果&lt;condition&gt;为真（非空字符串），那个&lt;then-part&gt;会是整个函数的返回&#20540;，如果&lt;condition&gt;为假（空字符串），那么&lt;else-part&gt;会是整个函数的返回&#20540;，此时如果&lt;else-part&gt;没有被定义，那么，整个函数返回空字串。


所以，&lt;then-part&gt;和&lt;else-part&gt;只会有一个被计算。




六、call函数


call函数是唯一一个可以用来创建新的参数化的函数。你可以写一个非常复杂的表达式，这个表达式中，你可以定义许多参数，然后你可以用call函数来向这个表达式传递参数。其语法是：



$(call&lt;expression&gt;,&lt;parm1&gt;,&lt;parm2&gt;,&lt;parm3&gt;...)



当make执行这个函数时，&lt;expression&gt;参数中的变量，如$(1)，$(2)，$(3)等，会被参数&lt;parm1&gt;，&lt;parm2&gt;，&lt;parm3&gt;依次取代。而&lt;expression&gt;的返回&#20540;就是call函数的返回&#20540;。例如：


reverse=$(1)$(2)


foo=$(callreverse,a,b)




那么，foo的&#20540;就是“ab”。当然，参数的次序是可以自定义的，不一定是顺序的，如：


reverse=$(2)$(1)

foo=$(callreverse,a,b)


此时的foo的&#20540;就是“ba”。


七、origin函数

origin函数不像其它的函数，他并不操作变量的&#20540;，他只是告诉你你的这个变量是哪里来的？其语法是：


$(origin&lt;variable&gt;)



注意，&lt;variable&gt;是变量的名字，不应该是引用。所以你最好不要在&lt;variable&gt;中使用“$”字符。Origin函数会以其返回&#20540;来告诉你这个变量的“出生情况”，下面，是origin函

数的返回&#20540;:


“undefined”



如果&lt;variable&gt;从来没有定义过，origin函数返回这个&#20540;“undefined”。


“default”



如果&lt;variable&gt;是一个默认的定义，比如“CC”这个变量，这种变量我们将在后面讲述。


“environment”



如果&lt;variable&gt;是一个环境变量，并且当Makefile被执行时，“-e”参数没有被打开。



“file”



如果&lt;variable&gt;这个变量被定义在Makefile中。



“commandline”



如果&lt;variable&gt;这个变量是被命令行定义的。


“override”



如果&lt;variable&gt;是被override指示符重新定义的。


“automatic”



如果&lt;variable&gt;是一个命令运行中的自动化变量。关于自动化变量将在后面讲述。



这些信息对于我们编写Makefile是非常有用的，例如，假设我们有一个Makefile其包了一个定义文件Make.def，在Make.def中定义了一个变量“bletch”，而我们的环境中也有一

个环境变量“bletch”，此时，我们想判断一下，如果变量来源于环境，那么我们就把之重定义了，如果来源于Make.def或是命令行等非环境的，那么我们就不重新定义它。于是

，在我们的Makefile中，我们可以这样写：



ifdefbletch



ifeq&quot;$(originbletch)&quot;&quot;environment&quot;



bletch=barf,gag,etc.


endif


endif


当然，你也许会说，使用override关键字不就可以重新定义环境中的变量了吗？为什么需要使用这样的步骤？是的，我们用override是可以达到这样的效果，可是override过于粗

暴，它同时会把从命令行定义的变量也覆盖了，而我们只想重新定义环境传来的，而不想重新定义命令行传来的。



八、shell函数


shell函数也不像其它的函数。顾名思义，它的参数应该就是操作系统Shell的命令。它和反引号“`”是相同的功能。这就是说，shell函数把执行操作系统命令后的输出作为函数

返回。于是，我们可以用操作系统命令以及字符串处理命令awk，sed等等命令来生成一个变量，如：



contents:=$(shellcatfoo)




files:=$(shellecho*.c)



注意，这个函数会新生成一个Shell程序来执行命令，所以你要注意其运行性能，如果你的Makefile中有一些比较复杂的规则，并大量使用了这个函数，那么对于你的系统性能是有害的。特别是Makefile的隐晦的规则可能会让你的shell函数执行的次数比你想像的多得多。



九、控制make的函数




make提供了一些函数来控制make的运行。通常，你需要检测一些运行Makefile时的运行时信息，并且根据这些信息来决定，你是让make继续执行，还是停止。



$(error&lt;text...&gt;)


产生一个致命的错误，&lt;text...&gt;是错误信息。注意，error函数不会在一被使用就会产生错误信息，所以如果你把其定义在某个变量中，并在后续的脚本中使用这个变量，那么也

是可以的。例如：


示例一：



ifdefERROR_001



$(errorerroris$(ERROR_001))


endif



示例二：



ERR=$(errorfoundanerror!)



.PHONY:err



err:;$(ERR)



示例一会在变量ERROR_001定义了后执行时产生error调用，而示例二则在目录err被执行时才发生error调用。


$(warning&lt;text...&gt;)



这个函数很像error函数，只是它并不会让make退出，只是输出一段警告信息，而make继续执行。
0——表示成功执行。
1——如果make运行时出现任何错误，其返回1。
2——如果你使用了make的“-q”选项，并且make使得一些目标不需要更新，那么返回2。
Make的相关参数我们会在后续章节中讲述。





二、指定Makefile



前面我们说过，GNUmake找寻默认的Makefile的规则是在当前目录下依次找三个文件——“GNUmakefile”、“makefile”和“Makefile”。其按顺序找这三个文件，一旦找到，就

开始读取这个文件并执行。



当前，我们也可以给make命令指定一个特殊名字的Makefile。要达到这个功能，我们要使用make的“-f”或是“--file”参数（“--makefile”参数也行）。例如，我们有个mak

efile的名字是“hchen.mk”，那么，我们可以这样来让make来执行这个文件：


make–fhchen.mk



如果在make的命令行是，你不只一次地使用了“-f”参数，那么，所有指定的makefile将会被连在一起传递给make执行。



三、指定目标



一般来说，make的最终目标是makefile中的第一个目标，而其它目标一般是由这个目标连带出来的。这是make的默认行为。当然，一般来说，你的makefile中的第一个目标是由许多个目标组成，你可以指示make，让其完成你所指定的目标。要达到这一目的很简单，需在make命令后直接跟目标的名字就可以完成（如前面提到的“makeclean”形式）任何在makefile中的目标都可以被指定成终极目标，但是除了以“-”打头，或是包含了“=”的目标，因为有这些字符的目标，会被解析成命令行参数或是变量。甚至没有被我们明确写出来的目标也可以成为make的终极目标，也就是说，只要make可以找到其隐含规则推导规则，那么这个隐含目标同样可以被指定成终极目标。


有一个make的环境变量叫“MAKECMDGOALS”，这个变量中会存放你所指定的终极目标的列表，如果在命令行上，你没有指定目标，那么，这个变量是空&#20540;。这个变量可以让你使用在一些比较特殊的情形下。比如下面的例子：



sources=foo.cbar.c

ifneq($(MAKECMDGOALS),clean)

include$(sources:.c=.d)

endif



基于上面的这个例子，只要我们输入的命令不是“makeclean”，那么makefile会自动包含“foo.d”和“bar.d”这两个makefile。


使用指定终极目标的方法可以很方便地让我们编译我们的程序，例如下面这个例子：



.PHONY:all

all:prog1prog2prog3prog4



从这个例子中，我们可以看到，这个makefile中有四个需要编译的程序——“prog1”，
“prog2”，“prog3”和“prog4”，我们可以使用“makeall”命令来编译所有的目标

（如果把all置成第一个目标，那么只需执行“make”），我们也可以使用“makeprog2”来单独编译目标“prog2”。



即然make可以指定所有makefile中的目标，那么也包括“伪目标”，于是我们可以根据这种性质来让我们的makefile根据指定的不同的目标来完成不同的事。在Unix世界中，软件

发布时，特别是GNU这种开源软件的发布时，其makefile都包含了编译、安装、打包等功能。我们可以参照这种规则来书写我们的makefile中的目标。
“all”






这个伪目标是所有目标的目标，其功能一般是编译所有的目标。
“clean”



这个伪目标功能是删除所有被make创建的文件。
“install”



这个伪目标功能是安装已编译好的程序，其实就是把目标执行文件拷贝到指定的目标中去。
“print”




这个伪目标的功能是例出改变过的源文件。
“tar”






这个伪目标功能是把源程序打包备份。也就是一个tar文件。
“dist”





这个伪目标功能是创建一个压缩文件，一般是把tar文件压成Z文件。或是gz文件。
“TAGS”



这个伪目标功能是更新所有的目标，以备完整地重编译使用。
“check”和“test”

这两个伪目标一般用来测试makefile的流程。
当然一个项目的makefile中也不一定要书写这样的目标，这些东西都是GNU的东西，但是我想，GNU搞出这些东西一定有其可取之处（等你的UNIX下的程序文件一多时你就会发现这些功能很有用了），这里只不过是说明了，如果你要书写这种功能，最好使用这种名字命名你的目标，这样规范一些，规范的好处就是——不用解释，大家都明白。而且如果你的makefile中有这些功能，一是很实用，二是可以显得你的makefile很专业（不是那种初学者的作品）。



四、检查规则



有时候，我们不想让我们的makefile中的规则执行起来，我们只想检查一下我们的命令，或是执行的序列。于是我们可以使用make命令的下述参数：



“-n”

“--just-print”

“--dry-run”

“--recon”

不执行参数，这些参数只是打印命令，不管目标是否更新，把规则和连带规则下的命令打印出来，但不执行，这些参数对于我们调试makefile很有用处。



“-t”

“--touch”

这个参数的意思就是把目标文件的时间更新，但不更改目标文件。也就是说，make假装编译目标，但不是真正的编译目标，只是把目标变成已编译过的状态。



“-q”

“--question”

这个参数的行为是找目标的意思，也就是说，如果目标存在，那么其什么也不会输出，当然也不会执行编译，如果目标不存在，其会打印出一条出错信息。



“-W&lt;file&gt;”

“--what-if=&lt;file&gt;”

“--assume-new=&lt;file&gt;”

“--new-file=&lt;file&gt;”

这个参数需要指定一个文件。一般是是源文件（或依赖文件），Make会根据规则推导来运行依赖于这个文件的命令，一般来说，可以和“-n”参数一同使用，来查看这个依赖文件

所发生的规则命令。


另外一个很有意思的用法是结合“-p”和“-v”来输出makefile被执行时的信息（这个将在后面讲述）。




五、make的参数



下面列举了所有GNUmake3.80版的参数定义。其它版本和产商的make大同小异，不过其它产商的make的具体参数还是请参考各自的产品文档。



“-b”

“-m”

这两个参数的作用是忽略和其它版本make的兼容性。



“-B”

“--always-make”

认为所有的目标都需要更新（重编译）。



“-C&lt;dir&gt;”

“--directory=&lt;dir&gt;”

指定读取makefile的目录。如果有多个“-C”参数，make的解释是后面的路径以前面的作为相对路径，并以最后的目录作为被指定目录。如：“make–C~hchen/test–Cprog”

等价于“make–C~hchen/test/prog”。



“—debug[=&lt;options&gt;]”

输出make的调试信息。它有几种不同的级别可供选择，如果没有参数，那就是输出最简单的调试信息。下面是&lt;options&gt;的取&#20540;：
a——也就是all，输出所有的调试信息。（会非常的多）
b——也就是basic，只输出简单的调试信息。即输出不需要重编译的目标。
v——也就是verbose，在b选项的级别之上。输出的信息包括哪个makefile被解析，不需要被重编译的依赖文件（或是依赖目标）等。
i——也就是implicit，输出所以的隐含规则。
j——也就是jobs，输出执行规则中命令的详细信息，如命令的PID、返回码等。
m——也就是makefile，输出make读取makefile，更新makefile，执行makefile的信息。
“-d”

相当于“--debug=a”。



“-e”

“--environment-overrides”

指明环境变量的&#20540;覆盖makefile中定义的变量的&#20540;。



“-f=&lt;file&gt;”

“--file=&lt;file&gt;”

“--makefile=&lt;file&gt;”

指定需要执行的makefile。



“-h”

“--help”

显示帮助信息。



“-i”

“--ignore-errors”

在执行时忽略所有的错误。



“-I&lt;dir&gt;”

“--include-dir=&lt;dir&gt;”

指定一个被包含makefile的搜索目标。可以使用多个“-I”参数来指定多个目录。



“-j[&lt;jobsnum&gt;]”

“--jobs[=&lt;jobsnum&gt;]”

指同时运行命令的个数。如果没有这个参数，make运行命令时能运行多少就运行多少。如果有一个以上的“-j”参数，那么仅最后一个“-j”才是有效的。（注意这个参数在MS-D

OS中是无用的）



“-k”

“--keep-going”

出错也不停止运行。如果生成一个目标失败了，那么依赖于其上的目标就不会被执行了。





“-l&lt;load&gt;”

“--load-average[=&lt;load]”

“—max-load[=&lt;load&gt;]”

指定make运行命令的负载。



“-n”

“--just-print”

“--dry-run”

“--recon”

仅输出执行过程中的命令序列，但并不执行。



“-o&lt;file&gt;”

“--old-file=&lt;file&gt;”

“--assume-old=&lt;file&gt;”

不重新生成的指定的&lt;file&gt;，即使这个目标的依赖文件新于它。



“-p”

“--print-data-base”

输出makefile中的所有数据，包括所有的规则和变量。这个参数会让一个简单的makefile都会输出一堆信息。如果你只是想输出信息而不想执行makefile，你可以使用“make-q

p”命令。如果你想查看执行makefile前的预设变量和规则，你可以使用“make–p–f
/dev/null”。这个参数输出的信息会包含着你的makefile文件的文件名和行号，所以，用

这个参数来调试你的makefile会是很有用的，特别是当你的环境变量很复杂的时候。


“-q”

“--question”

不运行命令，也不输出。仅仅是检查所指定的目标是否需要更新。如果是0则说明要更新，如果是2则说明有错误发生。



“-r”

“--no-builtin-rules”

禁止make使用任何隐含规则。



“-R”

“--no-builtin-variabes”

禁止make使用任何作用于变量上的隐含规则。



“-s”

“--silent”

“--quiet”

在命令运行时不输出命令的输出。



“-S”

“--no-keep-going”

“--stop”

取消“-k”选项的作用。因为有些时候，make的选项是从环境变量“MAKEFLAGS”中继承下来的。所以你可以在命令行中使用这个参数来让环境变量中的“-k”选项失效。



“-t”

“--touch”

相当于UNIX的touch命令，只是把目标的修改日期变成最新的，也就是阻止生成目标的命令运行。



“-v”

“--version”

输出make程序的版本、版权等关于make的信息。



“-w”

“--print-directory”

输出运行makefile之前和之后的信息。这个参数对于跟踪嵌套式调用make时很有用。



“--no-print-directory”

禁止“-w”选项。



“-W&lt;file&gt;”

“--what-if=&lt;file&gt;”

“--new-file=&lt;file&gt;”

“--assume-file=&lt;file&gt;”

假定目标&lt;file&gt;需要更新，如果和“-n”选项使用，那么这个参数会输出该目标更新时的运行动作。如果没有“-n”那么就像运行UNIX的“touch”命令一样，使得&lt;file&gt;的修改时

间为当前时间。



“--warn-undefined-variables”

只要make发现有未定义的变量，那么就输出警告信息。



隐含规则

————



在我们使用Makefile时，有一些我们会经常使用，而且使用频率非常高的东西，比如，我们编译C/C&#43;&#43;的源程序为中间目标文件（Unix下是[.o]文件，Windows下是[.obj]文件）。本章讲述的就是一些在Makefile中的“隐含的”，早先约定了的，不需要我们再写出来的规则。



“隐含规则”也就是一种惯例，make会按照这种“惯例”心照不喧地来运行，那怕我们的Makefile中没有书写这样的规则。例如，把[.c]文件编译成[.o]文件这一规则，你根本就

不用写出来，make会自动推导出这种规则，并生成我们需要的[.o]文件。


“隐含规则”会使用一些我们系统变量，我们可以改变这些系统变量的&#20540;来定制隐含规则的运行时的参数。如系统变量“CFLAGS”可以控制编译时的编译器参数。



我们还可以通过“模式规则”的方式写下自己的隐含规则。用“后缀规则”来定义隐含规则会有许多的限制。使用“模式规则”会更回得智能和清楚，但“后缀规则”可以用来保

证我们Makefile的兼容性。

我们了解了“隐含规则”，可以让其为我们更好的服务，也会让我们知道一些“约定俗成”了的东西，而不至于使得我们在运行Makefile时出现一些我们觉得莫名其妙的东西。当

然，任何事物都是矛盾的，水能载舟，亦可覆舟，所以，有时候“隐含规则”也会给我们造成不小的麻烦。只有了解了它，我们才能更好地使用它。



一、使用隐含规则



如果要使用隐含规则生成你需要的目标，你所需要做的就是不要写出这个目标的规则。那么，make会试图去自动推导产生这个目标的规则和命令，如果make可以自动推导生成这个目标的规则和命令，那么这个行为就是隐含规则的自动推导。当然，隐含规则是make事先约定好的一些东西。例如，我们有下面的一个Makefile：



foo:foo.obar.o

cc–ofoofoo.obar.o$(CFLAGS)$(LDFLAGS)



我们可以注意到，这个Makefile中并没有写下如何生成foo.o和bar.o这两目标的规则和命令。因为make的“隐含规则”功能会自动为我们自动去推导这两个目标的依赖目标和生成

命令。


make会在自己的“隐含规则”库中寻找可以用的规则，如果找到，那么就会使用。如果找不到，那么就会报错。在上面的那个例子中，make调用的隐含规则是，把[.o]的目标的依赖文件置成[.c]，并使用C的编译命令“cc–c$(CFLAGS)[.c]”来生成[.o]的目标。也就是说，我们完全没有必要写下下面的两条规则：



foo.o:foo.c

cc–cfoo.c$(CFLAGS)

bar.o:bar.c

cc–cbar.c$(CFLAGS)



因为，这已经是“约定”好了的事了，make和我们约定好了用C编译器“cc”生成[.o]文件的规则，这就是隐含规则。



当然，如果我们为[.o]文件书写了自己的规则，那么make就不会自动推导并调用隐含规则，它会按照我们写好的规则忠实地执行。



还有，在make的“隐含规则库”中，每一条隐含规则都在库中有其顺序，越靠前的则是越被经常使用的，所以，这会导致我们有些时候即使我们显示地指定了目标依赖，make也不会管。如下面这条规则（没有命令）：



foo.o:foo.p



依赖文件“foo.p”（Pascal程序的源文件）有可能变得没有意义。如果目录下存在了“foo.c”文件，那么我们的隐含规则一样会生效，并会通过“foo.c”调用C的编译器生成f

oo.o文件。因为，在隐含规则中，Pascal的规则出现在C的规则之后，所以，make找到可以生成foo.o的C的规则就不再寻找下一条规则了。如果你确实不希望任何隐含规则推导，那么，你就不要只写出“依赖规则”，而不写命令。



二、隐含规则一览



这里我们将讲述所有预先设置（也就是make内建）的隐含规则，如果我们不明确地写下规则，那么，make就会在这些规则中寻找所需要规则和命令。当然，我们也可以使用make的参数“-r”或“--no-builtin-rules”选项来取消所有的预设置的隐含规则。



当然，即使是我们指定了“-r”参数，某些隐含规则还是会生效，因为有许多的隐含规则都是使用了“后缀规则”来定义的，所以，只要隐含规则中有“后缀列表”（也就一系统

定义在目标.SUFFIXES的依赖目标），那么隐含规则就会生效。默认的后缀列表是：.out,.a,.ln,.o,.c,.cc,.C,.p,.f,.F,.r,.y,.l,.s,.S,.mod,.sym,.def,.

h,.info,.dvi,.tex,.texinfo,.texi,.txinfo,.w,.ch.web,.sh,.elc,.el。具体的细节，我们会在后面讲述。



还是先来看一看常用的隐含规则吧。



1、编译C程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.c”，并且其生成命令是“$(CC)–c$(CPPFLAGS)$(CFLAGS)”



2、编译C&#43;&#43;程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.cc”或是“&lt;n&gt;.C”，并且其生成命令是“$(CXX)–c$(CPPFLAGS)$(CFLAGS)”。（建议使用“.cc”作为C&#43;&#43;源文件的后缀，而

不是“.C”）



3、编译Pascal程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.p”，并且其生成命令是“$(PC)–c$(PFLAGS)”。



4、编译Fortran/Ratfor程序的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.r”或“&lt;n&gt;.F”或“&lt;n&gt;.f”，并且其生成命令是:

“.f”“$(FC)–c$(FFLAGS)”

“.F”“$(FC)–c$(FFLAGS)$(CPPFLAGS)”

“.f”“$(FC)–c$(FFLAGS)$(RFLAGS)”



5、预处理Fortran/Ratfor程序的隐含规则。

“&lt;n&gt;.f”的目标的依赖目标会自动推导为“&lt;n&gt;.r”或“&lt;n&gt;.F”。这个规则只是转换Ratfor或有预处理的Fortran程序到一个标准的Fortran程序。其使用的命令是：

“.F”“$(FC)–F$(CPPFLAGS)$(FFLAGS)”

“.r”“$(FC)–F$(FFLAGS)$(RFLAGS)”



6、编译Modula-2程序的隐含规则。

“&lt;n&gt;.sym”的目标的依赖目标会自动推导为“&lt;n&gt;.def”，并且其生成命令是：“$(M2C)$(M2FLAGS)$(DEFFLAGS)”。“&lt;n.o&gt;”的目标的依赖目标会自动推导为“&lt;n&gt;.mod”，

并且其生成命令是：“$(M2C)$(M2FLAGS)$(MODFLAGS)”。



7、汇编和汇编预处理的隐含规则。

“&lt;n&gt;.o”的目标的依赖目标会自动推导为“&lt;n&gt;.s”，默认使用编译品“as”，并且其生成命令是：“$(AS)$(ASFLAGS)”。“&lt;n&gt;.s”的目标的依赖目标会自动推导为“&lt;n&gt;.S”

，默认使用C预编译器“cpp”，并且其生成命令是：“$(AS)$(ASFLAGS)”。



8、链接Object文件的隐含规则。

“&lt;n&gt;”目标依赖于“&lt;n&gt;.o”，通过运行C的编译器来运行链接程序生成（一般是“ld”），其生成命令是：“$(CC)$(LDFLAGS)&lt;n&gt;.o$(LOADLIBES)$(LDLIBS)”。这个规则对

于只有一个源文件的工程有效，同时也对多个Object文件（由不同的源文件生成）的也有效。例如如下规则：


x:y.oz.o



并且“x.c”、“y.c”和“z.c”都存在时，隐含规则将执行如下命令：



cc-cx.c-ox.o

cc-cy.c-oy.o

cc-cz.c-oz.o

ccx.oy.oz.o-ox

rm-fx.o

rm-fy.o

rm-fz.o



如果没有一个源文件（如上例中的x.c）和你的目标名字（如上例中的x）相关联，那么，你最好写出自己的生成规则，不然，隐含规则会报错的。



9、YaccC程序时的隐含规则。


“&lt;n&gt;.c”的依赖文件被自动推导为“n.y”（Yacc生成的文件），其生成命令是：“$(YACC)$(YFALGS)”。（“Yacc”是一个语法分析器，关于其细节请查看相关资料）



10、LexC程序时的隐含规则。

“&lt;n&gt;.c”的依赖文件被自动推导为“n.l”（Lex生成的文件），其生成命令是：“$(LEX)$(LFALGS)”。（关于“Lex”的细节请查看相关资料）



11、LexRatfor程序时的隐含规则。

“&lt;n&gt;.r”的依赖文件被自动推导为“n.l”（Lex生成的文件），其生成命令是：“$(LEX

)$(LFALGS)”。



12、从C程序、Yacc文件或Lex文件创建Lint库的隐含规则。

“&lt;n&gt;.ln”（lint生成的文件）的依赖文件被自动推导为“n.c”，其生成命令是：“$(LINT)$(LINTFALGS)$(CPPFLAGS)-i”。对于“&lt;n&gt;.y”和“&lt;n&gt;.l”也是同样的规则。



三、隐含规则使用的变量



在隐含规则中的命令中，基本上都是使用了一些预先设置的变量。你可以在你的makefile中改变这些变量的&#20540;，或是在make的命令行中传入这些&#20540;，或是在你的环境变量中设置这些&#20540;，无论怎么样，只要设置了这些特定的变量，那么其就会对隐含规则起作用。当然，你也可以利用make的“-R”或“--no–builtin-variables”参数来取消你所定义的变量

对隐含规则的作用。


例如，第一条隐含规则——编译C程序的隐含规则的命令是“$(CC)–c$(CFLAGS)$(CPPFLAGS)”。Make默认的编译命令是“cc”，如果你把变量“$(CC)”重定义成“gcc”，把

变量“$(CFLAGS)”重定义成“-g”，那么，隐含规则中的命令全部会以“gcc–c-g$(CPPFLAGS)”的样子来执行了。



我们可以把隐含规则中使用的变量分成两种：一种是命令相关的，如“CC”；一种是参数

相的关，如“CFLAGS”。下面是所有隐含规则中会用到的变量：



1、关于命令的变量。



AR

函数库打包程序。默认命令是“ar”。

AS

汇编语言编译程序。默认命令是“as”。

CC

C语言编译程序。默认命令是“cc”。

CXX

C&#43;&#43;语言编译程序。默认命令是“g&#43;&#43;”。

CO

从RCS文件中扩展文件程序。默认命令是“co”。

CPP

C程序的预处理器（输出是标准输出设备）。默认命令是“$(CC)–E”。

FC

Fortran和Ratfor的编译器和预处理程序。默认命令是“f77”。

GET

从SCCS文件中扩展文件的程序。默认命令是“get”。

LEX

Lex方法分析器程序（针对于C或Ratfor）。默认命令是“lex”。

PC

Pascal语言编译程序。默认命令是“pc”。

YACC

Yacc文法分析器（针对于C程序）。默认命令是“yacc”。

YACCR

Yacc文法分析器（针对于Ratfor程序）。默认命令是“yacc–r”。

MAKEINFO

转换Texinfo源文件（.texi）到Info文件程序。默认命令是“makeinfo”。

TEX

从TeX源文件创建TeXDVI文件的程序。默认命令是“tex”。

TEXI2DVI

从Texinfo源文件创建军TeXDVI文件的程序。默认命令是“texi2dvi”。

WEAVE

转换Web到TeX的程序。默认命令是“weave”。

CWEAVE

转换CWeb到TeX的程序。默认命令是“cweave”。

TANGLE

转换Web到Pascal语言的程序。默认命令是“tangle”。

CTANGLE

转换CWeb到C。默认命令是“ctangle”。

RM

删除文件命令。默认命令是“rm–f”。



2、关于命令参数的变量


下面的这些变量都是相关上面的命令的参数。如果没有指明其默认&#20540;，那么其默认&#20540;都是

空。



ARFLAGS

函数库打包程序AR命令的参数。默认&#20540;是“rv”。

ASFLAGS

汇编语言编译器参数。（当明显地调用“.s”或“.S”文件时）。

CFLAGS

C语言编译器参数。

CXXFLAGS

C&#43;&#43;语言编译器参数。

COFLAGS

RCS命令参数。

CPPFLAGS

C预处理器参数。（C和Fortran编译器也会用到）。

FFLAGS

Fortran语言编译器参数。

GFLAGS

SCCS“get”程序参数。

LDFLAGS

链接器参数。（如：“ld”）

LFLAGS

Lex文法分析器参数。

PFLAGS

Pascal语言编译器参数。

RFLAGS

Ratfor程序的Fortran编译器参数。

YFLAGS

Yacc文法分析器参数。




四、隐含规则链



有些时候，一个目标可能被一系列的隐含规则所作用。例如，一个[.o]的文件生成，可能会是先被Yacc的[.y]文件先成[.c]，然后再被C的编译器生成。我们把这一系列的隐含规则

叫做“隐含规则链”。



在上面的例子中，如果文件[.c]存在，那么就直接调用C的编译器的隐含规则，如果没有[.c]文件，但有一个[.y]文件，那么Yacc的隐含规则会被调用，生成[.c]文件，然后，再调

用C编译的隐含规则最终由[.c]生成[.o]文件，达到目标。



我们把这种[.c]的文件（或是目标），叫做中间目标。不管怎么样，make会努力自动推导生成目标的一切方法，不管中间目标有多少，其都会执着地把所有的隐含规则和你书写的规则全部合起来分析，努力达到目标，所以，有些时候，可能会让你觉得奇怪，怎么我的目标会这样生成？怎么我的makefile发疯了？


在默认情况下，对于中间目标，它和一般的目标有两个地方所不同：第一个不同是除非中间的目标不存在，才会引发中间规则。第二个不同的是，只要目标成功产生，那么，产生最终目标过程中，所产生的中间目标文件会被以“rm-f”删除。


通常，一个被makefile指定成目标或是依赖目标的文件不能被当作中介。然而，你可以明显地说明一个文件或是目标是中介目标，你可以使用伪目标“.INTERMEDIATE”来强制声明。（如：.INTERMEDIATE：mid）



你也可以阻止make自动删除中间目标，要做到这一点，你可以使用伪目标“.SECONDARY”来强制声明（如：.SECONDARY:sec）。你还可以把你的目标，以模式的方式来指定（如：%.o）成伪目标“.PRECIOUS”的依赖目标，以保存被隐含规则所生成的中间文件。



在“隐含规则链”中，禁止同一个目标出现两次或两次以上，这样一来，就可防止在make自动推导时出现无限递归的情况。


Make会优化一些特殊的隐含规则，而不生成中间文件。如，从文件“foo.c”生成目标程序“foo”，按道理，make会编译生成中间文件“foo.o”，然后链接成“foo”，但在实际情况下，这一动作可以被一条“cc”的命令完成（cc–ofoofoo.c），于是优化过的规

则就不会生成中间文件。




五、定义模式规则



你可以使用模式规则来定义一个隐含规则。一个模式规则就好像一个一般的规则，只是在规则中，目标的定义需要有&quot;%&quot;字符。&quot;%&quot;的意思是表示一个或多个任意字符。在依赖目标中同样可以使用&quot;%&quot;，只是依赖目标中的&quot;%&quot;的取&#20540;，取决于其目标。


有一点需要注意的是，&quot;%&quot;的展开发生在变量和函数的展开之后，变量和函数的展开发生在make载入Makefile时，而模式规则中的&quot;%&quot;则发生在运行时。




1、模式规则介绍



模式规则中，至少在规则的目标定义中要包含&quot;%&quot;，否则，就是一般的规则。目标中的&quot;%&quot;定义表示对文件名的匹配，&quot;%&quot;表示长度任意的非空字符串。例如：&quot;%.c&quot;表示以&quot;.c&quot;结尾的文件名（文件名的长度至少为3），而&quot;s.%.c&quot;则表示以&quot;s.&quot;开头，&quot;.c&quot;结尾的文件名（文件名的长度至少为5）。


如果&quot;%&quot;定义在目标中，那么，目标中的&quot;%&quot;的&#20540;决定了依赖目标中的&quot;%&quot;的&#20540;，也就是说，目标中的模式的&quot;%&quot;决定了依赖目标中&quot;%&quot;的样子。例如有一个模式规则如下：



%.o:%.c;&lt;command......&gt;



其含义是，指出了怎么从所有的[.c]文件生成相应的[.o]文件的规则。如果要生成的目标是&quot;a.ob.o&quot;，那么&quot;%c&quot;就是&quot;a.cb.c&quot;。



一旦依赖目标中的&quot;%&quot;模式被确定，那么，make会被要求去匹配当前目录下所有的文件名，一旦找到，make就会规则下的命令，所以，在模式规则中，目标可能会是多个的，如果有模式匹配出多个目标，make就会产生所有的模式目标，此时，make关心的是依赖的文件名和生成目标的命令这两件事。


2、模式规则示例



下面这个例子表示了,把所有的[.c]文件都编译成[.o]文件.



%.o:%.c

$(CC)-c$(CFLAGS)$(CPPFLAGS)$&lt;-o$@



其中，&quot;$@&quot;表示所有的目标的挨个&#20540;，&quot;$&lt;&quot;表示了所有依赖目标的挨个&#20540;。这些奇怪的变

量我们叫&quot;自动化变量&quot;，后面会详细讲述。



下面的这个例子中有两个目标是模式的：


%.tab.c%.tab.h:%.y

bison-d$&lt;



这条规则告诉make把所有的[.y]文件都以&quot;bison-d&lt;n&gt;.y&quot;执行，然后生成&quot;&lt;n&gt;.tab.c&quot;和&quot;&lt;n&gt;.tab.h&quot;文件。（其中，&quot;&lt;n&gt;&quot;表示一个任意字符串）。如果我们的执行程序&quot;foo&quot;依

赖于文件&quot;parse.tab.o&quot;和&quot;scan.o&quot;，并且文件&quot;scan.o&quot;依赖于文件&quot;parse.tab.h&quot;，如果&quot;parse.y&quot;文件被更新了，那么根据上述的规则，&quot;bison-dparse.y&quot;就会被执行一次，于

是，&quot;parse.tab.o&quot;和&quot;scan.o&quot;的依赖文件就齐了。（假设，&quot;parse.tab.o&quot;由&quot;parse.tab.c&quot;生成，和&quot;scan.o&quot;由&quot;scan.c&quot;生成，而&quot;foo&quot;由&quot;parse.tab.o&quot;和&quot;scan.o&quot;链接生成，

而且foo和其[.o]文件的依赖关系也写好，那么，所有的目标都会得到满足）


3、自动化变量


在上述的模式规则中，目标和依赖文件都是一系例的文件，那么我们如何书写一个命令来完成从不同的依赖文件生成相应的目标？因为在每一次的对模式规则的解析时，都会是不同的目标和依赖文件。


自动化变量就是完成这个功能的。在前面，我们已经对自动化变量有所提涉，相信你看到这里已对它有一个感性认识了。所谓自动化变量，就是这种变量会把模式中所定义的一系列的文件自动地挨个取出，直至所有的符合模式的文件都取完了。这种自动化变量只应出现在规则的命令中。


下面是所有的自动化变量及其说明：


$@

表示规则中的目标文件集。在模式规则中，如果有多个目标，那么，&quot;$@&quot;就是匹配于目标中模式定义的集合。



$%

仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是&quot;foo.a(bar.o)&quot;，那么，&quot;$%&quot;就是&quot;bar.o&quot;，&quot;$@&quot;就是&quot;foo.a&quot;。如果目标不是函数库文件（Unix下是

[.a]，Windows下是[.lib]），那么，其&#20540;为空。


$&lt;

依赖目标中的第一个目标名字。如果依赖目标是以模式（即&quot;%&quot;）定义的，那么&quot;$&lt;&quot;将是符合模式的一系列的文件集。注意，其是一个一个取出来的。


$?

所有比目标新的依赖目标的集合。以空&#26684;分隔。


$^

所有的依赖目标的集合。以空&#26684;分隔。如果在依赖目标中有多个重复的，那个这个变量会去除重复的依赖目标，只保留一份。


$&#43;

这个变量很像&quot;$^&quot;，也是所有依赖目标的集合。只是它不去除重复的依赖目标。



$*

这个变量表示目标模式中&quot;%&quot;及其之前的部分。如果目标是&quot;dir/a.foo.b&quot;，并且目标的模式是&quot;a.%.b&quot;，那么，&quot;$*&quot;的&#20540;就是&quot;dir/a.foo&quot;。这个变量对于构造有关联的文件名是比

较有较。如果目标中没有模式的定义，那么&quot;$*&quot;也就不能被推导出，但是，如果目标文件的后缀是make所识别的，那么&quot;$*&quot;就是除了后缀的那一部分。例如：如果目标是&quot;foo.c&quot;

，因为&quot;.c&quot;是make所能识别的后缀名，所以，&quot;$*&quot;的&#20540;就是&quot;foo&quot;。这个特性是GNUmake的，很有可能不兼容于其它版本的make，所以，你应该尽量避免使用&quot;$*&quot;，除非是在隐含规则或是静态模式中。如果目标中的后缀是make所不能识别的，那么&quot;$*&quot;就是空&#20540;。


当你希望只对更新过的依赖文件进行操作时，&quot;$?&quot;在显式规则中很有用，例如，假设有一个函数库文件叫&quot;lib&quot;，其由其它几个object文件更新。那么把object文件打包的比较有效

率的Makefile规则是：



lib:foo.obar.olose.owin.o

arrlib$?



在上述所列出来的自动量变量中。四个变量（$@、$&lt;、$%、$*）在扩展时只会有一个文件，而另三个的&#20540;是一个文件列表。这七个自动化变量还可以取得文件的目录名或是在当前目录下的符合模式的文件名，只需要搭配上&quot;D&quot;或&quot;F&quot;字样。这是GNUmake中老版本的特性，在新版本中，我们使用函数&quot;dir&quot;或&quot;notdir&quot;就可以做到了。&quot;D&quot;的含义就是Directory，就是目录，&quot;F&quot;的含义就是File，就是文件。



下面是对于上面的七个变量分别加上&quot;D&quot;或是&quot;F&quot;的含义：



$(@D)

表示&quot;$@&quot;的目录部分（不以斜杠作为结尾），如果&quot;$@&quot;&#20540;是&quot;dir/foo.o&quot;，那么&quot;$(@D)&quot;就是&quot;dir&quot;，而如果&quot;$@&quot;中没有包含斜杠的话，其&#20540;就是&quot;.&quot;（当前目录）。



$(@F)

表示&quot;$@&quot;的文件部分，如果&quot;$@&quot;&#20540;是&quot;dir/foo.o&quot;，那么&quot;$(@F)&quot;就是&quot;foo.o&quot;，&quot;$(@F)&quot;相当于函数&quot;$(notdir$@)&quot;。



&quot;$(*D)&quot;

&quot;$(*F)&quot;

和上面所述的同理，也是取文件的目录部分和文件部分。对于上面的那个例子，&quot;$(*D)&quot;返回&quot;dir&quot;，而&quot;$(*F)&quot;返回&quot;foo&quot;



&quot;$(%D)&quot;

&quot;$(%F)&quot;

分别表示了函数包文件成员的目录部分和文件部分。这对于形同&quot;archive(member)&quot;形式的目标中的&quot;member&quot;中包含了不同的目录很有用。



&quot;$(&lt;D)&quot;

&quot;$(&lt;F)&quot;

分别表示依赖文件的目录部分和文件部分。



&quot;$(^D)&quot;

&quot;$(^F)&quot;

分别表示所有依赖文件的目录部分和文件部分。（无相同的）



&quot;$(&#43;D)&quot;

&quot;$(&#43;F)&quot;

分别表示所有依赖文件的目录部分和文件部分。（可以有相同的）



&quot;$(?D)&quot;

&quot;$(?F)&quot;



分别表示被更新的依赖文件的目录部分和文件部分。


最后想提醒一下的是，对于&quot;$&lt;&quot;，为了避免产生不必要的麻烦，我们最好给$后面的那个特定字符都加上圆括号，比如，&quot;$(&lt;)&quot;就要比&quot;$&lt;&quot;要好一些。


还得要注意的是，这些变量只使用在规则的命令中，而且一般都是&quot;显式规则&quot;和&quot;静态模式规则&quot;（参见前面&quot;书写规则&quot;一章）。其在隐含规则中并没有意义。



4、模式的匹配



一般来说，一个目标的模式有一个有前缀或是后缀的&quot;%&quot;，或是没有前后缀，直接就是一个&quot;%&quot;。因为&quot;%&quot;代表一个或多个字符，所以在定义好了的模式中，我们把&quot;%&quot;所匹配的内容叫做&quot;茎&quot;，例如&quot;%.c&quot;所匹配的文件&quot;test.c&quot;中&quot;test&quot;就是&quot;茎&quot;。因为在目标和依赖目标中同时有&quot;%&quot;时，依赖目标的&quot;茎&quot;会传给目标，当做目标中的&quot;茎&quot;。


当一个模式匹配包含有斜杠（实际也不经常包含）的文件时，那么在进行模式匹配时，目录部分会首先被移开，然后进行匹配，成功后，再把目录加回去。在进行&quot;茎&quot;的传递时，我们需要知道这个步骤。例如有一个模式&quot;e%t&quot;，文件&quot;src/eat&quot;匹配于该模式，于是&quot;src/a&quot;就是其&quot;茎&quot;，如果这个模式定义在依赖目标中，而被依赖于这个模式的目标中又有个模式&quot;c%r&quot;，那么，目标就是&quot;src/car&quot;。（&quot;茎&quot;被传递）


5、重载内建隐含规则



你可以重载内建的隐含规则（或是定义一个全新的），例如你可以重新构造和内建隐含规则不同的命令，如：



%.o:%.c

$(CC)-c$(CPPFLAGS)$(CFLAGS)-D$(date)



你可以取消内建的隐含规则，只要不在后面写命令就行。如：



%.o:%.s



同样，你也可以重新定义一个全新的隐含规则，其在隐含规则中的位置取决于你在哪里写下这个规则。朝前的位置就靠前。



六、老式风&#26684;的&quot;后缀规则&quot;



后缀规则是一个比较老式的定义隐含规则的方法。后缀规则会被模式规则逐步地取代。因为模式规则更强更清晰。为了和老版本的Makefile兼容，GNUmake同样兼容于这些东西。后缀规则有两种方式：&quot;双后缀&quot;和&quot;单后缀&quot;。


双后缀规则定义了一对后缀：目标文件的后缀和依赖目标（源文件）的后缀。如&quot;.c.o&quot;相当于&quot;%o:%c&quot;。单后缀规则只定义一个后缀，也就是源文件的后缀。如&quot;.c&quot;相当于&quot;%:
%.c&quot;。



后缀规则中所定义的后缀应该是make所认识的，如果一个后缀是make所认识的，那么这个规则就是单后缀规则，而如果两个连在一起的后缀都被make所认识，那就是双后缀规则。例如：&quot;.c&quot;和&quot;.o&quot;都是make所知道。因而，如果你定义了一个规则是&quot;.c.o&quot;那么其就是双后缀规则，意义就是&quot;.c&quot;是源文件的后缀，&quot;.o&quot;是目标文件的后缀。如下示例：



.c.o:

$(CC)-c$(CFLAGS)$(CPPFLAGS)-o$@$&lt;



后缀规则不允许任何的依赖文件，如果有依赖文件的话，那就不是后缀规则，那些后缀统统被认为是文件名，如：



.c.o:foo.h

$(CC)-c$(CFLAGS)$(CPPFLAGS)-o$@$&lt;



这个例子，就是说，文件&quot;.c.o&quot;依赖于文件&quot;foo.h&quot;，而不是我们想要的这样：


%.o:%.cfoo.h

$(CC)-c$(CFLAGS)$(CPPFLAGS)-o$@$&lt;



后缀规则中，如果没有命令，那是毫无意义的。因为他也不会移去内建的隐含规则。



而要让make知道一些特定的后缀，我们可以使用伪目标&quot;.SUFFIXES&quot;来定义或是删除，如：



.SUFFIXES:.hack.win



把后缀.hack和.win加入后缀列表中的末尾。



.SUFFIXES:#删除默认的后缀

.SUFFIXES:.c.o.h#定义自己的后缀



先清楚默认后缀，后定义自己的后缀列表。



make的参数&quot;-r&quot;或&quot;-no-builtin-rules&quot;也会使用得默认的后缀列表为空。而变量&quot;SUFFIXE&quot;被用来定义默认的后缀列表，你可以用&quot;.SUFFIXES&quot;来改变后缀列表，但请不要改变变量&quot;SUFFIXE&quot;的&#20540;。




七、隐含规则搜索算法


比如我们有一个目标叫T。下面是搜索目标T的规则的算法。请注意，在下面，我们没有提到后缀规则，原因是，所有的后缀规则在Makefile被载入内存时，会被转换成模式规则。如果目标是&quot;archive(member)&quot;的函数库文件模式，那么这个算法会被运行两次，第一次是找目标T，如果没有找到的话，那么进入第二次，第二次会把&quot;member&quot;当作T来搜索。
1、把T的目录部分分离出来。叫D，而剩余部分叫N。（如：如果T是&quot;src/foo.o&quot;，那么，D就是&quot;src/&quot;，N就是&quot;foo.o&quot;）
2、创建所有匹配于T或是N的模式规则列表。
3、如果在模式规则列表中有匹配所有文件的模式，如&quot;%&quot;，那么从列表中移除其它的模式。
4、移除列表中没有命令的规则。
5、对于第一个在列表中的模式规则：

1）推导其&quot;茎&quot;S，S应该是T或是N匹配于模式中&quot;%&quot;非空的部分。
2）计算依赖文件。把依赖文件中的&quot;%&quot;都替换成&quot;茎&quot;S。如果目标模式中没有包含斜框字符，而把D加在第一个依赖文件的开头。
3）测试是否所有的依赖文件都存在或是理当存在。（如果有一个文件被定义成另外一个规则的目标文件，或者是一个显式规则的依赖文件，那么这个文件就叫&quot;理当存在&quot;）
4）如果所有的依赖文件存在或是理当存在，或是就没有依赖文件。那么这条规则将被采用，退出该算法。
6、如果经过第5步，没有模式规则被找到，那么就做更进一步的搜索。对于存在于列表中的第一个模式规则：
1）如果规则是终止规则，那就忽略它，继续下一条模式规则。
2）计算依赖文件。（同第5步）
3）测试所有的依赖文件是否存在或是理当存在。
4）对于不存在的依赖文件，递归调用这个算法查找他是否可以被隐含规则找到。
5）如果所有的依赖文件存在或是理当存在，或是就根本没有依赖文件。那么这条规则被采用，退出该算法。
7、如果没有隐含规则可以使用，查看&quot;.DEFAULT&quot;规则，如果有，采用，把&quot;.DEFAULT&quot;的命令给T使用。
一旦规则被找到，就会执行其相当的命令，而此时，我们的自动化变量的&#20540;才会生成。





使用make更新函数库文件

———————————



函数库文件也就是对Object文件（程序编译的中间文件）的打包文件。在Unix下，一般是由命令&quot;ar&quot;来完成打包工作。



一、函数库文件的成员



一个函数库文件由多个文件组成。你可以以如下&#26684;式指定函数库文件及其组成：



archive(member)



这个不是一个命令，而一个目标和依赖的定义。一般来说，这种用法基本上就是为了&quot;ar&quot;命令来服务的。如：


foolib(hack.o):hack.o

arcrfoolibhack.o



如果要指定多个member，那就以空&#26684;分开，如：



foolib(hack.okludge.o)



其等价于：



foolib(hack.o)foolib(kludge.o)



你还可以使用Shell的文件通配符来定义，如：


foolib(*.o)



二、函数库成员的隐含规则



当make搜索一个目标的隐含规则时，一个特殊的特性是，如果这个目标是&quot;a(m)&quot;形式的，其会把目标变成&quot;(m)&quot;。于是，如果我们的成员是&quot;%.o&quot;的模式定义，并且如果我们使用&quot;makefoo.a(bar.o)&quot;的形式调用Makefile时，隐含规则会去找&quot;bar.o&quot;的规则，如果没有定义bar.o的规则，那么内建隐含规则生效，make会去找bar.c文件来生成bar.o，如果找得到的话，make执行的命令大致如下：



cc-cbar.c-obar.o

arrfoo.abar.o

rm-fbar.o



还有一个变量要注意的是&quot;$%&quot;，这是专属函数库文件的自动化变量，有关其说明请参见&quot;自动化变量&quot;一节。




三、函数库文件的后缀规则



你可以使用&quot;后缀规则&quot;和&quot;隐含规则&quot;来生成函数库打包文件，如：



.c.a:

$(CC)$(CFLAGS)$(CPPFLAGS)-c$&lt;-o$*.o

$(AR)r$@$*.o

$(RM)$*.o



其等效于：



(%.o):%.c

$(CC)$(CFLAGS)$(CPPFLAGS)-c$&lt;-o$*.o

$(AR)r$@$*.o

$(RM)$*.o



四、注意事项



在进行函数库打包文件生成时，请小心使用make的并行机制（&quot;-j&quot;参数）。如果多个ar命令在同一时间运行在同一个函数库打包文件上，就很有可以损坏这个函数库文件。所以，在make未来的版本中，应该提供一种机制来避免并行操作发生在函数打包文件上。

但就目前而言，你还是应该不要尽量不要使用&quot;-j&quot;参数。




后序

——



终于到写结束语的时候了，以上基本上就是GNUmake的Makefile的所有细节了。其它的产商的make基本上也就是这样的，无论什么样的make，都是以文件的依赖性为基础的，其基本是都是遵循一个标准的。这篇文档中80%的技术细节都适用于任何的make，我猜测&quot;函数&quot;那一章的内容可能不是其它make所支持的，而隐含规则方面，我想不同的make会有不同的实现，我没有精力来查看GNU的make和VC的nmake、BCB的make，或是别的UNIX下的make有些什么样的差别，一是时间精力不够，二是因为我基本上都是在Unix下使用make，以前在SCO
Unix和IBM的AIX，现在在Linux、Solaris、HP-UX、AIX和Alpha下使用，Linux和Solaris下更多一点。不过，我可以肯定的是，在Unix下的make，无论是哪种平台，几乎都使用了RichardStallman开发的make和cc/gcc的编译器，而且，基本上都是GNU的make（公司里所有的UNIX机器上都被装上了GNU的东西，所以，使用GNU的程序也就多了一些）。GNU的东西还是很不错的，特别是使用得深了以后，越来越觉得GNU的软件的强大，也越来越觉得GNU的在操作系统中（主要是Unix，甚至Windows）&quot;杀伤力&quot;。



对于上述所有的make的细节，我们不但可以利用make这个工具来编译我们的程序，还可以利用make来完成其它的工作，因为规则中的命令可以是任何Shell之下的命令，所以，在Unix下，你不一定只是使用程序语言的编译器，你还可以在Makefile中书写其它的命令，如：tar、awk、mail、sed、cvs、compress、ls、rm、yacc、rpm、ftp……等等，等等，来完成诸如&quot;程序打包&quot;、&quot;程序备份&quot;、&quot;制作程序安装包&quot;、&quot;提交代码&quot;、&quot;使用程序模板&quot;、&quot;合并文件&quot;等等五花八门的功能，文件操作，文件管理，编程开发设计，或是其它一些异想天开的东西。比如，以前在书写银行交易程序时，由于银行的交易程序基本一样，就见到有人书写了一些交易的通用程序模板，在该模板中把一些网络通讯、数据库操作的、业务操作共性的东西写在一个文件中，在这些文件中用些诸如&quot;@@@N、###N&quot;奇怪字串标注一些位置，然后书写交易时，只需按照一种特定的规则书写特定的处理，最后在make时，使用awk和sed，把模板中的&quot;@@@N、###N&quot;等字串替代成特定的程序，形成C文件，然后再编译。这个动作很像数据库的&quot;扩展C&quot;语言（即在C语言中用&quot;EXEC　SQL&quot;的样子执行SQL语句，在用
cc/gcc编译之前，需要使用&quot;扩展C&quot;的翻译程序，如cpre，把其翻译成标准C）。如果

你在使用make时有一些更为绝妙的方法，请记得告诉我啊。


回头看看整篇文档，不觉记起几年前刚刚开始在Unix下做开发的时候，有人问我会不会写Makefile时，我两&#30524;发直，根本不知道在说什么。一开始看到别人在vi中写完程序后输入&quot;!make&quot;时，还以为是vi的功能，后来才知道有一个Makefile在作怪，于是上网查啊查，那时又不愿意看英文，发现就根本没有中文的文档介绍Makefile，只得看别人写的Makefile，自己瞎碰瞎搞才积累了一点知识，但在很多地方完全是知其然不知所以然。后来开始从事UNIX下产品软件的开发，看到一个400人年，近200万行代码的大工程，发现要编译这样一个庞然大物，如果没有Makefile，那会是多么恐怖的一样事啊。于是横下心来，狠命地读了一堆英文文档，才觉得对其掌握了。但发现目前网上对Makefile介绍的文章还是少得那么的可怜，所以想写这样一篇文章，共享给大家，希望能对各位有所帮助。



现在我终于写完了，看了看文件的创建时间，这篇技术文档也写了两个多月了。发现，自己知道是一回事，要写下来，跟别人讲述又是另外一回事，而且，现在越来越没有时间专研技术细节，所以在写作时，发现在阐述一些细节问题时很难做到严谨和精练，而且对先讲什么后讲什么不是很清楚，所以，还是参考了一些国外站点上的资料和题纲，以及一些技术书籍的语言风&#26684;，才得以完成。整篇文档的提纲是基于GNU的Makefile技术手册的提纲来书写的，并结合了自己的工作经验，以及自己的学习历程。因为从来没有写过这么长，这么细的文档，所以一定会有很多地方存在表达问题，语言歧义或是错误。因些，我迫切地得等待各位给我指证和建议，以及任何的反馈。


最后，还是利用这个后序，介绍一下自己。我目前从事于所有Unix平台下的软件研发，主要是做分布式计算/网&#26684;计算方面的系统产品软件，并且我对于下一代的计算机革命——网&#26684;计算非常地感兴趣，对于分布式计算、P2P、WebService、J2EE技术方向也很感兴趣，同时，对于项目实施、团队管理、项目管理也小有心得，希望同样和我战斗在“技术和管理并重”的阵线上的年轻一代，能够和我多多地交流。我的MSN是：haoel@hotmail.com（常用），QQ是：753640（不常用）。（注：请勿给我MSN的邮箱发信，由于hotmail的垃圾

邮件导致我拒收这个邮箱的所有来信）



我欢迎任何形式的交流，无论是讨论技术还是管理，或是其它海阔天空的东西。除了政治和娱乐新闻我不关心，其它只要积极向上的东西我都欢迎！



最最后，我还想介绍一下make程序的设计开发者。


首当其冲的是：RichardStallman


开源软件的领袖和先驱，从来没有领过一天工资，从来没有使用过Windows操作系统。对于他的事迹和他的软件以及他的思想，我无需说过多的话，相信大家对这个人并不比我陌生，这是他的主页：http://www.stallman.org/。




第二位是：RolandMcGrath



个人主页是：http://www.frob.com/~roland/，下面是他的一些事迹：


1）合作编写了并维护GNUmake。
2）和ThomasBushnell一同编写了GNUHurd。
3）编写并维护着GNUClibrary。
4）合作编写并维护着部分的GNUEmacs。
在此，向这两位开源项目的斗士致以最真切的敬意。
