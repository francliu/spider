上一节我们介绍了正则表达式，它的内容其实还是蛮多的，如果一个正则匹配稍有差池，那可能程序就处在永久的循环之中，而且有的小伙伴们也对写正则表达式的写法用得不熟练，没关系，我们还有一个更强大的工具，叫BeautifulSoup，有了它我们可以很方便地提取出HTML或XML标签中的内容，实在是方便，这一节就让我们一起来感受一下BeautifulSoup的强大吧。
简单来说，BeautifulSoup是python的一个库，最主要的功能是从网页抓取数据。官方解释如下：
BeautifulSoup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。
BeautifulSoup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，BeautifulSoup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。
BeautifulSoup已成为和lxml、html6lib一样出色的python解释器，为用户灵活地提供不同的解析策略或强劲的速度。
废话不多说，我们来试一下吧~
BeautifulSoup3目前已经停止开发，推荐在现在的项目中使用BeautifulSoup4，不过它已经被移植到BS4了，也就是说导入时我们需要importbs4。所以这里我们用的版本是BeautifulSoup4.3.2(简称BS4)，另外据说BS4对Python3的支持不够好，不过我用的是Python2.7.7，如果有小伙伴用的是Python3版本，可以考虑下载BS3版本。
如果你用的是新版的Debain或Ubuntu,那么可以通过系统的软件包管理来安装，不过它不是最新版本，目前是4.2.1版本
如果想安装最新的版本，请直接下载安装包来手动安装，也是十分方便的方法。在这里我安装的是BeautifulSoup4.3.2
BeautifulSoup3.2.1BeautifulSoup4.3.2
下载完成之后解压
运行下面的命令即可完成安装
如下图所示，证明安装成功了

然后需要安装lxml
BeautifulSoup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则Python会使用Python默认的解析器，lxml
解析器更加强大，速度更快，推荐安装。
在这里先分享官方文档链接，不过内容是有些多，也不够条理，在此本文章做一下整理方便大家参考。
官方文档
首先必须要导入bs4库
我们创建一个字符串，后面的例子我们便会用它来演示
创建beautifulsoup对象
另外，我们还可以用本地HTML文件来创建对象，例如
上面这句代码便是将本地index.html文件打开，用它来创建soup对象
下面我们来打印一下soup对象的内容，&#26684;式化输出
以上便是输出结果，&#26684;式化打印出了它的内容，这个函数经常用到，小伙伴们要记好咯。
BeautifulSoup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:
下面我们进行一一介绍
Tag是什么？通俗点讲就是HTML中的一个个标签，例如
上面的titlea等等HTML标签加上里面包括的内容就是Tag，下面我们来感受一下怎样用BeautifulSoup来方便地获取Tags
下面每一段代码中注释部分即为运行结果
我们可以利用soup加标签名轻松地获取这些标签的内容，是不是感觉比正则表达式方便多了？不过有一点是，它查找的是在所有内容中的第一个符合要求的标签，如果要查询所有的标签，我们在后面进行介绍。
我们可以验证一下这些对象的类型
对于Tag，它有两个重要的属性，是name和attrs，下面我们分别来感受一下
name
soup对象本身比较特殊，它的name即为[document]，对于其他内部标签，输出的&#20540;便为标签本身的名称。
attrs
在这里，我们把p
标签的所有属性打印输出了出来，得到的类型是一个字典。
如果我们想要单独获取某个属性，可以这样，例如我们获取它的class叫什么
还可以这样，利用get方法，传入属性的名称，二者是等价的
我们可以对这些属性和内容等等进行修改，例如
还可以对这个属性进行删除，例如
不过，对于修改删除的操作，不是我们的主要用途，在此不做详细介绍了，如果有需要，请查看前面提供的官方文档
既然我们已经得到了标签的内容，那么问题来了，我们要想获取标签内部的文字怎么办呢？很简单，用.string即可，例如
这样我们就轻松获取到了标签里面的内容，想想如果用正则表达式要多麻烦。它的类型是一个NavigableString，翻译过来叫可以遍历的字符串，不过我们最好还是称它英文名字吧。
来检查一下它的类型
BeautifulSoup对象表示的是一个文档的全部内容.大部分时候,可以把它当作Tag对象，是一个特殊的Tag，我们可以分别获取它的类型，名称，以及属性来感受一下
Comment对象是一个特殊类型的NavigableString对象，其实输出的内容仍然不包括注释符号，但是如果不好好处理它，可能会对我们的文本处理造成意想不到的麻烦。
我们找一个带注释的标签
运行结果如下
a
标签里的内容实际上是注释，但是如果我们利用.string来输出它的内容，我们发现它已经把注释符号去掉了，所以这可能会给我们带来不必要的麻烦。
另外我们打印输出下它的类型，发现它是一个Comment类型，所以，我们在使用前最好做一下判断，判断代码如下
上面的代码中，我们首先判断了它的类型，是否为Comment类型，然后再进行其他操作，如打印输出。
要点：.contents.children属性
.contents
tag
的.content属性可以将tag的子节点以列表的方式输出
输出方式为列表，我们可以用列表索引来获取它的某一个元素
.children
它返回的不是一个list，不过我们可以通过遍历获取所有子节点。
我们打印输出.children看一下，可以发现它是一个list生成器对象
我们怎样获得里面的内容呢？很简单，遍历一下就好了，代码及结果如下
知识点：.descendants属性
.descendants
.contents和.children属性仅包含tag的直接子节点，.descendants属性可以对所有tag的子孙节点进行递归循环，和children类&#20284;，我们也需要遍历获取其中的内容。
运行结果如下，可以发现，所有的节点都被打印出来了，先生最外层的HTML标签，其次从head标签一个个剥离，以此类推。
知识点：.string属性
如果tag只有一个NavigableString类型子节点,那么这个tag可以使用.string得到子节点。如果一个tag仅有一个子节点,那么这个tag也可以使用
.string方法,输出结果与当前唯一子节点的.string结果相同。
通俗点说就是：如果一个标签里面没有标签了，那么
.string就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么.string也会返回最里面的内容。例如
如果tag包含了多个子节点,tag就无法确定，string
方法应该调用哪个子节点的内容,.string的输出结果是None
知识点：.strings.stripped_strings属性
.strings
获取多个内容，不过需要遍历获取，比如下面的例子
.stripped_strings
输出的字符串中可能包含了很多空&#26684;或空行,使用.stripped_strings可以去除多余空白内容
知识点：.parent属性
知识点：.parents属性
通过元素的.parents属性可以递归得到元素的所有父辈节点，例如
知识点：.next_sibling.previous_sibling属性
兄弟节点可以理解为和本节点处在统一级的节点，.next_sibling属性获取了该节点的下一个兄弟节点，.previous_sibling则与之相反，如果节点不存在，则返回None
注意：实际文档中的tag的.next_sibling和.previous_sibling属性通常是字符串或空白，因为空白或者换行也可以被视作一个节点，所以得到的结果可能是空白或者换行
知识点：.next_siblings.previous_siblings属性
通过.next_siblings和.previous_siblings属性可以对当前节点的兄弟节点迭代输出
知识点：.next_element.previous_element属性
与.next_sibling.previous_sibling不同，它并不是针对于兄弟节点，而是在所有节点，不分层次
比如head节点为
那么它的下一个节点便是title，它是不分层次关系的
知识点：.next_elements.previous_elements属性
通过.next_elements和.previous_elements的迭代器就可以向前或向后访问文档的解析内容,就好像文档正在被解析一样
find_all()方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件
1）name参数
name参数可以查找所有名字为name的tag,字符串对象会被自动忽略掉
A.传字符串
最简单的过滤器是字符串.在搜索方法中传入一个字符串参数,BeautifulSoup会查找与字符串完整匹配的内容,下面的例子用于查找文档中所有的&lt;b&gt;标签
B.传正则表达式
如果传入正则表达式作为参数,BeautifulSoup会通过正则表达式的match()来匹配内容.下面例子中找出所有以b开头的标签,这表示&lt;body&gt;和&lt;b&gt;标签都应该被找到
C.传列表
如果传入列表参数,BeautifulSoup会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有&lt;a&gt;标签和&lt;b&gt;标签
D.传True
True可以匹配任何&#20540;,下面代码查找到所有的tag,但是不会返回字符串节点
E.传方法
如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数
[4],如果这个方法返回True表示当前元素匹配并且被找到,如果不是则反回False
下面方法校验了当前元素,如果包含class属性却不包含id属性,那么将返回True:
将这个方法作为参数传入find_all()方法,将得到所有&lt;p&gt;标签:
2）keyword参数
注意：如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索,如果包含一个名字为id的参数,BeautifulSoup会搜索每个tag的”id”属性
如果传入href参数,BeautifulSoup会搜索每个tag的”href”属性
使用多个指定名字的参数可以同时过滤tag的多个属性
在这里我们想用class过滤，不过class是
python的关键词，这怎么办？加个下划线就可以
有些tag属性在搜索不能使用,比如HTML5中的data-*属性
但是可以通过find_all()方法的attrs参数定义一个字典参数来搜索包含特殊属性的tag
3）text参数
通过text参数可以搜搜文档中的字符串内容.与name参数的可选&#20540;一样,text参数接受字符串,正则表达式,列表,True
4）limit参数
find_all()方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用limit参数限制返回结果的数量.效果与SQL中的limit关键字类&#20284;,当搜索到的结果数量达到
limit的限制时,就停止搜索返回结果.
文档树中有3个tag符合搜索条件,但结果只返回了2个,因为我们限制了返回数量
5）recursive参数
调用tag的find_all()方法时,BeautifulSoup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数
recursive=False.
一段简单的文档:
是否使用recursive参数的搜索结果:
它与find_all()方法唯一的区别是find_all()方法的返回结果是&#20540;包含一个元素的列表,而find()方法直接返回结果
find_all()和find()只搜索当前节点的所有子节点,孙子节点等.find_parents()和
find_parent()用来搜索当前节点的父辈节点,搜索方法与普通tag的搜索方法相同,搜索文档搜索文档包含的内容
这2个方法通过.next_siblings属性对当tag的所有后面解析的兄弟tag节点进行迭代,find_next_siblings()方法返回所有符合条件的后面的兄弟节点,find_next_sibling()只返回符合条件的后面的第一个tag节点
这2个方法通过.previous_siblings属性对当前tag的前面解析的兄弟tag节点进行迭代,find_previous_siblings()方法返回所有符合条件的前面的兄弟节点,
find_previous_sibling()方法返回第一个符合条件的前面的兄弟节点
这2个方法通过.next_elements属性对当前tag的之后的tag和字符串进行迭代,find_all_next()方法返回所有符合条件的节点,
find_next()方法返回第一个符合条件的节点
这2个方法通过.previous_elements属性对当前节点前面的
tag和字符串进行迭代,find_all_previous()方法返回所有符合条件的节点,find_previous()方法返回第一个符合条件的节点
注：以上（2）（3）（4）（5）（6）（7）方法参数用法与find_all()完全相同，原理均类&#20284;，在此不再赘述。
我们在写CSS时，标签名不加任何修饰，类名前加点，id名前加#，在这里我们也可以利用类&#20284;的方法来筛选元素，用到的方法是soup.select()，返回类型是
list
组合查找即和写class文件时，标签名与类名、id名进行的组合原理是一样的，例如查找p标签中，id等于link1的内容，二者需要用空&#26684;分开
直接子标签查找
查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空&#26684;，否则会无法匹配到。
同样，属性仍然可以与上述查找方式组合，不在同一节点的空&#26684;隔开，同一节点的不加空&#26684;
好，这就是另一种与find_all方法有异曲同工之妙的查找方法，是不是感觉很方便？
本篇内容比较多，把BeautifulSoup的方法进行了大部分整理和总结，不过这还不算完全，仍然有BeautifulSoup的修改删除功能，不过这些功能用得比较少，只整理了查找提取的方法，希望对大家有帮助！小伙伴们加油！
熟练掌握了BeautifulSoup，一定会给你带来太多方便，加油吧！
上一节我们介绍了正则表达式，它的内容其实还是蛮多的，如果一个正则匹配稍有差池，那可能程序就处在永久的循环之中，而且有的小伙伴们也对写正则表达式的写法用得不熟练，没关系，我们还有一个更强大的工具，叫BeautifulSoup，有了它我们可以很方便地提取出HTML或XML标签中的内容，实在是方便，这一节就让我们一起来感受一下BeautifulSoup的强大吧。
简单来说，BeautifulSoup是python的一个库，最主要的功能是从网页抓取数据。官方解释如下：
BeautifulSoup提供一些简单的、python式的函数用来处理导航、搜索、修改分析树等功能。它是一个工具箱，通过解析文档为用户提供需要抓取的数据，因为简单，所以不需要多少代码就可以写出一个完整的应用程序。
BeautifulSoup自动将输入文档转换为Unicode编码，输出文档转换为utf-8编码。你不需要考虑编码方式，除非文档没有指定一个编码方式，这时，BeautifulSoup就不能自动识别编码方式了。然后，你仅仅需要说明一下原始编码方式就可以了。
BeautifulSoup已成为和lxml、html6lib一样出色的python解释器，为用户灵活地提供不同的解析策略或强劲的速度。
废话不多说，我们来试一下吧~
BeautifulSoup3目前已经停止开发，推荐在现在的项目中使用BeautifulSoup4，不过它已经被移植到BS4了，也就是说导入时我们需要importbs4。所以这里我们用的版本是BeautifulSoup4.3.2(简称BS4)，另外据说BS4对Python3的支持不够好，不过我用的是Python2.7.7，如果有小伙伴用的是Python3版本，可以考虑下载BS3版本。
如果你用的是新版的Debain或Ubuntu,那么可以通过系统的软件包管理来安装，不过它不是最新版本，目前是4.2.1版本
如果想安装最新的版本，请直接下载安装包来手动安装，也是十分方便的方法。在这里我安装的是BeautifulSoup4.3.2
BeautifulSoup3.2.1BeautifulSoup4.3.2
下载完成之后解压
运行下面的命令即可完成安装
如下图所示，证明安装成功了

然后需要安装lxml
BeautifulSoup支持Python标准库中的HTML解析器,还支持一些第三方的解析器，如果我们不安装它，则Python会使用Python默认的解析器，lxml
解析器更加强大，速度更快，推荐安装。
在这里先分享官方文档链接，不过内容是有些多，也不够条理，在此本文章做一下整理方便大家参考。
官方文档
首先必须要导入bs4库
我们创建一个字符串，后面的例子我们便会用它来演示
创建beautifulsoup对象
另外，我们还可以用本地HTML文件来创建对象，例如
上面这句代码便是将本地index.html文件打开，用它来创建soup对象
下面我们来打印一下soup对象的内容，&#26684;式化输出
以上便是输出结果，&#26684;式化打印出了它的内容，这个函数经常用到，小伙伴们要记好咯。
BeautifulSoup将复杂HTML文档转换成一个复杂的树形结构,每个节点都是Python对象,所有对象可以归纳为4种:
下面我们进行一一介绍
Tag是什么？通俗点讲就是HTML中的一个个标签，例如
上面的titlea等等HTML标签加上里面包括的内容就是Tag，下面我们来感受一下怎样用BeautifulSoup来方便地获取Tags
下面每一段代码中注释部分即为运行结果
我们可以利用soup加标签名轻松地获取这些标签的内容，是不是感觉比正则表达式方便多了？不过有一点是，它查找的是在所有内容中的第一个符合要求的标签，如果要查询所有的标签，我们在后面进行介绍。
我们可以验证一下这些对象的类型
对于Tag，它有两个重要的属性，是name和attrs，下面我们分别来感受一下
name
soup对象本身比较特殊，它的name即为[document]，对于其他内部标签，输出的&#20540;便为标签本身的名称。
attrs
在这里，我们把p
标签的所有属性打印输出了出来，得到的类型是一个字典。
如果我们想要单独获取某个属性，可以这样，例如我们获取它的class叫什么
还可以这样，利用get方法，传入属性的名称，二者是等价的
我们可以对这些属性和内容等等进行修改，例如
还可以对这个属性进行删除，例如
不过，对于修改删除的操作，不是我们的主要用途，在此不做详细介绍了，如果有需要，请查看前面提供的官方文档
既然我们已经得到了标签的内容，那么问题来了，我们要想获取标签内部的文字怎么办呢？很简单，用.string即可，例如
这样我们就轻松获取到了标签里面的内容，想想如果用正则表达式要多麻烦。它的类型是一个NavigableString，翻译过来叫可以遍历的字符串，不过我们最好还是称它英文名字吧。
来检查一下它的类型
BeautifulSoup对象表示的是一个文档的全部内容.大部分时候,可以把它当作Tag对象，是一个特殊的Tag，我们可以分别获取它的类型，名称，以及属性来感受一下
Comment对象是一个特殊类型的NavigableString对象，其实输出的内容仍然不包括注释符号，但是如果不好好处理它，可能会对我们的文本处理造成意想不到的麻烦。
我们找一个带注释的标签
运行结果如下
a
标签里的内容实际上是注释，但是如果我们利用.string来输出它的内容，我们发现它已经把注释符号去掉了，所以这可能会给我们带来不必要的麻烦。
另外我们打印输出下它的类型，发现它是一个Comment类型，所以，我们在使用前最好做一下判断，判断代码如下
上面的代码中，我们首先判断了它的类型，是否为Comment类型，然后再进行其他操作，如打印输出。
要点：.contents.children属性
.contents
tag
的.content属性可以将tag的子节点以列表的方式输出
输出方式为列表，我们可以用列表索引来获取它的某一个元素
.children
它返回的不是一个list，不过我们可以通过遍历获取所有子节点。
我们打印输出.children看一下，可以发现它是一个list生成器对象
我们怎样获得里面的内容呢？很简单，遍历一下就好了，代码及结果如下
知识点：.descendants属性
.descendants
.contents和.children属性仅包含tag的直接子节点，.descendants属性可以对所有tag的子孙节点进行递归循环，和children类&#20284;，我们也需要遍历获取其中的内容。
运行结果如下，可以发现，所有的节点都被打印出来了，先生最外层的HTML标签，其次从head标签一个个剥离，以此类推。
知识点：.string属性
如果tag只有一个NavigableString类型子节点,那么这个tag可以使用.string得到子节点。如果一个tag仅有一个子节点,那么这个tag也可以使用
.string方法,输出结果与当前唯一子节点的.string结果相同。
通俗点说就是：如果一个标签里面没有标签了，那么
.string就会返回标签里面的内容。如果标签里面只有唯一的一个标签了，那么.string也会返回最里面的内容。例如
如果tag包含了多个子节点,tag就无法确定，string
方法应该调用哪个子节点的内容,.string的输出结果是None
知识点：.strings.stripped_strings属性
.strings
获取多个内容，不过需要遍历获取，比如下面的例子
.stripped_strings
输出的字符串中可能包含了很多空&#26684;或空行,使用.stripped_strings可以去除多余空白内容
知识点：.parent属性
知识点：.parents属性
通过元素的.parents属性可以递归得到元素的所有父辈节点，例如
知识点：.next_sibling.previous_sibling属性
兄弟节点可以理解为和本节点处在统一级的节点，.next_sibling属性获取了该节点的下一个兄弟节点，.previous_sibling则与之相反，如果节点不存在，则返回None
注意：实际文档中的tag的.next_sibling和.previous_sibling属性通常是字符串或空白，因为空白或者换行也可以被视作一个节点，所以得到的结果可能是空白或者换行
知识点：.next_siblings.previous_siblings属性
通过.next_siblings和.previous_siblings属性可以对当前节点的兄弟节点迭代输出
知识点：.next_element.previous_element属性
与.next_sibling.previous_sibling不同，它并不是针对于兄弟节点，而是在所有节点，不分层次
比如head节点为
那么它的下一个节点便是title，它是不分层次关系的
知识点：.next_elements.previous_elements属性
通过.next_elements和.previous_elements的迭代器就可以向前或向后访问文档的解析内容,就好像文档正在被解析一样
find_all()方法搜索当前tag的所有tag子节点,并判断是否符合过滤器的条件
1）name参数
name参数可以查找所有名字为name的tag,字符串对象会被自动忽略掉
A.传字符串
最简单的过滤器是字符串.在搜索方法中传入一个字符串参数,BeautifulSoup会查找与字符串完整匹配的内容,下面的例子用于查找文档中所有的&lt;b&gt;标签
B.传正则表达式
如果传入正则表达式作为参数,BeautifulSoup会通过正则表达式的match()来匹配内容.下面例子中找出所有以b开头的标签,这表示&lt;body&gt;和&lt;b&gt;标签都应该被找到
C.传列表
如果传入列表参数,BeautifulSoup会将与列表中任一元素匹配的内容返回.下面代码找到文档中所有&lt;a&gt;标签和&lt;b&gt;标签
D.传True
True可以匹配任何&#20540;,下面代码查找到所有的tag,但是不会返回字符串节点
E.传方法
如果没有合适过滤器,那么还可以定义一个方法,方法只接受一个元素参数
[4],如果这个方法返回True表示当前元素匹配并且被找到,如果不是则反回False
下面方法校验了当前元素,如果包含class属性却不包含id属性,那么将返回True:
将这个方法作为参数传入find_all()方法,将得到所有&lt;p&gt;标签:
2）keyword参数
注意：如果一个指定名字的参数不是搜索内置的参数名,搜索时会把该参数当作指定名字tag的属性来搜索,如果包含一个名字为id的参数,BeautifulSoup会搜索每个tag的”id”属性
如果传入href参数,BeautifulSoup会搜索每个tag的”href”属性
使用多个指定名字的参数可以同时过滤tag的多个属性
在这里我们想用class过滤，不过class是
python的关键词，这怎么办？加个下划线就可以
有些tag属性在搜索不能使用,比如HTML5中的data-*属性
但是可以通过find_all()方法的attrs参数定义一个字典参数来搜索包含特殊属性的tag
3）text参数
通过text参数可以搜搜文档中的字符串内容.与name参数的可选&#20540;一样,text参数接受字符串,正则表达式,列表,True
4）limit参数
find_all()方法返回全部的搜索结构,如果文档树很大那么搜索会很慢.如果我们不需要全部结果,可以使用limit参数限制返回结果的数量.效果与SQL中的limit关键字类&#20284;,当搜索到的结果数量达到
limit的限制时,就停止搜索返回结果.
文档树中有3个tag符合搜索条件,但结果只返回了2个,因为我们限制了返回数量
5）recursive参数
调用tag的find_all()方法时,BeautifulSoup会检索当前tag的所有子孙节点,如果只想搜索tag的直接子节点,可以使用参数
recursive=False.
一段简单的文档:
是否使用recursive参数的搜索结果:
它与find_all()方法唯一的区别是find_all()方法的返回结果是&#20540;包含一个元素的列表,而find()方法直接返回结果
find_all()和find()只搜索当前节点的所有子节点,孙子节点等.find_parents()和
find_parent()用来搜索当前节点的父辈节点,搜索方法与普通tag的搜索方法相同,搜索文档搜索文档包含的内容
这2个方法通过.next_siblings属性对当tag的所有后面解析的兄弟tag节点进行迭代,find_next_siblings()方法返回所有符合条件的后面的兄弟节点,find_next_sibling()只返回符合条件的后面的第一个tag节点
这2个方法通过.previous_siblings属性对当前tag的前面解析的兄弟tag节点进行迭代,find_previous_siblings()方法返回所有符合条件的前面的兄弟节点,
find_previous_sibling()方法返回第一个符合条件的前面的兄弟节点
这2个方法通过.next_elements属性对当前tag的之后的tag和字符串进行迭代,find_all_next()方法返回所有符合条件的节点,
find_next()方法返回第一个符合条件的节点
这2个方法通过.previous_elements属性对当前节点前面的
tag和字符串进行迭代,find_all_previous()方法返回所有符合条件的节点,find_previous()方法返回第一个符合条件的节点
注：以上（2）（3）（4）（5）（6）（7）方法参数用法与find_all()完全相同，原理均类&#20284;，在此不再赘述。
我们在写CSS时，标签名不加任何修饰，类名前加点，id名前加#，在这里我们也可以利用类&#20284;的方法来筛选元素，用到的方法是soup.select()，返回类型是
list
组合查找即和写class文件时，标签名与类名、id名进行的组合原理是一样的，例如查找p标签中，id等于link1的内容，二者需要用空&#26684;分开
直接子标签查找
查找时还可以加入属性元素，属性需要用中括号括起来，注意属性和标签属于同一节点，所以中间不能加空&#26684;，否则会无法匹配到。
同样，属性仍然可以与上述查找方式组合，不在同一节点的空&#26684;隔开，同一节点的不加空&#26684;
好，这就是另一种与find_all方法有异曲同工之妙的查找方法，是不是感觉很方便？
本篇内容比较多，把BeautifulSoup的方法进行了大部分整理和总结，不过这还不算完全，仍然有BeautifulSoup的修改删除功能，不过这些功能用得比较少，只整理了查找提取的方法，希望对大家有帮助！小伙伴们加油！
熟练掌握了BeautifulSoup，一定会给你带来太多方便，加油吧！
