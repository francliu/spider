转载：http://blog.csdn.net/haoel/article/details/2879
GDB概述\
————
GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB等IDE的调试，但如果你是在UNIX平台下做软件，你会发现GDB这个调试工具有比VC、BCB的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。
一般来说，GDB主要帮忙你完成下面四个方面的功能：
1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。




2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）




3、当程序被停住时，可以检查此时你的程序中所发生的事。




4、动态的改变你程序的执行环境。
从上面看来，GDB和一般的调试工具没有什么两样，基本上也是完成这些功能，不过在细节上，你会发现GDB这个调试工具的强大，大家可能比较习惯了图形化的调试工具，但有时候，命令行的调试工具却有着图形化工具所不能完成的功能。让我们一一看来。
一个调试示例

——————
源程序：tst.c
1#include&lt;stdio.h&gt;





2





3intfunc(intn)





4{





5







intsum=0,i;





6







for(i=0;i&lt;n;i&#43;&#43;)





7







{





8















sum&#43;=i;





9







}




10







returnsum;




11}




12




13




14main()




15{




16







inti;




17







longresult=0;




18







for(i=1;i&lt;=100;i&#43;&#43;)




19







{




20















result&#43;=i;




21







}




22




23






printf(&quot;result[1-100]=%d/n&quot;,result);




24






printf(&quot;result[1-250]=%d/n&quot;,func(250));




25}
编译生成执行文件：（Linux下）




hchen/test&gt;cc-gtst.c-otst
使用GDB调试：
hchen/test&gt;gdbtst
&lt;----------启动GDB

GNUgdb5.1.1

Copyright2002FreeSoftwareFoundation,Inc.

GDBisfreesoftware,coveredbytheGNUGeneralPublicLicense,andyouare

welcometochangeitand/ordistributecopiesofitundercertainconditions.

Type&quot;showcopying&quot;toseetheconditions.

ThereisabsolutelynowarrantyforGDB.
Type&quot;showwarranty&quot;fordetails.

ThisGDBwasconfiguredas&quot;i386-suse-linux&quot;...

(gdb)l



&lt;--------------------l命令相当于list，从第一行开始例出原码。

1






#include&lt;stdio.h&gt;

2

3






intfunc(intn)

4






{

5














intsum=0,i;

6














for(i=0;i&lt;n;i&#43;&#43;)

7














{

8






















sum&#43;=i;

9














}

10













returnsum;

(gdb)





&lt;--------------------直接回车表示，重复上一次命令

11





}

12

13

14





main()

15





{

16













inti;

17













longresult=0;

18













for(i=1;i&lt;=100;i&#43;&#43;)

19













{

20





















result&#43;=i;




(gdb)break16


&lt;--------------------设置断点，在源程序第16行处。

Breakpoint1at0x8048496:filetst.c,line16.

(gdb)breakfunc
&lt;--------------------设置断点，在函数func()入口处。

Breakpoint2at0x8048456:filetst.c,line5.

(gdb)infobreak
&lt;--------------------查看断点信息。

NumType









DispEnbAddress


What

1

breakpoint



keepy

0x08048496inmainattst.c:16

2

breakpoint



keepy

0x08048456infuncattst.c:5

(gdb)r









&lt;---------------------运行程序，run命令简写

Startingprogram:/home/hchen/test/tst
Breakpoint1,main()attst.c:17


&lt;----------在断点处停住。

17













longresult=0;

(gdb)n








&lt;---------------------单条语句执行，next命令简写。

18













for(i=1;i&lt;=100;i&#43;&#43;)

(gdb)n

20





















result&#43;=i;

(gdb)n

18













for(i=1;i&lt;=100;i&#43;&#43;)

(gdb)n

20





















result&#43;=i;

(gdb)c








&lt;---------------------继续运行程序，continue命令简写。

Continuing.

result[1-100]=5050





&lt;----------程序输出。
Breakpoint2,func(n=250)attst.c:5

5














intsum=0,i;

(gdb)n

6














for(i=1;i&lt;=n;i&#43;&#43;)

(gdb)pi






&lt;---------------------打印变量i的&#20540;，print命令简写。

$1=134513808

(gdb)n

8






















sum&#43;=i;

(gdb)n

6














for(i=1;i&lt;=n;i&#43;&#43;)

(gdb)psum

$2=1

(gdb)n

8






















sum&#43;=i;

(gdb)pi

$3=2

(gdb)n

6














for(i=1;i&lt;=n;i&#43;&#43;)

(gdb)psum

$4=3

(gdb)bt






&lt;---------------------查看函数堆栈。

#0
func(n=250)attst.c:5

#1
0x080484e4inmain()attst.c:24

#2
0x400409edin__libc_start_main()from/lib/libc.so.6

(gdb)finish


&lt;---------------------退出函数。

Runtillexitfrom#0
func(n=250)attst.c:5

0x080484e4inmain()attst.c:24

24












printf(&quot;result[1-250]=%d/n&quot;,func(250));

Valuereturnedis$6=31375

(gdb)c



&lt;---------------------继续运行。

Continuing.

result[1-250]=31375


&lt;----------程序输出。
Programexitedwithcode027.&lt;--------程序退出，调试结束。

(gdb)q



&lt;---------------------退出gdb。

hchen/test&gt;
好了，有了以上的感性认识，还是让我们来系统地认识一下gdb吧。

使用GDB

————
一般来说GDB主要调试的是C/C&#43;&#43;的程序。要调试C/C&#43;&#43;的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（cc/gcc/g&#43;&#43;）的-g参数可以做到这一点。如：
&gt;cc-ghello.c-ohello




&gt;g&#43;&#43;-ghello.cpp-ohello
如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。
启动GDB的方法有以下几种：
1、gdb&lt;program&gt;







program也就是你的执行文件，一般在当然目录下。
2、gdb&lt;program&gt;core







用gdb同时调试一个运行程序和core文件，core是程序非法执行后coredump后产生的文件。
3、gdb&lt;program&gt;&lt;PID&gt;







如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。

GDB启动时，可以加上一些GDB的启动开关，详细的开关可以用gdb-help查看。我在下面只例举一些比较常用的参数：
-symbols&lt;file&gt;




-s&lt;file&gt;




从指定文件中读取符号表。
-sefile




从指定文件中读取符号表信息，并把他用在可执行文件中。
-core&lt;file&gt;




-c&lt;file&gt;




调试时coredump的core文件。
-directory&lt;directory&gt;




-d&lt;directory&gt;




加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。
转载：http://blog.csdn.net/haoel/article/details/2879
GDB概述\
————
GDB是GNU开源组织发布的一个强大的UNIX下的程序调试工具。或许，各位比较喜欢那种图形界面方式的，像VC、BCB等IDE的调试，但如果你是在UNIX平台下做软件，你会发现GDB这个调试工具有比VC、BCB的图形化调试器更强大的功能。所谓“寸有所长，尺有所短”就是这个道理。
一般来说，GDB主要帮忙你完成下面四个方面的功能：
1、启动你的程序，可以按照你的自定义的要求随心所欲的运行程序。




2、可让被调试的程序在你所指定的调置的断点处停住。（断点可以是条件表达式）




3、当程序被停住时，可以检查此时你的程序中所发生的事。




4、动态的改变你程序的执行环境。
从上面看来，GDB和一般的调试工具没有什么两样，基本上也是完成这些功能，不过在细节上，你会发现GDB这个调试工具的强大，大家可能比较习惯了图形化的调试工具，但有时候，命令行的调试工具却有着图形化工具所不能完成的功能。让我们一一看来。
一个调试示例

——————
源程序：tst.c
1#include&lt;stdio.h&gt;





2





3intfunc(intn)





4{





5







intsum=0,i;





6







for(i=0;i&lt;n;i&#43;&#43;)





7







{





8















sum&#43;=i;





9







}




10







returnsum;




11}




12




13




14main()




15{




16







inti;




17







longresult=0;




18







for(i=1;i&lt;=100;i&#43;&#43;)




19







{




20















result&#43;=i;




21







}




22




23






printf(&quot;result[1-100]=%d/n&quot;,result);




24






printf(&quot;result[1-250]=%d/n&quot;,func(250));




25}
编译生成执行文件：（Linux下）




hchen/test&gt;cc-gtst.c-otst
使用GDB调试：
hchen/test&gt;gdbtst
&lt;----------启动GDB

GNUgdb5.1.1

Copyright2002FreeSoftwareFoundation,Inc.

GDBisfreesoftware,coveredbytheGNUGeneralPublicLicense,andyouare

welcometochangeitand/ordistributecopiesofitundercertainconditions.

Type&quot;showcopying&quot;toseetheconditions.

ThereisabsolutelynowarrantyforGDB.
Type&quot;showwarranty&quot;fordetails.

ThisGDBwasconfiguredas&quot;i386-suse-linux&quot;...

(gdb)l



&lt;--------------------l命令相当于list，从第一行开始例出原码。

1






#include&lt;stdio.h&gt;

2

3






intfunc(intn)

4






{

5














intsum=0,i;

6














for(i=0;i&lt;n;i&#43;&#43;)

7














{

8






















sum&#43;=i;

9














}

10













returnsum;

(gdb)





&lt;--------------------直接回车表示，重复上一次命令

11





}

12

13

14





main()

15





{

16













inti;

17













longresult=0;

18













for(i=1;i&lt;=100;i&#43;&#43;)

19













{

20





















result&#43;=i;




(gdb)break16


&lt;--------------------设置断点，在源程序第16行处。

Breakpoint1at0x8048496:filetst.c,line16.

(gdb)breakfunc
&lt;--------------------设置断点，在函数func()入口处。

Breakpoint2at0x8048456:filetst.c,line5.

(gdb)infobreak
&lt;--------------------查看断点信息。

NumType









DispEnbAddress


What

1

breakpoint



keepy

0x08048496inmainattst.c:16

2

breakpoint



keepy

0x08048456infuncattst.c:5

(gdb)r









&lt;---------------------运行程序，run命令简写

Startingprogram:/home/hchen/test/tst
Breakpoint1,main()attst.c:17


&lt;----------在断点处停住。

17













longresult=0;

(gdb)n








&lt;---------------------单条语句执行，next命令简写。

18













for(i=1;i&lt;=100;i&#43;&#43;)

(gdb)n

20





















result&#43;=i;

(gdb)n

18













for(i=1;i&lt;=100;i&#43;&#43;)

(gdb)n

20





















result&#43;=i;

(gdb)c








&lt;---------------------继续运行程序，continue命令简写。

Continuing.

result[1-100]=5050





&lt;----------程序输出。
Breakpoint2,func(n=250)attst.c:5

5














intsum=0,i;

(gdb)n

6














for(i=1;i&lt;=n;i&#43;&#43;)

(gdb)pi






&lt;---------------------打印变量i的&#20540;，print命令简写。

$1=134513808

(gdb)n

8






















sum&#43;=i;

(gdb)n

6














for(i=1;i&lt;=n;i&#43;&#43;)

(gdb)psum

$2=1

(gdb)n

8






















sum&#43;=i;

(gdb)pi

$3=2

(gdb)n

6














for(i=1;i&lt;=n;i&#43;&#43;)

(gdb)psum

$4=3

(gdb)bt






&lt;---------------------查看函数堆栈。

#0
func(n=250)attst.c:5

#1
0x080484e4inmain()attst.c:24

#2
0x400409edin__libc_start_main()from/lib/libc.so.6

(gdb)finish


&lt;---------------------退出函数。

Runtillexitfrom#0
func(n=250)attst.c:5

0x080484e4inmain()attst.c:24

24












printf(&quot;result[1-250]=%d/n&quot;,func(250));

Valuereturnedis$6=31375

(gdb)c



&lt;---------------------继续运行。

Continuing.

result[1-250]=31375


&lt;----------程序输出。
Programexitedwithcode027.&lt;--------程序退出，调试结束。

(gdb)q



&lt;---------------------退出gdb。

hchen/test&gt;
好了，有了以上的感性认识，还是让我们来系统地认识一下gdb吧。

使用GDB

————
一般来说GDB主要调试的是C/C&#43;&#43;的程序。要调试C/C&#43;&#43;的程序，首先在编译时，我们必须要把调试信息加到可执行文件中。使用编译器（cc/gcc/g&#43;&#43;）的-g参数可以做到这一点。如：
&gt;cc-ghello.c-ohello




&gt;g&#43;&#43;-ghello.cpp-ohello
如果没有-g，你将看不见程序的函数名、变量名，所代替的全是运行时的内存地址。当你用-g把调试信息加入之后，并成功编译目标代码以后，让我们来看看如何用gdb来调试他。
启动GDB的方法有以下几种：
1、gdb&lt;program&gt;







program也就是你的执行文件，一般在当然目录下。
2、gdb&lt;program&gt;core







用gdb同时调试一个运行程序和core文件，core是程序非法执行后coredump后产生的文件。
3、gdb&lt;program&gt;&lt;PID&gt;







如果你的程序是一个服务程序，那么你可以指定这个服务程序运行时的进程ID。gdb会自动attach上去，并调试他。program应该在PATH环境变量中搜索得到。

GDB启动时，可以加上一些GDB的启动开关，详细的开关可以用gdb-help查看。我在下面只例举一些比较常用的参数：
-symbols&lt;file&gt;




-s&lt;file&gt;




从指定文件中读取符号表。
-sefile




从指定文件中读取符号表信息，并把他用在可执行文件中。
-core&lt;file&gt;




-c&lt;file&gt;




调试时coredump的core文件。
-directory&lt;directory&gt;




-d&lt;directory&gt;




加入一个源文件的搜索路径。默认搜索路径是环境变量中PATH所定义的路径。
